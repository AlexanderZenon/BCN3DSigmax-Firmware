file C:\Users\agarciamoreno\Documents\GitHub\BCN3DSigmax-Firmware-dev\Project Files LCD v126\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS

file C:\Program Files (x86)\4D Labs\4D Workshop 4 IDE\include\Gen4-uLCD-35DCT-CLB.fnc

000001  000001  #platform "Gen4-uLCD-35DCT-CLB"
000002  000001  #platform "Gen4-uLCD-35DCT-CLB"
000003  000008  */
000004  000009      #constant Gen4_ULCD_35DCT_CLB_DIABLO16_GFX
000005  000009      #constant Gen4_ULCD_35DCT_CLB_DIABLO16_GFX
000006  000010        
000007  000011      #IFNOT EXISTS DIABLO16_GFX2_FUNCTIONS
file C:\Program Files (x86)\4D Labs\4D Workshop 4 IDE\include\Diablo16_Functions.fnc

000008  000012          #inherit "Diablo16_Functions.fnc"          // inherit the generic functions
000009  000012          #inherit "Diablo16_Functions.fnc"          // inherit the generic functions
000010  000001        
000011  000002  // Common inheritance for Diablo16 platforms
000012  000003        
000013  000004  //#constant ULCD_32PT_DIABLO16_GFX
000014  000005        
000015  000006        
000016  000007  // define the compiler dummy preambles
000017  000008  #constant LOCAL $//
000018  000008  #constant LOCAL $//
000019  000009  #constant EXTERN $ /**/
000020  000009  #constant EXTERN $ /**/
000021  000010        
000022  000011  #CONST
000023  000020  #END
000024  000021        
000025  000022  #CONST
000026  000038  #END
000027  000039        
000028  000040        
000029  000041        
000030  000042        
000031  000047  */
000032  000048        
000033  000049        
000034  000050  //------------------------------------------------------------------//
000035  000051  //     EVE  miscellaneous functions                                 //
000036  000052  //------------------------------------------------------------------//
000037  000053        
000038  000054  func to("device"), 0;                // output device redirection
000039  000055  // Syntax: to(outstream);
000040  000056  // Usage : to(APPEND); putstr("TWO ");
000041  000057  // Notes : outstream: A variable or constant specifying destination for putch, putstr, putnum and print functions.
000042  000058  //     :
000043  000059  //     : to() sends the printed output to destinations other than the screen. Normally, print just
000044  000060  //     : sends its output to the display in TEXT mode which is the default, however, the output from
000045  000061  //     : print can be sent to COM0, and MDA (media) 'streams'. The to(...) function can also stream
000046  000062  //     : to a memory array . Note that once the to(...) function has taken effect, the stream reverts
000047  000063  //     : back to the default stream which is TEXT as soon as putch, putstr, putnum or print has
000048  000064  //     : completed its action. The APPEND argument is used to send the printed output to the same
000049  000065  //     : place as the previous redirection. This is most useful for building string arrays, or adding
000050  000066  //     : sequential data to a media stream.
000051  000067  //     :
000052  000068  //     : Predefined Name Constant    putch(), putstr(), putnum(), print() redirection
000053  000069  //     : APPEND         0x0000      Output is directed to the same stream that was previously assigned. Output is
000054  000070  //     :                            appended to user memory if previous redirection was to an array.
000055  000071  //     : COM0           0xFF04      Output is redirected to the COM (serial) port.
000056  000072  //     : TEXT           0xFF08      Output is directed to the screen (default).
000057  000073  //     : MDA            0xFF10      Output is directed to the SD or FLASH media.
000058  000074  //     : I2C1           0xF820      Output is directed to the I2C1 port.
000059  000075  //     : memory pointer             Output is redirect to the memory pointer argument, eg to(myarray); print("HELLO");
000060  000076        
000061  000077  //------------------------------------------------------------------//
000062  000078  // to(..) redirection constants            //
000063  000079  //------------------------------------------------------------------//
000064  000080  #CONST
000065  000093  #END
000066  000094        
000067  000095        
000068  000096  func putch("char"), 0;                // write single char to current output device
000069  000097  // Syntax    : putch("char");
000070  000098  // Usage     : putch("A");
000071  000099  // Notes     : prints single characters to the current output stream, usually the
000072  000100  //           : display unless redirected with the ‘to’ redirection function.
000073  000101  //         : The arguments can be a variable, array element, expression or constant.
000074  000102        
000075  000103        
000076  000104  func putchXY("xpos", "ypos", "char"), 0;
000077  000105  // Syntax  : putchXY(x, y, '0x41'),
000078  000106  // Usage   : putchXY(100, 100, "HELLO");
000079  000107  // Notes   : Print a single character at position x, y.
000080  000108  //         : Char may be a constant or variable.
000081  000109  // Returns : nothing.
000082  000110        
000083  000111  func putstrXY("xpos", "ypos", "string"), 0;
000084  000112  // Syntax  : putstrXY(x, y, "string"),
000085  000113  // Usage   : putstrXY(100, 100, "HELLO");
000086  000114  // Notes   : Print a string at position x, y
000087  000115  //         : "String" may be a string constant, or pointer to a word aligned string.
000088  000116  // Returns : nothing.
000089  000117        
000090  000118        
000091  000119  func putstrCentred("xc", "yc", "string"), 0;
000092  000120  // Syntax  : putstrCentred(x, y, "string"),
000093  000121  // Usage   : putstrCentred(100, 100, "HELLO");
000094  000122  // Notes   : Print a string centred at position x, y
000095  000123  //         : "String" may be a string constant, or pointer to a word aligned string.
000096  000124  // Returns : nothing.
000097  000125        
000098  000126        
000099  000127  func pause("milliseconds"), 0;            // blocking delay
000100  000128  // Syntax: pause(milliseconds);
000101  000129  // Usage : pause(1000);                //pause for 1 second
000102  000130  // Notes : Pause for a number of milli second.Maximum delay could be 65535 milli seconds
000103  000131        
000104  000132        
000105  000133  func putnum("arg1","arg2"), 1;            // print number to current output device
000106  000134  // Syntax: putnum(format, value);
000107  000135  // Usage : var := putnum(HEX, val);
000108  000136  // Notes : prints a 16bit number in various formats to the current output stream, usually the display.
000109  000137  //     : Format: A constant that specifies the number format
000110  000138  //     : Value : The number to be printed
000111  000139  //     : (      DECIMAL   )    (   UNSIGNED DECIMAL )    (    HEX         )     (    BINARY          )
000112  000140  //     : DEC     DECZ     DECZB     UDEC     UDECZ     UDECZB     HEX     HEXZ     HEXZB     BIN     BINZ     BINZB
000113  000141  //     : DEC1 DEC1Z     DEC1ZB     UDEC1     UDEC1Z     UDEC1ZB HEX1     HEX1Z     HEX1ZB     BIN1     BIN1Z     BIN1ZB
000114  000142  //     : DEC2 DEC2Z     DEC2ZB     UDEC2     UDEC2Z     UDEC2ZB HEX2     HEX2Z     HEX1ZB     BIN2     BIN2Z     BIN2ZB
000115  000143  //     : DEC3 DEC3Z     DEC3ZB     UDEC3     UDEC3Z     UDEC3ZB HEX3     HEX3Z     HEX1ZB     BIN3     BIN3Z     BIN3ZB
000116  000144  //     : DEC4 DEC4Z     DEC4ZB     UDEC4     UDEC4Z     UDEC4ZB HEX4     HEX4Z     HEX1ZB     BIN4     BIN4Z     BIN4ZB
000117  000145  //     : DEC5 DEC5Z     DEC5ZB     UDEC5     UDEC5Z     UDEC5ZB             BIN5     BIN5Z     BIN5ZB
000118  000146  //     :                                     BIN6     BIN6Z     BIN6ZB
000119  000147  //     :                                     BIN7     BIN7Z     BIN7ZB
000120  000148  //     :                                     BIN8     BIN8Z     BIN8ZB
000121  000149  //     :                                     BIN9     BIN9Z     BIN9ZB
000122  000150  //     :                                     BIN10     BIN10Z     BIN10ZB
000123  000151  //     :                                     BIN11     BIN11Z     BIN11ZB
000124  000152  //     :                                     BIN12     BIN12Z     BIN12ZB
000125  000153  //     :                                     BIN13     BIN13Z     BIN13ZB
000126  000154  //     :                                     BIN14     BIN14Z     BIN14ZB
000127  000155  //     :                                     BIN15     BIN15Z     BIN15ZB
000128  000156  //     :                                     BIN16     BIN16Z     BIN16ZB
000129  000157  //     : field: Returns the the default width of the numeric field (digit count), usually ignored.
000130  000158  //     : bit 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0
000131  000159  //     : | | | | \___ ___/ \__ __/ \_____ _____/
000132  000160  //     : | | | | V V V
000133  000161  //     : | | | | | | |
000134  000162  //     : | | | | | |
000135  000163  //     : | | | | (nb 0 = 16) | |____BASE (usually 2,10 or 16)
000136  000164  //     : | | | | digit count |
000137  000165  //     : | | | | |___reserved (not used on GOLDELOX)
000138  000166  //     : | | | |
000139  000167  //     : | | | |
000140  000168  //     : | | | |
000141  000169  //     : | | | |
000142  000170  //     : | | | |
000143  000171  //     : | | | |______ 1 = leading zeros included
000144  000172  //     : | | | 0 = leading zeros suppressed
000145  000173  //     : | | |
000146  000174  //     : | | |
000147  000175  //     : | | |_______ 1 = leading zero blanking
000148  000176  //     : | |
000149  000177  //     : | |_____ sign bit (0 = signed, 1 = unsigned)
000150  000178  //     : |
000151  000179  //     : |______ 1 = space before unsigned number
000152  000180        
000153  000181        
000154  000182  func __translate("arg1","arg2","arg3","arg4"), 1; // list translator (*** internal compiler use only, not usable)
000155  000183        
000156  000184        
000157  000185  func putstr("string"), 1;                         // print var (word) aligned string to current output device
000158  000186  // Syntax: putstr(pointer);
000159  000187  // Usage : putstr("HELLO\n");
000160  000188  // Notes : putstr prints a string to the current output stream, usually the display. The argument can be
000161  000189  //       : a string constant, a word aligned pointer to a string, a pointer to an array, or a pointer to
000162  000190  //       : a data statement. Note that string constants and data statement pointers are byte aligned.
000163  000191  //       : The output of putstr can be redirected to the communications port, the media, or memory
000164  000192  //       : using the to(...); function.
000165  000193  //       : A string constant is automatically terminated with a zero.
000166  000194  //       : A string in a data statement is not automatically terminated with a zero.
000167  000195  //       : All variables in 4DGL are 16bit, if an array is used for holding 8 bit characters, each array
000168  000196  //       : element packs 1 or 2 characters.
000169  000197        
000170  000198        
000171  000199  func strlen("varAddress"), 1;                   // return length of a var (word) aligned string in character units
000172  000200  // Syntax: strlen("varAddress);
000173  000201  // Usage : strlen("HELLO\n");
000174  000202  // Notes : gives the length of a string that is packed into regular var array
000175  000203  //       : Use str_Length(ptr)  for string pointer mode
000176  000204        
000177  000205        
000178  000206  func charwidth("char"), 1;
000179  000207  // Syntax  : charwidth(char);
000180  000208  // Usage   : wid := charwidth('W');
000181  000209  // Notes   : calculates width of a character in pixel units.
000182  000210  //         : 'char' may be a constant or variable.
000183  000211  // Returns : Width of character in pixel units.
000184  000212        
000185  000213        
000186  000214  func charheight("char"), 1;
000187  000215  // Syntax  : charheight(char);
000188  000216  // Usage   : ht := charheight('0x41');
000189  000217  // Notes   : Calculates height of a character in pixel units.
000190  000218  //         : 'char' may be a constant or variable.
000191  000219  // Returns : Height of character in pixel units.
000192  000220        
000193  000221        
000194  000222  func strwidth("pointer"), 1;
000195  000223  // Syntax  : strwidth(ptr);
000196  000224  // Usage   : x := strwidth("HELLO");
000197  000225  // Notes   : returns width of a string in pixel units.
000198  000226  //         : 'pointer' may be a constant or pointer to word aligned variable
000199  000227  // Returns : Width of string in pixel units, can be multi line.
000200  000228        
000201  000229        
000202  000230  func strheight(), 1;
000203  000231  // Syntax  : strheight();
000204  000232  // Usage   : h := strheight();
000205  000233  // Notes   : calculates height of a string in pixel units (after a call to strwidth );
000206  000234  //         : pointer may be a constant or pointer to word aligned variable
000207  000235  // Returns : Height of string in pixel units, can be multi line.
000208  000236        
000209  000237        
000210  000238  func unicode_page("charbeg","charend","charoffset"), 1;
000211  000239  // Syntax: unicode_page("charbeg","charend","charoffset");
000212  000240  // Usage : eg:  F_Traditional_0x20_0xFF
000213  000241  // Notes : After selecting a unicode image control with txt_FontID,
000214  000242  //       : this function is called to set the required font within the
000215  000243  //       : unicode set. The file "Unicode.inc" contains wrappers for
000216  000244  //       : this function, and it is not normally called directly.
000217  000245  //       : Returns count of characters in the set.
000218  000246  //       : Refer to "Unicode.inc" for further information.
000219  000247        
000220  000248        
000221  000249  //------------------------------------------------------------------//
000222  000250  //          Text Related Functions                                  //
000223  000251  //------------------------------------------------------------------//
000224  000252        
000225  000253  func txt_MoveCursor("line", "column"), 0;
000226  000254  // Syntax: txt_SetCursor(line, column);
000227  000255  // Usage : txt_SetCursor(arg1, arg2);
000228  000256  // Notes : Moves the text Cursor to a new screen position set by
000229  000257  //       : line,column parameters.
000230  000258        
000231  000259  func txt_Set("function", "value"), 0;
000232  000260  // Syntax: txt_Set(function, value);
000233  000261  // Usage : txt_Set(arg1, arg2);
000234  000262  // Returns : Original value before the change
000235  000263  // Notes : Sets various text related parameters used by other functions
000236  000264  //       : This allows the features to be set programatically with a
000237  000265  //       : single function call.It is strongly recommended to use the
000238  000266  //       : pre-defined constants rather than the mode numbers.
000239  000267  //       : NB:- It is often required to be able to set text
000240  000268  //       : functions with a single function call for graphics engine
000241  000269  //       : related functions, however, there is a complete set of single parameter
000242  000270  //       : shortcut functions that have exactly the same function as
000243  000271  //       : each of the txt_Set modes and saves 1 parameter / uses less memory
000244  000272  //       :
000245  000273  //       : txt_Set(TEXT_COLOUR, colour);        // function 0, TEXT_COLOUR, default colour = LIME
000246  000274  //       : txt_Set(TEXT_HIGHLIGHT, colour);     // function 1, TEXT_HIGHLIGHT)
000247  000275  //       : txt_Set(FONT_ID, fontNumer);         // function 2, FONT_ID)
000248  000276  //       : txt_Set(TEXT_WIDTH, multiplier);     // function 3, TEXT_WIDTH)
000249  000277  //       : txt_Set(TEXT_HEIGHT, multiplier);    // function 4, TEXT_HEIGHT)
000250  000278  //       : txt_Set(TEXT_XGAP, pixels);          // function 5, TEXT_XGAP)
000251  000279  //       : txt_Set(TEXT_YGAP, pixels);          // function 6, TEXT_YGAP)
000252  000280  //       : txt_Set(TEXT_PRINTDELAY, msecs);     // function 7, TEXT_PRINTDELAY)
000253  000281  //       : txt_Set(TEXT_OPACITY, value);        // function 8, TEXT_OPACITY)
000254  000282  //       : txt_Set(TEXT_BOLD, boldness);        // function 9, TEXT_BOLD)
000255  000283  //       : txt_Set(TEXT_ITALIC, slope);         // function 10, TEXT_ITALIC)
000256  000284  //       : txt_Set(TEXT_INVERSE, onoff);        // function 11, TEXT_INVERSE)
000257  000285  //       : txt_Set(TEXT_UNDERLINED, onoff);     // function 12, TEXT_UNDERLINED)
000258  000286  //       : txt_Set(TEXT_ATTRIBUTES, combine);   // function 13, TEXT_ATTRIBUTES)
000259  000287  //       : txt_Set(TEXT_WRAP, column);          // function 14, TEXT_WRAP)
000260  000288  //       : txt_Set(TEXT_ANGLE , degrees);       // function 15, TEXT_ANGLE)
000261  000289  //       :
000262  000290  //       : txt_Set(TEXT_COLOUR, colour);
000263  000291  //       : mode = TEXT_COLOUR (function 0)
000264  000292  //       : txt_Set(TEXT_COLOUR, value);
000265  000293  //       : value = 0 to 0xFFFF, Black to White
000266  000294  //       : Sets the Text colour for the display
000267  000295  //       : Default = LIME.
000268  000296  //       :
000269  000297  //       : mode = TEXT_HIGHLIGHT (function 1)
000270  000298  //       : txt_Set(TEXT_HIGHLIGHT, value);
000271  000299  //       : value = 0 to 0xFFFF, Black to White
000272  000300  //       : Sets the Text background colour for the display. Effective
000273  000301  //       : when text mode is Opaque.
000274  000302  //       : Default = BLACK.
000275  000303  //       :
000276  000304  //       : mode = FONT_ID (function 2)
000277  000305  //       : txt_Set(FONT_ID, value);
000278  000306  //       : value = FONT1 to FONT11 for internal fonts
000279  000307  //       : else this value is the name of a font included
000280  000308  //       : in a users program in a data statement.
000281  000309  //       : Default = FONT SIZE 3.
000282  000310  //       :
000283  000311  //       : mode = TEXT_WIDTH  (function 3)
000284  000312  //       : txt_Set(TEXT_WIDTH, value);
000285  000313  //       : value = 1 to 16
000286  000314  //       : Sets the Text Width multiplier
000287  000315  //       : text will be printed magnified horizontally
000288  000316  //       : by this factor, Default = 1.
000289  000317  //       :
000290  000318  //       : mode = TEXT_HEIGHT  (function 4)
000291  000319  //       : txt_Set(TEXT_HEIGHT, value);
000292  000320  //       : value = 1 to 16
000293  000321  //       : Sets the Text Height multiplier
000294  000322  //       : text will be printed magnified vertically
000295  000323  //       : by this factor, Default = 1.
000296  000324  //       :
000297  000325  //       : mode = TEXT_XGAP  (function 5)
000298  000326  //       : txt_Set(TEXT_XGAP, value);
000299  000327  //       : value = 1 to 32
000300  000328  //       : Sets the horizontal gap between characters
000301  000329  //       : The gap is in pixel units, Default = 0
000302  000330  //       :
000303  000331  //       : mode = TEXT_YGAP  (function 6)
000304  000332  //       : txt_Set(TEXT_YGAP, value);
000305  000333  //       : value = 1 to 32
000306  000334  //       : Sets the vertical gap below characters
000307  000335  //       : The gap is in pixel units, Default = 0
000308  000336  //       :
000309  000337  //       : mode = TEXT_PRINTDELAY  (function 7) DEPRECATED
000310  000338  //       : txt_Set(TEXT_PRINTDELAY, value);
000311  000339  //       : value = 0 to 255
000312  000340  //       : Sets the delay time (in ms) during character
000313  000341  //       : printing to give a 'teletype' like effect.
000314  000342  //       : Often used to attract attention to a string
000315  000343  //       : being printed which can often be missed if
000316  000344  //       : just suddenly appearing or changing.
000317  000345  //       : Default = 0 ms.
000318  000346  //       :
000319  000347  //       : mode = TEXT_OPACITY (function 8)
000320  000348  //       : txt_Set(TEXT_OPACITY, value);
000321  000349  //       : value = TRANSPARENT (0) = Text Trasparent
000322  000350  //       : value = OPAQUE (1) = Text Opaque
000323  000351  //       : Sets the Opacity/Transparency of the text
000324  000352  //       : Default = 0 or TRANSPARENT
000325  000353  //       :
000326  000354  //       : mode = TEXT_BOLD (function 9)
000327  000355  //       : txt_Set(TEXT_BOLD, value);
000328  000356  //       : value = dont care
000329  000357  //       : Sets Bold Text mode for the next string or char
000330  000358  //       : The feature automatically resets after printing
000331  000359  //       : using putstr or print has completed
000332  000360  //       :
000333  000361  //       : mode = TEXT_ITALIC (function10)
000334  000362  //       : txt_Set(TEXT_ITALIC, value);
000335  000363  //       : value = dont care
000336  000364  //       : Sets Italic Text mode for the next string or char
000337  000365  //       : The feature automatically resets after printing
000338  000366  //       : using putstr or print has completed
000339  000367        
000340  000368  //       : mode = TEXT_INVERSE (function 11)
000341  000369  //       : txt_Set(TEXT_INVERSE, value);
000342  000370  //       : value = dont care
000343  000371  //       : Sets Inverse Text mode for the next string or char
000344  000372  //       : The feature automatically resets after printing
000345  000373  //       : using putstr or print has completed
000346  000374  //       :
000347  000375  //       : mode = TEXT_UNDERLINED (function 12)
000348  000376  //       : txt_Set(TEXT_UNDERLINED, value);
000349  000377  //       : value = dont care
000350  000378  //       : Sets Underlined Text mode for the next string or char
000351  000379  //       : The feature automatically resets after printing
000352  000380  //       : using putstr or print has completed
000353  000381  //       :
000354  000382  //       : mode = TEXT_ATTRIBUTES (function 13)
000355  000383  //       : txt_Set(TEXT_ATTRIBUTES, value);
000356  000384  //       : value = bits are defined as:
000357  000385  //       :  BOLD        16          // TEXT_ATTRIBUTES bold text (auto reset)
000358  000386  //       :  ITALIC      32          // TEXT_ATTRIBUTES italic text (auto reset)
000359  000387  //       :  INVERSE     64          // TEXT_ATTRIBUTES inverse text (auto reset)
000360  000388  //       :  UNDERLINED  128         // TEXT_ATTRIBUTES underlined text (auto reset)
000361  000389  //       : Allows a combination of text attributes to be defined together
000362  000390  //       : by 'or'ing the bits together.
000363  000391  //       : Example: txt_Set(TEXT_ATTRIBUTES, BOLD | INVERSE); // bold + inverse
000364  000392  //       : The feature automatically resets after printing
000365  000393  //       : using putstr or print has completed.
000366  000394  //       : Bits 0-3 and 8-15 are reserved for future attributes.
000367  000395  //       :
000368  000396  //       : mode = TEXT_WRAP (function 14)
000369  000397  //       : txt_Set(TEXT_WRAP , value);
000370  000398  //       : Sets the position where text wrap will occur
000371  000399  //       : The feature automatically resets when screen
000372  000400  //       : mode is changed. If the value is set to 0,
000373  000401  //       : text wrap is turned off.
000374  000402  //       : of the current screen. Default value is 0
000375  000403  // Notes : The value is in pixel units.
000376  000404  //       :
000377  000405  //       : mode = TEXT_ANGLE (function 15)
000378  000406  //       : txt_Set(TEXT_ANGLE , value);
000379  000407  //       : Sets the angle of plotted fonts
000380  000408  // Notes : The angle is in degrees.
000381  000409  //       :
000382  000410        
000383  000411  //------------------------------------------------------------------------------
000384  000412  //txt_Set() related constants
000385  000413  //------------------------------------------------------------------------------
000386  000414  #CONST
000387  000433  #END
000388  000434        
000389  000435  //------------------------------------------------------------------------------
000390  000436  //txt_Set() related arguments
000391  000437  //------------------------------------------------------------------------------
000392  000438  #CONST
000393  000464  #END
000394  000465        
000395  000466        
000396  000467  //=====================================================//
000397  000468  // Single parameter short-cuts                         //
000398  000469  // for the txt_Set functions                           //
000399  000470  // These functions return the existing value before    //
000400  000471  // the change is made.                                 //
000401  000472  //=====================================================//
000402  000473  func txt_FGcolour("colour"), 1;             // 0  text foreground colour
000403  000474  func txt_BGcolour("colour"), 1;             // 1  text background colour
000404  000475  func txt_FontID("id"), 1;                   // 2  text font ID (0 = system font)
000405  000476  func txt_Width("multiplier"), 1;            // 3  text width multiplier
000406  000477  func txt_Height("multiplier"), 1;           // 4  text height multiplier
000407  000478  func txt_Xgap("pixelcount"), 1;             // 5  text gap between characters
000408  000479  func txt_Ygap("pixelcount"), 1;             // 6  text gap between lines
000409  000480  func txt_Delay("millisecs"), 1;             // 7  text printing delay factor
000410  000481  func txt_Opacity("mode"), 1;                // 8  text OPAQUE or TRANSPARENT
000411  000482  func txt_Bold("mode"), 1;                   // 9  text bold ON/OFF
000412  000483  func txt_Italic("mode"), 1;                 // 10 text italic ON/OFF
000413  000484  func txt_Inverse("mode"), 1;                // 11 text inverse ON/OFF
000414  000485  func txt_Underline("mode"), 1;              // 12 text underline ON/OFF
000415  000486  func txt_Attributes("value"), 1;            // 13 text combined bold|italic|inverse|underline
000416  000487  func txt_Wrap("value"), 1;                  // 14 text set text wrap position
000417  000488  func txt_Angle("value"), 1;                 // 15 text set angle of plotted font
000418  000489        
000419  000490        
000420  000491        
000421  000492  //------------------------------------------------------------------//
000422  000493  // Memory Access Functions                                          //
000423  000494  //------------------------------------------------------------------//
000424  000495                                                  //
000425  000496  func peekW("address"), 1;                       // read a word from system memory
000426  000497  func pokeW("address", "wordvalue"), 0;          // write a word to system memory
000427  000498  // refer to address map of internal variables   //
000428  000499        
000429  000500        
000430  000501  //------------------------------------------------------------------//
000431  000502  //        CTYPE Function Prototypes
000432  000503  //------------------------------------------------------------------//
000433  000504        
000434  000505  func isdigit("char"), 1;    //Returns a 1 if the character is an ascii digit else returns a 0
000435  000506  // Syntax: isdigit("char");
000436  000507  // Usage : Var := isdigit(ch);
000437  000508  // Notes : char specifies the ascii character for the test
000438  000509  //     : 0 : char is not an ascii digit.
000439  000510  //     : 1 : char is an ascii digit..
000440  000511  //     : Valid range is "0123456789"
000441  000512        
000442  000513  func isxdigit("char"), 1;    //Returns a 1 if the character is an ascii hexadecimal digit else returns a 0
000443  000514  // Syntax: isxdigit("char");
000444  000515  // Usage : Var := isxdigit(ch);
000445  000516  // Notes : char specifies the ascii character for the test
000446  000517  //     : 0 : char is not an ascii hexadecimal digit.
000447  000518  //     : 1 : char is an ascii hexadecimal digit..
000448  000519  //     : Valid range is "0123456789ABCDEF"
000449  000520        
000450  000521  func isupper("char"), 1;    //Returns a 1 if the character is an ascii upper case letter else returns a 0
000451  000522  // Syntax: isupper("char");
000452  000523  // Usage : Var := isupper(ch);
000453  000524  // Notes : char specifies the ascii character for the test
000454  000525  //     : 0 : char is not an ascii upper-case letter.
000455  000526  //     : 1 : char is an ascii upper-case letter.
000456  000527  //     : Valid range is "ABCD....WXYZ"
000457  000528        
000458  000529  func islower("char"), 1;    //Returns a 1 if the character is an ascii lower case letter else returns a 0
000459  000530  // Syntax: islower("char");
000460  000531  // Usage : Var := islower(ch);
000461  000532  // Notes : char specifies the ascii character for the test
000462  000533  //     : 0 : char is not an ascii lower-case letter.
000463  000534  //     : 1 : char is an ascii lower-case letter.
000464  000535  //     : Valid range is "abcd....wxyz"
000465  000536        
000466  000537  func isalpha("char"), 1;    //Returns a 1 if the character is an ascii lower or upper case letter else returns a 0
000467  000538  // Syntax: isalpha("char");
000468  000539  // Usage : Var := isalpha(ch);
000469  000540  // Notes : char specifies the ascii character for the test
000470  000541  //     : 0 : char is not an ascii lower or upper case letter.
000471  000542  //     : 1 : char is an ascii lower or upper case letter.
000472  000543  //     : Valid range is "ABCD...XYZ", "abcd....wxyz"
000473  000544        
000474  000545  func isalnum("char"), 1;    //Returns a 1 if the character is an ascii alpha numeric else returns a 0
000475  000546  // Syntax: isalnum("char");
000476  000547  // Usage : Var := isalnum(ch);
000477  000548  // Notes : char specifies the ascii character for the test
000478  000549  //     : 0 : char is not an ascii alphanumeric character.
000479  000550  //     : 1 : char is an ascii alphanumeric character.
000480  000551  //     : Valid range is "ABCD...XYZ", "abcd....wxyz", "0123456789"
000481  000552        
000482  000553  func isprint("char"), 1;    //Returns a 1 if the character is a printible ascii char else returns a 0
000483  000554  // Syntax: isprint("char");
000484  000555  // Usage : Var := isprint(ch);
000485  000556  // Notes : char specifies the ascii character for the test
000486  000557  //     : 0 : char is not a printable ascii character.
000487  000558  //     : 1 : char is a printable ascii character.
000488  000559  //     : Valid range is "0x20...0x7F"
000489  000560        
000490  000561  func isspace("char"), 1;    //Returns a 1 if the character is any one of the space type chars else returns a 0
000491  000562  // Syntax: isspace("char");
000492  000563  // Usage : Var := isspace(ch);
000493  000564  // Notes : char specifies the ascii character for the test
000494  000565  //     : 0 : char is not a space type character.
000495  000566  //     : 1 : char is a space type character.
000496  000567  //     : Valid range is space, formfeed, newline, carriage return, tab, vertical tab
000497  000568        
000498  000569  //unformatted
000499  000570  func iswhite("char"), 1;    //
000500  000571  // Syntax: iswhite("char");
000501  000572  // Usage : Var := iswhite(ch);
000502  000573  // Notes : char specifies the ascii character for the test
000503  000574  //     : 0 : char is not a space or tab character.
000504  000575  //     : 1 : char is not a space or tab character.
000505  000576  //     : Valid range is space or tab
000506  000577        
000507  000578  func toupper("char"), 1; //if character is lower case it returns the upper case equivalent else returns the passed char
000508  000579  // Syntax: toupper("char");
000509  000580  // Usage : Var := toupper(ch);
000510  000581  // Notes : char specifies the ascii character for the test
000511  000582  //     : "ABCD....XYZ" : if character is a lower case letter.
000512  000583  //     : char : if character is not a lower case letter.
000513  000584  //     : Valid range is "abcd....wxyz"
000514  000585        
000515  000586  func tolower("char"), 1; //if character is upper case it returns the lower case equivalent else returns the passed char
000516  000587  // Syntax: tolower("char");
000517  000588  // Usage : Var := tolower(ch);
000518  000589  // Notes : char specifies the ascii character for the test
000519  000590  //     : "abcd....xyz" : if character is an upper case letter.
000520  000591  //     : char : if character is not an upper case letter.
000521  000592  //     : Valid range is "ABCD....WXYZ"
000522  000593        
000523  000594  func LObyte("var"), 1;        //Returns the lower byte (lower 8 bits) of a 16 bit variable.
000524  000595  // Syntax: LObyte(var);
000525  000596  // Usage : myVar := LObyte(myvar2);
000526  000597  // Notes : var specifies the user variable
000527  000598  //     : Returns the lower byte (lower 8 bits) of a 16 bit variable
000528  000599        
000529  000600  func HIbyte("var"), 1;        //Returns the High byte (upper 8 bits) of a 16 bit variable.
000530  000601  // Syntax: HIbyte(var);
000531  000602  // Usage : myVar := HIbyte(myvar2);
000532  000603  // Notes : var specifies the user variable
000533  000604  //     : Returns the high byte (upper 8 bits) of a 16 bit variable
000534  000605        
000535  000606        
000536  000607  func ByteSwap("var"), 1;    //Returns the swapped upper and lower bytes of a 16 bit variable.
000537  000608  // Syntax: ByteSwap(var);
000538  000609  // Usage : myVar := ByteSwap(myvar2);
000539  000610  // Notes : var specifies the user variable
000540  000611  //     : Returns the endian swapped value of a 16 bit variable
000541  000612        
000542  000613        
000543  000614  func NybleSwap("var"), 1;    //Returns the swapped lower bytes nybles, upper byte retained.
000544  000615  // Syntax: NybleSwap(var);
000545  000616  // Usage : myVar := NybleSwap(myvar2);
000546  000617  // Notes : var specifies the user variable
000547  000618  //     : Returns the 16 bit variable with swapped lower nybles
000548  000619        
000549  000620  func putnumXY("xpos", "ypos", "arg1","arg2"), 1;            // print number at the specified position
000550  000621  // Syntax: putnumXY(x, y, format, value);
000551  000622  // Usage : var := putnumXY(100, 100, HEX, val);
000552  000623  // Notes : prints a 16bit number in various formats at the specified XY coordinates.
000553  000624  //     : Format: A constant that specifies the number format
000554  000625  //     : Value : The number to be printed
000555  000626        
000556  000627  func txt_FontBank("flashbank", "address"), 1;               // use a font located in another bank
000557  000628  // Syntax: txt_FontBank(bank, offset);
000558  000629  // Usage : txt_FontBank(FLASHBANK_2, arg2);
000559  000630  // Returns : Current font before the change, or 0 if invalid or bank is protected
000560  000631  // Notes : Sets the current font to a font held in another bank
000561  000632        
000562  000633  //------------------------------------------------------------------//
000563  000634  // 16bit signed Math Functions                                      //
000564  000635  //------------------------------------------------------------------//
000565  000636                                                  //
000566  000637  func ABS("value"), 1;                           // return a positive number
000567  000638  // Syntax: ABS(value);
000568  000639  // Usage : var := ABS(arg);
000569  000640  // Notes : Returns the absolute value of an argument
000570  000641        
000571  000642  func MIN("value1", "value2"), 1;                // return the smaller of 2 numbers
000572  000643  // Syntax: MIN(value1, value2);
000573  000644  // Usage : var := MIN(arg1, arg2);
000574  000645  // Notes : Returns the minimum of 2 arguments
000575  000646        
000576  000647  func MAX("value1", "value2"), 1;                // return the larger of 2 numbers
000577  000648  // Syntax: MAX(value1, value2);
000578  000649  // Usage : var := MAX(arg1, arg2);
000579  000650  // Notes : Returns the maximum of 2 arguments
000580  000651        
000581  000652  func SWAP("&var", "&var"), 0;                   // swap 2 variables, arguments must point to variables
000582  000653  // Syntax: SWAP(&var1, &var2);
000583  000654  // Usage : SWAP(&var1, &var2);
000584  000655  // Notes : Swaps the contents of 2 variables or memory locations
000585  000656        
000586  000657  func SIN("angle"), 1;                           // return SIN of angle
000587  000658  // Syntax: SIN(angle);
000588  000659  // Usage : var := SIN(arg);
000589  000660  // Notes : Returns the sine in radians of an argument in degrees
000590  000661  //       : the returned value range is from 127 to -127. The real
000591  000662  //       : cosine values vary from 1.0 to -1.0 so appropriate
000592  000663  //       : scaling must be done in user code.
000593  000664        
000594  000665  func COS("angle"), 1;                           // return COS of angle
000595  000666  // Syntax: COS(angle);
000596  000667  // Usage : var := COS(arg);
000597  000668  // Notes : Returns the cosine in radians of an argument in degrees
000598  000669  //       : the returned value range is from 127 to -127. The real
000599  000670  //       : cosine values vary from 1.0 to -1.0 so appropriate
000600  000671  //       : scaling must be done in user code.
000601  000672        
000602  000673  func RAND(), 1;                                 // return a pseudo random number
000603  000674  // Syntax: RAND();
000604  000675  // Usage : var := RAND();
000605  000676  // Notes : Returns a random number between 0 and 0xFFFF.
000606  000677  //       : The random number generator must first be seeded
000607  000678  //       : by using the SEED(number) function.
000608  000679        
000609  000680  func RANDVAL("low", "high"), 1;                 // return a ranged pseudo random number
000610  000681  // Syntax: RANDVAL("low", "high");
000611  000682  // Usage : var := RANDVAL(low, high);
000612  000683  // Notes : Returns a random number between low and high limits
000613  000684  //       : such that low <= N < high
000614  000685  //       : The random number generator may first be seeded
000615  000686  //       : by using the SEED(number) function.
000616  000687  //       : RANDVAL is the equivalent of aggregate functions:-
000617  000688  //       :     myvar = ABS( (RAND()%(high-low)+low) );
000618  000689  //       : Note that the lower limit is inclusive, but the upper limit is exclusive.
000619  000690        
000620  000691  func SEED("number"), 0;                         // re-seed the pseudo random number generator
000621  000692  // Syntax: SEED(number);
000622  000693  // Usage : SEED(arg);
000623  000694  // Notes : Seeds the random number generator.
000624  000695        
000625  000696  func SQRT("number"), 1;                         // return square root of a number
000626  000697  // Syntax: SQRT(number);
000627  000698  // Usage : SQRT(arg);
000628  000699  // Notes : Returns the integer square root of a number.
000629  000700        
000630  000701  func OVF(), 1;                                  // returns upper 16bits of 32bit results
000631  000702  // Syntax: OVF();
000632  000703  // Usage : loWord := 0x2710 * 0x2710;           // (10000 * 10000 in hex format)
000633  000704  //       : hiWord := OVF();
000634  000705  // Notes : This function returns the high order 16 bits from certain math and shift functions..
000635  000706        
000636  000707  func CY(), 1;
000637  000708  // Syntax: CY();
000638  000709  // Usage : myvar := 0xFFF8 + 9;                 // result = 1
000639  000710  //       : print(myvar," "CY(),"\n");           // carry = 1
000640  000711  // Notes : This function returns the carry status of an
000641  000712  // unsigned overflow from any 16 or 32bit additions or sutractions.
000642  000713        
000643  000714  func EVE_SP(), 1;
000644  000715  // Syntax: EVE_SP();
000645  000716  // Usage : eg:  print(EVE_SP());
000646  000717  // Notes : Used for debugging to assess the current stack level,
000647  000718  //       : mainly for checking stack leaks, see example EVE_SP.4dg
000648  000719        
000649  000720  func EVE_SSIZE(), 1;
000650  000721  // Syntax: EVE_SSIZE();
000651  000722  // Usage : eg:  print(EVE_SSIZE());
000652  000723  // Notes : Used to get the stack size,
000653  000724  //       : mainly for debugging purposes, EVE_SP.4dg
000654  000725        
000655  000726        
000656  000727  //------------------------------------------------------------------//
000657  000728  //
000658  000729  //------------------------------------------------------------------//
000659  000730  func mem_ArrayOp1("memarray", "count", "op", "value"), 0;                     // single array functions
000660  000731        
000661  000732        
000662  000733  // single word array operations
000663  000734  #CONST
000664  000755  #END
000665  000756        
000666  000757        
000667  000758  func mem_ArrayOp2("memarray1", "memarray2", "count", "op", "value"), 0;         // dual array functions
000668  000759        
000669  000760  // dual word array operations
000670  000761  #CONST
000671  000773  #END
000672  000774        
000673  000775        
000674  000776  func __reserved3(), 0; // do not remove
000675  000777  func __reserved4(), 0; // do not remove
000676  000778        
000677  000779        
000678  000780  //------------------------------------------------------------------//
000679  000781  // unsigned long (32 bit) operations                                //
000680  000782  //------------------------------------------------------------------//
000681  000783        
000682  000784  func uadd_3232("res32", "val1", "val2"), 1;
000683  000785  // Syntax   : cmp_3232(res32, varA, varB);
000684  000786  // Input    : DWORD res32 points to optional result (or zero for compare)
000685  000787  //          : DWORD val1 points to 32bit augend
000686  000788  //          : DWORD val2 points to 32bit addend
000687  000789  // Usage    : var res32[2];
000688  000790  //          : res := cmp_3232(res32, val1, val2);
000689  000791  // Notes    : performs an unsigned addition of 2 x 32bit values
000690  000792  //          : placing the 32bit result in a 2 word array.
000691  000793  // Returns  : returns 1 on 32bit unsigned overflow (carry).
000692  000794  //          ; carry flag is also set on 32bit unsigned overflow
000693  000795  //          ; and can be read with the CY() function.
000694  000796        
000695  000797        
000696  000798  func usub_3232("res32", "val1", "val2"), 1;
000697  000799  // Syntax   : cmp_3232(res32, varA, varB);
000698  000800  // Input    : DWORD res32 points to optional result (or zero for compare)
000699  000801  //          : DWORD val1 points to first 32bit minuend
000700  000802  //          : DWORD val2 points to 32bit subtrahend
000701  000803  // Usage    : var res32[2];
000702  000804  //          : res := cmp_3232(res32, val1, val2);
000703  000805  // Notes    : performs an unsigned subtraction of 2 x 32bit values
000704  000806  //          : placing the 32bit result in a 2 word array.
000705  000807  // Returns  : returns 1 on 32bit unsigned overflow (borrow).
000706  000808  //          ; carry flag is also set on 32bit unsigned underflow
000707  000809  //          ; and can be read with the CY() function.
000708  000810        
000709  000811        
000710  000812  func umul_1616("&res32", "val1", "val2"), 1;
000711  000813  // Syntax   : umul_1616(&res32, varA, varB);
000712  000814  // Input    : DWORD result   points to 32bit result register.
000713  000815  //          : VAR   val1  16bit register or constant
000714  000816  //          : VAR   val2  16bit register or constant
000715  000817  // Usage    : var res32[2];
000716  000818  //          : umul_1616(&res32, myvar, 50000);
000717  000819  // Notes    : performs an unsigned multiply of 2 x 16bit values
000718  000820  //          : placing the 32bit result in a 2 word array.
000719  000821  // Returns  : the pointer to the 32bit result.
000720  000822  //          : carry and overflow are not affected.
000721  000823        
000722  000824        
000723  000825  func udiv_3232("res32", "val1", "val2"), 1;
000724  000826  // Syntax   : udiv_1616(res32, varA, varB);
000725  000827  // Input    : DWORD *result   points to 32bit result register.
000726  000828  //          : DWORD   val1  pointer to 32bit value (dividend)
000727  000829  //          : DWORD   val2  pointer to 32bit value (divisor)
000728  000830  // Usage    : var res32[2];
000729  000831  //          : umul_1616(res32, myvar, 50000);
000730  000832  // Notes    : performs an unsigned division of 2 x 32bit values
000731  000833  //          : placing the 32bit result in a 2 word array.
000732  000834  // Returns  : the pointer to the 32bit result.
000733  000835  //          : carry and overflow are not affected.
000734  000836        
000735  000837        
000736  000838  func ucmp_3232("val1", "val2"), 1;
000737  000839  // Syntax   : cmp_3232(varA, varB);
000738  000840  // Input    : DWORD val1 points to 32bit minuend
000739  000841  //          : DWORD val2 points to 32bit sutrahend
000740  000842  // Usage    : res := cmp_3232(val1, val2);
000741  000843  // Notes    : performs an unsigned comparison of 2 x 32bit values.
000742  000844  //          : The result of the subtraction is returned.
000743  000845  // Returns  : 0  if equal
000744  000846  //          : 1  if val1 > val2
000745  000847  //          : -1 if val1 < val2
000746  000848  //          : This function does not affect the carry flag.
000747  000849        
000748  000850  func __reserved5(), 0; // do not remove
000749  000851  func __reserved6(), 0; // do not remove
000750  000852        
000751  000853  //------------------------------------------------------------------//
000752  000854  // Floating point operations                                        //
000753  000855  // Note that source arguments may be a pointer to a float variable, //
000754  000856  // or a numeric text string.                                        //
000755  000857  // A string argument is converted at run-time by calling            //
000756  000858  // flt_Val for a string argument.                                   //
000757  000859  // Note that a float variable is a 2 word array, eg var myfloat[2]; //
000758  000860  //------------------------------------------------------------------//
000759  000861  func flt_VAL("fresult", "numstring"), 1;
000760  000862  // Syntax   : flt_VAL(float1, mystring);
000761  000863  // Input    : FLOAT  fresult  points to float result register
000762  000864  //          : numstring       a string constant or string variable
000763  000865  //          : that is holds valid floating point number.
000764  000866  // Usage    : var float1[2];
000765  000867  //          : flt_VAL(float1, "1.0594631");
000766  000868  // Notes    : The string argument can be a string constant, a pointer
000767  000869  //          : to a string variable, or a pointer to a data statement.
000768  000870  //          : The string may be a float, or a hex or binary integer value (no decimal point allowed).
000769  000871  //          : For hex or binary, the number is preceeded with 0x or 0b
000770  000872  // Returns  : the pointer to the float result.
000771  000873  //          : carry and overflow are not affected.
000772  000874        
000773  000875        
000774  000876  func flt_ITOF("fresult", "var16"), 1;
000775  000877  // Syntax   : flt_ITOF(resf, intval);
000776  000878  // Input    : FLOAT  fresult  points to float result register
000777  000879  //          : var16           a 16bit signed integer variable or string constant
000778  000880  // Usage    : var float1[2];
000779  000881  //          : var myvar := 30000;
000780  000882  //          : flt_VAL(float1, myvar);
000781  000883  // Notes    : Converts a 16bit signed integer value to a signed floating point number.
000782  000884  // Returns  : the pointer to the float result.
000783  000885        
000784  000886        
000785  000887  func flt_UITOF("fresult", "uvar16"), 1;
000786  000888  // Syntax   : flt_ITOF(resf, intval);
000787  000889  // Input    : FLOAT  fresult  points to float result register
000788  000890  //          : var16           a 16bit integer variable or constant (treated as unsigned)
000789  000891  // Usage    : var float1[2];
000790  000892  //          : var myuvar := 30000;
000791  000893  //          : flt_UITOF(float1, myuvar);
000792  000894  // Notes    : Converts a 16bit unsigned integer value to a positive floating point number.
000793  000895  // Returns  : the pointer to the float result.
000794  000896        
000795  000897  func flt_LTOF("fresult", "var32"), 1;
000796  000898  // Syntax   : flt_LTOF(resf, var32);
000797  000899  // Input    : FLOAT  fresult  points to float result register
000798  000900  //          : var32           points to a 32bit (long) signed variable or string constant
000799  000901  // Usage    : var float1[2];
000800  000902  //          : var mylong[2];
000801  000903  //          : flt_VAL(float1, mylong);
000802  000904  // Notes    : Converts a 32bit signed integer value to a signed floating point number.
000803  000905  // Returns  : the pointer to the float result.
000804  000906        
000805  000907        
000806  000908  func flt_ULTOF("fresult", "uvar32"), 1;
000807  000909  // Syntax   : flt_ITOF(resf, uvar32);
000808  000910  // Input    : FLOAT  fresult  points to float result register
000809  000911  //          : var32           points to a 32bit (unsigned long) unsigned variable or string constant
000810  000912  // Usage    : var float1[2];
000811  000913  //          : var myulong[2];
000812  000914  //          : flt_VAL(float1, myulong);
000813  000915  // Notes    : Converts a 32bit unsigned integer value to a positive floating point number.
000814  000916  // Returns  : the pointer to the float result.
000815  000917        
000816  000918        
000817  000919  func flt_PRINT("fvalue", "formatstring"), 1;
000818  000920  // Syntax   : flt_PRINT(resf, formatstr);
000819  000921  // Input    : FLOAT  fresult  points to float result register
000820  000922  //          : formatstring    zero, null string, of valid format string
000821  000923  // Usage    : var float1[2];
000822  000924  //          : flt_PRINT(float1, "");
000823  000925  // Notes    : The string argument can be a string constant, a pointer
000824  000926  //          : to a string variable, or a pointer to a data statement.
000825  000927  //          : If it is zero or an empty string, the number is
000826  000928  //          : automatically formatted for the best presentation.
000827  000929  //          : The format string is similar to the C language, but only
000828  000930  //          : a single '%' may be used to print a single variable.
000829  000931  // Returns  : zero if success.
000830  000932        
000831  000933        
000832  000934  func flt_ABS("result", "floatval"), 1;
000833  000935  // Syntax   : flt_ABS(&result, &fval);
000834  000936  // Input    : FLOAT  result   points to float result register
000835  000937  //          : numstring       a string that is a valid number
000836  000938  // Usage    : var float1[2];
000837  000939  //          : flt_VAL(float1, float1); // convert float1 to its ABS value
000838  000940  // Returns  : the pointer to the float result.
000839  000941  //          : carry and overflow are not affected.
000840  000942        
000841  000943        
000842  000944  func flt_ACOS("result", "floatval"), 1;
000843  000945  // Syntax   : flt_ACOS(result, fval);
000844  000946  // Input    : FLOAT  result (in radians) points to float result register
000845  000947  //          : FLOAT  floatval points to the float value to get arccos of
000846  000948  // Usage    : var float1[2];
000847  000949  //          : flt_ACOS(result, float1); // get the arccos of float1
000848  000950  // Notes    : the result is in radians.
000849  000951  // Returns  : the pointer to the float result.
000850  000952  //          : carry and overflow are not affected.
000851  000953        
000852  000954        
000853  000955  func flt_ASIN("result", "floatval"), 1;
000854  000956  // Syntax   : flt_ASIN(result, fval);
000855  000957  // Input    : FLOAT  result (in radians) points to float result register
000856  000958  //          : FLOAT  floatval points to the float value to get arcsin of
000857  000959  // Usage    : var float1[2];
000858  000960  //          : flt_ASIN(result, float1); // get the Arcsin of float1
000859  000961  // Notes    : the result is in radians.
000860  000962  // Returns  : the pointer to the float result.
000861  000963  //          : carry and overflow are not affected.
000862  000964        
000863  000965        
000864  000966  func flt_ATAN("result", "floatval"), 1;
000865  000967  // Syntax   : flt_ATAN(result, fval);
000866  000968  // Input    : FLOAT  result (in radians) points to float result register
000867  000969  //          : FLOAT  floatval points to the float value to get arctan of
000868  000970  // Usage    : var float1[2];
000869  000971  //          : flt_ATAN(result, float1); // get the Arctan of float1
000870  000972  // Notes    : the result is in radians.
000871  000973  // Returns  : the pointer to the float result.
000872  000974  //          : carry and overflow are not affected.
000873  000975        
000874  000976        
000875  000977  func flt_COS("result", "floatval"), 1;
000876  000978  // Syntax   : flt_COS(result, fval);
000877  000979  // Input    : FLOAT  result   points to float result register
000878  000980  //          : FLOAT  floatval (in radians) points to the float value to get Cos of
000879  000981  // Usage    : var float1[2];
000880  000982  //          : flt_COS(result, float1); // get the Cosine of float1
000881  000983  // Notes    : the result is in radians.
000882  000984  // Returns  : the pointer to the float result.
000883  000985  //          : carry and overflow are not affected.
000884  000986        
000885  000987        
000886  000988  func flt_EXP("result", "floatval"), 1;
000887  000989  // Syntax   : flt_EXP(result, fval);
000888  000990  // Input    : FLOAT  result   points to float result register
000889  000991  //          : FLOAT  floatval points to the float value to get Exponent of
000890  000992  // Usage    : var float1[2];
000891  000993  //          : flt_EXP(result, float1); // get the Exponent of float1
000892  000994  // Returns  : the pointer to the float result.
000893  000995  //          : carry and overflow are not affected.
000894  000996        
000895  000997        
000896  000998  func flt_CEIL("result", "floatval"), 1;
000897  000999  // Syntax   : flt_CEIL(result, floatval);
000898  001000  // Input    : FLOAT  floatval points to the float value to integerize up
000899  001001  // Usage    : var float1[2];
000900  001002  //          : n := flt_INT(float1, float1); // round value up to the integer value
000901  001003  // Notes    : Removes fractional part, rounding up correctly.
000902  001004  // Returns  : the pointer to the float result.
000903  001005  //          : carry and overflow are not affected.
000904  001006        
000905  001007        
000906  001008  func flt_FLOOR("result", "floatval"), 1;
000907  001009  // Syntax   : flt_FLOOR(result, floatval);
000908  001010  // Input    : FLOAT  floatval points to the float value to integerize down
000909  001011  // Usage    : var float1[2];
000910  001012  //          : n := flt_INT(float1, float1); // round value down to the integer value
000911  001013  // Notes    : Removes fractional part, rounding down correctly.
000912  001014  // Returns  : the pointer to the float result.
000913  001015  //          : carry and overflow are not affected.
000914  001016        
000915  001017        
000916  001018  func flt_SIN("result", "floatval"), 1;
000917  001019  // Syntax   : flt_SIN(result, fval);
000918  001020  // Input    : FLOAT  result   points to float result register
000919  001021  //          : FLOAT  floatval (in radians) points to the float value to get Sine of
000920  001022  // Usage    : var float1[2];
000921  001023  //          : flt_SIN(result, float1); // get the Sin of float1
000922  001024  // Notes    : the result is in radians.
000923  001025  // Returns  : the pointer to the float result.
000924  001026  //          : carry and overflow are not affected.
000925  001027        
000926  001028        
000927  001029  func flt_LOG("result", "floatval"), 1;
000928  001030  // Syntax   : flt_LOG(&result, &fval);
000929  001031  // Input    : FLOAT  result   points to float result register
000930  001032  //          : FLOAT  floatval points to the float value to get Log of
000931  001033  // Usage    : var float1[2];
000932  001034  //          : flt_LOG(result, float1); // get the natural Log of float1
000933  001035  // Returns  : the pointer to the float result.
000934  001036  //          : carry and overflow are not affected.
000935  001037        
000936  001038        
000937  001039  func flt_SQR("result", "floatval"), 1;
000938  001040  // Syntax   : flt_SQR(result, fval);
000939  001041  // Input    : FLOAT  result   points to float result register
000940  001042  //          : FLOAT  floatval points to the float value to get Log of
000941  001043  // Usage    : var float1[2];
000942  001044  //          : flt_SQR(result, float1); // get the square root of float1
000943  001045  // Returns  : the pointer to the float result, or zero if number was negative.
000944  001046  //          : carry and overflow are not affected.
000945  001047        
000946  001048        
000947  001049  func flt_TAN("result", "floatval"), 1;
000948  001050  // Syntax   : flt_TAN(result, fval);
000949  001051  // Input    : FLOAT  result   points to float result register
000950  001052  //          : FLOAT  floatval (in radians) points to the float value to get Tangent of
000951  001053  // Usage    : var float1[2];
000952  001054  //          : flt_TAN(result, float1); // get the Tangent of float1
000953  001055  // Returns  : the pointer to the float result.
000954  001056  //          : carry and overflow are not affected.
000955  001057        
000956  001058        
000957  001059  func flt_POW("result", "floatx", "floaty"), 1;
000958  001060  // Syntax   : flt_POW(result, fval1, fval2);
000959  001061  // Input    : FLOAT  result   points to float result register
000960  001062  //          : FLOAT  floatx   points to the float value to raise
000961  001063  //          : FLOAT  floaty   points to the float value for power
000962  001064  // Usage    : flt_POW(result, floatx, floaty); // raise x to power y
000963  001065  // Returns  : the pointer to the float result, or zero if error occurs.
000964  001066  //          : carry and overflow are not affected.
000965  001067        
000966  001068        
000967  001069  func flt_ADD("result", "floatA", "floatB"), 1;
000968  001070  // Syntax   : flt_ADD(result, floatA, floatB);
000969  001071  // Input    : FLOAT  result   points to float result register
000970  001072  //          : FLOAT  floatval points to the float value A
000971  001073  //          : FLOAT  floatval points to the float value B
000972  001074  // Usage    : flt_ADD(result, floatx, floaty); // add B to A
000973  001075  // Returns  : the pointer to the float result, or zero if error occurs.
000974  001076  //          : carry and overflow are not affected.
000975  001077        
000976  001078        
000977  001079  func flt_SUB("&result", "&floatA", "&floatB"), 1;
000978  001080  // Syntax   : flt_SUB(result, floatA, floatB);
000979  001081  // Input    : FLOAT  result   points to float result register
000980  001082  //          : FLOAT  floatval points to the float value A
000981  001083  //          : FLOAT  floatval points to the float value B
000982  001084  // Usage    : flt_SUB(&result, &floatx, &floaty); // subtract B from A
000983  001085  // Returns  : the pointer to the float result, or zero if error occurs.
000984  001086  //          : carry and overflow are not affected.
000985  001087        
000986  001088        
000987  001089  func flt_MUL("result", "floatA", "floatB"), 1;
000988  001090  // Syntax   : flt_MUL(result, floatA, floatB);
000989  001091  // Input    : FLOAT  result   points to float result register
000990  001092  //          : FLOAT  floatval points to the float value A
000991  001093  //          : FLOAT  floatval points to the float value B
000992  001094  // Usage    : flt_MUL(result, floatA, floatB); // multiply A by B
000993  001095  // Returns  : the pointer to the float result, or zero if error occurs.
000994  001096  //          : carry and overflow are not affected.
000995  001097        
000996  001098        
000997  001099  func flt_DIV("result", "floatA", "floatB"), 1;
000998  001100  // Syntax   : flt_DIV(result, floatA, floatB);
000999  001101  // Input    : FLOAT  result   points to float result register
001000  001102  //          : FLOAT  floatval points to the float value A
001001  001103  //          : FLOAT  floatval points to the float value B
001002  001104  // Usage    : flt_DIV(result, floatA, floatB); // divide A by B
001003  001105  // Returns  : the pointer to the float result, or zero if error occurs.
001004  001106  //          : carry and overflow are not affected.
001005  001107        
001006  001108        
001007  001109  //------------------------------------------------------------------//
001008  001110  // The following float functions all return integer values.
001009  001111  //------------------------------------------------------------------//
001010  001112  func flt_EQ("floatA", "floatB"), 1;
001011  001113  // Syntax   : flt_EQ(floatA, floatB);
001012  001114  // Input    : FLOAT  floatval points to the float value A
001013  001115  //          : FLOAT  floatval points to the float value B
001014  001116  // Usage    : if (flt_EQ(floatA, floatB)) // compare A to B, true if A == B
001015  001117  // Returns  : True if numbers are equal, false otherwise.
001016  001118        
001017  001119        
001018  001120  func flt_NE("floatA", "floatB"), 1;
001019  001121  // Syntax   : flt_NE(floatA, floatB);
001020  001122  // Input    : FLOAT  floatval points to the float value A
001021  001123  //          : FLOAT  floatval points to the float value B
001022  001124  // Usage    : if (flt_NE(floatA, floatB)) // compare A to B, true if A != B
001023  001125  // Returns  : True if numbers are not equal, false otherwise.
001024  001126        
001025  001127        
001026  001128        
001027  001129  func flt_GT("floatA", "floatB"), 1;
001028  001130  // Syntax   : flt_GT(floatA, floatB);
001029  001131  // Input    : FLOAT  floatval points to the float value A
001030  001132  //          : FLOAT  floatval points to the float value B
001031  001133  // Usage    : if (flt_GT(floatA, floatB)) // compare A to B, true if A > B
001032  001134  // Returns  : True if A > B, false otherwise.
001033  001135        
001034  001136        
001035  001137  func flt_GE("floatA", "floatB"), 1;
001036  001138  // Syntax   : flt_GE(floatA, floatB);
001037  001139  // Input    : FLOAT  floatval points to the float value A
001038  001140  //          : FLOAT  floatval points to the float value B
001039  001141  // Usage    : if (flt_GE(floatA, floatB)) // compare A to B, true if A >= B
001040  001142  // Returns  : True if A >= B, false otherwise.
001041  001143        
001042  001144        
001043  001145  func flt_LT("floatA", "floatB"), 1;
001044  001146  // Syntax   : flt_LT(floatA, floatB);
001045  001147  // Input    : FLOAT  floatval points to the float value A
001046  001148  //          : FLOAT  floatval points to the float value B
001047  001149  // Usage    : if (flt_LT(floatA, floatB)) // compare A to B, true if A < B
001048  001150  // Returns  : True if A < B, false otherwise.
001049  001151        
001050  001152        
001051  001153  func flt_LE("floatA", "floatB"), 1;
001052  001154  // Syntax   : flt_LE(floatA, floatB);
001053  001155  // Input    : FLOAT  floatval points to the float value A
001054  001156  //          : FLOAT  floatval points to the float value B
001055  001157  // Usage    : if (flt_LE(floatA, floatB )) // compare A to B, true if A <= B
001056  001158  // Returns  : True if A <= B, false otherwise.
001057  001159        
001058  001160        
001059  001161  func flt_SGN("floatval"), 1;
001060  001162  // Syntax   : flt_SGN(fval);
001061  001163  // Input    : FLOAT  floatval   points to the float value examine sign
001062  001164  // Usage    : var float1[2];
001063  001165  //          : n := flt_SGN(float1); // return -1 if float number negative
001064  001166  // Notes    : returns 0 if sign is positive or zero.
001065  001167  // Returns  : returns 16bit integer -1 if float sign is negative, or zero if positive.
001066  001168  //          : carry and overflow are not affected.
001067  001169        
001068  001170        
001069  001171  func flt_FTOI("floatvar"), 1;
001070  001172  // Syntax   : flt_FTOI(myfloat);
001071  001173  // Input    : FLOAT  fresult  points to float result register
001072  001174  // Usage    : var float1[2];
001073  001175  //          : myvar := flt_VAL(&float1, myvar);
001074  001176  // Notes    : Converts a floating point number to a 16bit integer.
001075  001177  //          : The floating point number is rounded up or down accordingly.
001076  001178  // Returns  : the integer value of the float.
001077  001179        
001078  001180  func flt_PRINTxy("xpos", "ypos", "fvalue", "formatstring"), 1;
001079  001181  // Syntax   : flt_PRINT(x, y, resf, formatstr);
001080  001182  // Input    : FLOAT  fresult  points to float result register
001081  001183  //          : formatstring    zero, null string, of valid format string
001082  001184  // Usage    : var float1[2];
001083  001185  //          : flt_PRINT(float1, "");
001084  001186  // Notes    : The string argument can be a string constant, a pointer
001085  001187  //          : to a string variable, or a pointer to a data statement.
001086  001188  //          : If it is zero or an empty string, the number is
001087  001189  //          : automatically formatted for the best presentation.
001088  001190  //          : The format string is similar to the C language, but only
001089  001191  //          : a single '%' may be used to print a single variable.
001090  001192  // Returns  : zero if success.
001091  001193        
001092  001194  func __reserved9(), 0; // do not remove
001093  001195  func __reserved10(), 0; // do not remove
001094  001196        
001095  001197  //------------------------------------------------------------------//
001096  001198  //------------------------------------------------------------------//
001097  001199  //------------------------------------------------------------------//
001098  001200  //------------------------------------------------------------------//
001099  001201  //------------------------------------------------------------------//
001100  001202  func pin_Set("mode", "pin"), 1;            // set pin to required mode
001101  001203  // Syntax: pin_Set(mode, pin);
001102  001204  // Usage : pin_Set(PIN_OUT,);
001103  001205  // Notes : Sets the selected pin to the desired mode. Refer to the manual
001104  001206  //       : for pin function compatitblilites.
001105  001207  //       : returns true if the pin number and mode is legal (usually ignored)
001106  001208  //       :    available pin modes
001107  001209  //       :    PIN_INP                 0        // pin is input, no pullup or pulldown
001108  001210  //       :    PIN_INP_HI              1        // pin is input with pullup to Vcc
001109  001211  //       :    PIN_INP_LO              2        // pin is input with pulldown to Gnd
001110  001212  //       :    PIN_OUT                 3        // pin is output
001111  001213  //       :    PIN_OUT_OD              4        // pin is output with open drain
001112  001214  //       :    PIN_AN                  5        // pin is analogue (PA0 to PA3 only)
001113  001215  //       :    PIN_ANAVG               6        // pin is analogue (PA0 to PA3 only), averaged - 16 samples
001114  001216  //       :
001115  001217        
001116  001218  func pin_HI("pin"), 1;                    // set pin to logic '1'
001117  001219  // Syntax: pin_HI(pin);
001118  001220  // Usage : pin_HI(PA4);        // make PA4 HI level
001119  001221  // Notes : Outputs a logic "High" to the pin latch
001120  001222  //       : The pin is automatically made an output.
001121  001223  //       : pullup, pulldown, and change notification will be disable for the selected pin.
001122  001224  //       : returns true if the pin number is legal (usually ignored)
001123  001225  //       :
001124  001226        
001125  001227  func pin_LO("pin"), 1;                    // set pin to logic '0'
001126  001228  // Syntax: pin_LO(pin);
001127  001229  // Usage : pin_LO(PA3);
001128  001230  // Notes : Outputs a logic "Low" to the pin latch
001129  001231  //       : The pin is automatically made an output.
001130  001232  //       : pullup, pulldown, and change notification will be disable for the selected pins.
001131  001233  //       : returns true if the pin number is legal (usually ignored)
001132  001234  //       :
001133  001235        
001134  001236  func pin_Val("pin", "value"), 0;                    // set pin to to state of variable
001135  001237  // Syntax: pin_Var(pin, value);
001136  001238  // Usage : pin_Var(IO3, myvar);
001137  001239  // Notes : Outputs a logic state on a pin depending on the value of bit 0 of a variable
001138  001240  //       : The pin is automatically made an output.
001139  001241  //       : pullup, pulldown, and change notification will be disable for the selected pins.
001140  001242  //       : returns true if the pin number is legal (usually ignored)
001141  001243        
001142  001244  func pin_Read("pin"), 1;                // read pin, logic or analogue
001143  001245  // Syntax: pin_Read(PA0);
001144  001246  // Usage : arg1 := pin_Read(arg2);
001145  001247  // Notes : Read a pin in various ways. If the pin is
001146  001248  //       : set to an input, read the state of the input pin.
001147  001249  //       : If set to an output, read the state of the output latch.
001148  001250  //       : If set to analogue, read the 12 bit analogue value.
001149  001251        
001150  001252  func bus_Read(), 1;
001151  001253  // Syntax: bus_Read();
001152  001254  // Usage : arg1 := pin_ReadBus();
001153  001255  // Notes : Read the 16 bit port regardless of pin configurations.
001154  001256  //       : If a pin is configured as input or analogue, the pin is read directly as
001155  001257  //       : if it were a digital input. If a pin is configured as an output, the pin
001156  001258  //       : is also read directly, giving the output latch state.
001157  001259  //       : Bit 0 coresponds to PA0 through to bit15 which coresponds to PA15
001158  001260  //       : (Refer to 'port bit position masks')
001159  001261  //Returns: Returns the 16 bit value of the bus.
001160  001262        
001161  001263  func bus_SetPins("value"), 0;
001162  001264  // Syntax: bus_SetPins(value);
001163  001265  // Usage : arg1 := bus_SetPins(15); // set PA0 to PA3 to output bits, making them HI
001164  001266  // Notes : Any '1' bits in "value" set the coresponding port pin to an output
001165  001267  //       : and forces its state to a '1'. The state of its previous open drain
001166  001268  //       : configuration is not altered. Any zero bits in "value" will not affect the pin.
001167  001269  //       : pullup, pulldown, and change notification will be disable for the selected pins.
001168  001270  //       : Bit 0 coresponds to PA0 through to bit13 which coresponds to PA13
001169  001271        
001170  001272  func bus_ClearPins("value"), 0;
001171  001273  // Syntax: bus_ClearPins(value);
001172  001274  // Usage : bus_ClearPins(0x03F0); // set PA0 to PA5 to output bits, making them LO
001173  001275  // Notes : Any '1' bits in "value" set the coresponding port pin to an output
001174  001276  //       : and forces its state to a '0. The state of its previous open drain
001175  001277  //       : configuration is not altered. Any zero bits in "value" will not affect the pin.
001176  001278  //       : pullup, pulldown, and change notification will be disable for the selected pins.
001177  001279  //       : Bit 0 coresponds to PA0 through to bit13 which coresponds to PA13
001178  001280        
001179  001281  func bus_SetChangeInterrupt("function", "portmask"), 1;
001180  001282  // Syntax: bus_SetChangeInterrupt(value);
001181  001283  // Usage : bus_SetChangeInterrupt(scanKeypad, 0x00F0); // set PA4 to PA7 to interrupt on change
001182  001284  // Notes : Any '1' bits in "portmask" marks that pin to generate an interrupt on change.
001183  001285  //       : A level change on that pin will cause "function" to be executed. If "function" is
001184  001286  //       : zero, the display may be put into sleep mode, and any change will cause a wakeup reset.
001185  001287  //       : Wakeup will always re-start code running in FLASHBANK_0
001186  001288  //       : Bit 0 coresponds to PA0 through to bit15 which coresponds to PA15
001187  001289  //       : (Refer to 'port bit position masks')
001188  001290  //       : Once armed, "function" will only be executed once, it is necessary to
001189  001291  //       : re-arm for any further events.
001190  001292  //Returns: Return the current state of the pins that are selected in "portmask"
001191  001293  //       : This can be saved and later used in "function" to see which pin(s) actually changed.
001192  001294        
001193  001295  func bus_Write8("var"), 0;
001194  001296  // Syntax: bus_Write8(var);
001195  001297  // Usage : bus_Write8(arg1);
001196  001298  // Notes : The lower 8 bits of arg1 are placed on the BUS, then, after
001197  001299  //       : a settling delay of approx 50nsec, the BUS_WR(PA2) pin is strobed
001198  001300  //       : LO for approx 50nsec then set back HI.
001199  001301  //       : The upper 8 bits of arg1 are ignored.
001200  001302  //       : NB:- the BUS_WR(PA2) pin must be preset to the desired output state
001201  001303  //       : as must the bus pins to ensure BUS write integrity.
001202  001304  //       :
001203  001305  //       : BUS_0 is PA4
001204  001306  //       : BUS_1 is PA5
001205  001307  //       : BUS_2 is PA6
001206  001308  //       : BUS_3 is PA7
001207  001309  //       : BUS_4 is PA8
001208  001310  //       : BUS_5 is PA9
001209  001311  //       : BUS_6 is PA10
001210  001312  //       : BUS_7 is PA11
001211  001313        
001212  001314  func bus_Read8(), 1;
001213  001315  // Syntax: bus_Read();
001214  001316  // Usage : arg1 := bus_Read8();
001215  001317  // Notes : The BUS_RD(PA3) pin set to LO, then, after a settling delay
001216  001318  //       : of approx 50nsec, the BUS is read into the lower 8 bits of arg
001217  001319  //       : (the upper 8 bits being set to 0)
001218  001320  //       : the BUS_RD(PA3) pin is then set back to a HI level.
001219  001321  //       : NB:- the BUS_RD(PA3) pin must be preset to the desired output state
001220  001322  //       : as must the bus pins to ensure BUS read integrity.
001221  001323  //       :
001222  001324  //       : BUS_0 is PA4
001223  001325  //       : BUS_1 is PA5
001224  001326  //       : BUS_2 is PA6
001225  001327  //       : BUS_3 is PA7
001226  001328  //       : BUS_4 is PA8
001227  001329  //       : BUS_5 is PA9
001228  001330  //       : BUS_6 is PA10
001229  001331  //       : BUS_7 is PA11
001230  001332        
001231  001333  func __reserved13(), 0; // do not remove
001232  001334  func __reserved14(), 0; // do not remove
001233  001335  //------------------------------------------------------------------//
001234  001336  // Pin related constants                                            //
001235  001337  //------------------------------------------------------------------//
001236  001338        
001237  001339  // pin_Set(...) pin modes
001238  001340  #CONST
001239  001348  #END
001240  001349        
001241  001350        
001242  001351  // pin name             constant    connector H1 I/O Pin referencesnumbers
001243  001352  #CONST
001244  001372  #END
001245  001373        
001246  001374  // bit position masks
001247  001375  #CONST
001248  001392  #END
001249  001393        
001250  001394        
001251  001395        
001252  001396  //------------------------------------------------------------------//
001253  001397  //   Graphics Functions
001254  001398  //------------------------------------------------------------------//
001255  001399  func gfx_Set("mode", "value"), 0;            // set various graphics functions
001256  001400  // Syntax: gfx_Set(mode, value);
001257  001401  // Usage : gfx_Set(arg1, arg2);
001258  001402  // Notes : Sets various graphics parameters used by other functions
001259  001403  //       : This allows the features to be set programatically with a
001260  001404  //       : single function call.It is strongly recommended to use the
001261  001405  //       : pre-defined constants rather than the mode numbers.
001262  001406  //       : NB:- Although it is often required to be able to set graphics
001263  001407  //       : functions with a single function call for graphics engine
001264  001408  //       : related functions, there is a complete set of single parameter
001265  001409  //       : shortcut functions that have exactly the same function as
001266  001410  //       : each of the gfx_Set modes and saves 1 parameter / uses less memory
001267  001411  //       :
001268  001412  //       : mode = PEN_SIZE (mode 16)
001269  001413  //       : gfx_Set(PEN_SIZE, value);
001270  001414  //       : value = SOLID (value 0) rectangle and circle objects are solid
001271  001415  //       : value = OUTLINE (value 1) rectangle and circle objects are outlines
001272  001416  //       : Sets the mode of the Pen used by most graphics objects
001273  001417  //       :
001274  001418  //       : mode = BACKGROUND_COLOUR (mode 17)
001275  001419  //       : gfx_Set(BACKGROUND_COLOUR, value);
001276  001420  //       : value = 0 to 0xFFFF, Black to White
001277  001421  //       : Sets the Background colour of the screen
001278  001422  //       :
001279  001423  //       : mode = OBJECT_COLOUR (mode 18)
001280  001424  //       : gfx_Set(OBJECT_COLOUR, value);
001281  001425  //       : value = 0 to 0xFFFF, Black to White
001282  001426  //       : Sets the Object colour used in various functions
001283  001427  //       : LineTo(,,); LineRel(,,); BoxTo(,,); Dot(); etc.
001284  001428  //       :
001285  001429  //       : mode = CLIPPING (mode 19)
001286  001430  //       : gfx_Set(CLIPPING, value);
001287  001431  //       : value = OFF (value 0) Clipping disabled
001288  001432  //       : value = ON (value 1) Clipping enabled
001289  001433  //       : Enables/Disables the Clipping feature
001290  001434  //       :
001291  001435  //       : mode = TRANSPARENT_COLOUR (mode 20) : Image or Animation Transparency Colour.
001292  001436  //       : gfx_Set(TRANSPARENT_COLOUR, value);
001293  001437  //       : value = 0 to 0xFFFF Black to White
001294  001438  //       : Sets Bitmap, Image or Animation Transparency Colour.
001295  001439  //       : NB not implemented
001296  001440  //       :
001297  001441  //       : mode = TRANSPARENCY (mode 21) : Bitmap/Image/Animation Transparency
001298  001442  //       : gfx_Set(5, value);
001299  001443  //       : value = OFF (value 0) Transparency disabled
001300  001444  //       : value = ON (value 1) Transparency enabled
001301  001445  //       : Enables/Disables the Transparency feature
001302  001446  //       : NB not implemented
001303  001447  //       :
001304  001448  //       : mode = FRAME_DELAY (mode 22) : Inter-Frame Delay
001305  001449  //       : gfx_Set(FRAME_DELAY, value);
001306  001450  //       : value = 0 to 65535 ms
001307  001451  //       : Sets the Video/Animation clip inter-frame delay. This setting will
001308  001452  //       : over-ride the embedded frame delay of the clip. After the event,
001309  001453  //       : the setting will auto disable and if further inter-frame delays need
001310  001454  //       : overriding the setting must be re-issued.
001311  001455  //       :
001312  001456  //       : mode = SCREEN_MODE (mode 23) : Set required screen behaviour
001313  001457  //       : gfx_Set(SCREEN_MODE, value);
001314  001458  //       : value = LANDSCAPE   (value 0)
001315  001459  //       : value = LANDSCAPE_R (value 1)
001316  001460  //       : value = PORTRAIT    (value 2)
001317  001461  //       : value = PORTRAIT_R  (value 3)
001318  001462  //       :
001319  001463  //       : mode = OUTLINE_COLOUR (mode 24) : Outline Colour
001320  001464  //       : gfx_Set(OUTLINE_COLOUR, value);
001321  001465  //       : value = 1 to 0xFFFF, if 0, featre is OFF
001322  001466  //       : Sets the filled Rectangle or Circle objects outline colour
001323  001467  //       : If outline colour, is 0, OUTLINE_COLOUR feature is disabled
001324  001468  //       : gfx_Set(OUTLINE_COLOUR, OFF); may be used for this
001325  001469  //       :
001326  001470  //       : Only supports variable contrast for uOLED Modules
001327  001471  //       : mode = CONTRAST (mode 25) : Contrast
001328  001472  //       : gfx_Set(CONTRAST, value);
001329  001473  //       : value = 0 to 9, 0=off, 1=lowest, 8=highest contrast
001330  001474  //       : when contrast=0, display is placed in low power mode.
001331  001475  //       : This function should be called with contrast=0 when
001332  001476  //       : powering down the module.
001333  001477  //       :
001334  001478  //       : mode = LINE_PATTERN (mode 26) : Line Pattern
001335  001479  //       : gfx_Set(LINE_PATTERN, value);
001336  001480  //       : gfx_Set(LINE_PATTERN, 0b1111000011110000); // draw dotted line
001337  001481  //       : gfx_Set(LINE_PATTERN, OFF); // line patterning OFF
001338  001482  //       : a value of 0 turns the feature off
001339  001483  //       :
001340  001484  //       : mode = COLOUR_MODE (mode 27) : 8/16 bit colour mode
001341  001485  //       : gfx_Set(COLOUR_MODE , COLOUR16);   // set 16bit colour mode
001342  001486  //       : gfx_Set(COLOUR_MODE , COLOUR8);   // set 8bit colour mode
001343  001487  //       : NB not implemented, default is COLOUR16
001344  001488  //       :
001345  001489  //       : mode = BEVEL_WIDTH (mode 28) : set button and slider bevel width
001346  001490  //       : gfx_Set(BEVEL_WIDTH , 5);   // set bevel lines to 5 pixels wide
001347  001491  //       : sets the button and slider objects bevel width
001348  001492  //       :
001349  001493  //       : mode = BEVEL_SHADOW (mode 29) : set bevel shadowing depth for buttons and sliders
001350  001494  //       : gfx_Set(BEVEL_SHADOW , 5);
001351  001495  //       : sets the button and slider objects darken and lighten depth for the bevel colour
001352  001496  //       :
001353  001497  //       : mode = X_ORIGIN (mode 29) : set x offset for screen
001354  001498  //       : gfx_Set(X_ORIGIN , 25);  // object are offset 25 pixels from LHS
001355  001499  //       : sets the origin of drawn objects to a position other than 0,0
001356  001500  //       :
001357  001501  //       : mode = Y_ORIGIN (mode 29) : set y offset for screen
001358  001502  //       : gfx_Set(Y_ORIGIN , 30);  // object are offset 30 pixels from TOP
001359  001503  //       : sets the origin of drawn objects to a position other than 0,0
001360  001504        
001361  001505  //------------------------------------------------------------------------------
001362  001506  //gfx_Set() related constants
001363  001507  //------------------------------------------------------------------------------
001364  001508  #CONST
001365  001525  #END
001366  001526        
001367  001527        
001368  001528  func gfx_Cls(), 0;                    // clear the screen
001369  001529  // Syntax: gfx_Cls();
001370  001530  // Usage : gfx_Cls();
001371  001531  // Notes : Clears the screen with current background colour
001372  001532        
001373  001533  func gfx_MoveTo("x", "y"), 0;                // set glb_X1 and glb_Y1 to required co-ordinate
001374  001534  // Syntax: gfx_MoveTo(x, y);
001375  001535  // Usage : gfx_MoveTo(arg1, arg2);
001376  001536  // Notes : Moves the origin to a new x,y position
001377  001537        
001378  001538  func gfx_MoveRel("x", "y"), 0;                // set glb_X1 and glb_Y1 to new relative offset
001379  001539  // Syntax: gfx_MoveRel(x, y);
001380  001540  // Usage : gfx_MoveRel(arg1, arg2);
001381  001541  // Notes : Moves the origin to a new x,y position
001382  001542  //       : relative to the current origing
001383  001543        
001384  001544  func gfx_LineTo("x1", "y1"), 0;                     // draw line from current origin to new point
001385  001545  // Syntax: gfx_LineTo(x1, y1);
001386  001546  // Usage : gfx_LineTo(arg1, arg2);
001387  001547  // Notes : Draws a Line from the origin x,y to x1,y1.
001388  001548  //       : The new origin is then set to x1, y1. Line colour needs
001389  001549  //       : to be preset with "Set Object colour" using gfx_Set(mode=2, colour);
001390  001550        
001391  001551  func gfx_LineRel("x1", "y1"), 0;                    // draw line from current origin to new relative offset
001392  001552  // Syntax: gfx_LineRel(x1, y1);
001393  001553  // Usage : gfx_LineRel(arg1, arg2);
001394  001554  // Notes : Draws a Line from the origin x,y to x1,y1.
001395  001555  //       : Unlike gfx_MoveTo() the origin is not updated with x1, y1. Line colour needs
001396  001556  //       : to be preset with "Set Object colour" using gfx_Set(OBJECT_COLOUR, colour);
001397  001557        
001398  001558  func gfx_Line("x1", "y1", "x2", "y2", "colr"), 0;   // draw line, can be patterned
001399  001559  // Syntax: gfx_Line(x1, x2, y2, colr);
001400  001560  // Usage : gfx_Line(arg1, arg2, arg3, arg4, arg5);
001401  001561  // Notes : Plots a coloured Line from x1,y1 to x2,y2 on the screen
001402  001562        
001403  001563  func gfx_Hline("y", "x1", "x2", "colr"), 1;         // draw Hline, can be patterned
001404  001564  // Syntax: gfx_Line(x1, x2, y, colr);
001405  001565  // Usage : gfx_Line(arg1, arg2, arg3, arg4);
001406  001566  // Notes : Plots a coloured Horizontal line from x1,y to x2,y on the screen
001407  001567        
001408  001568  func gfx_Vline("x", "y1", "y2", "colr"), 1;         // draw Vline, can be patterned
001409  001569  // Syntax: gfx_Line(y1, y2, x, colr);
001410  001570  // Usage : gfx_Line(arg1, arg2, arg3, arg4);
001411  001571  // Notes : Plots a coloured Vertical line from x,y1 to x,y2 on the screen
001412  001572        
001413  001573  func gfx_Rectangle("x1" ,"y1", "x2", "y2", "colr"), 0;    // draw open rectangle,line can be patterned
001414  001574  // Syntax: gfx_Rectangle(x1, y1, x2, y2, colr);
001415  001575  // Usage : gfx_Rectangle(arg1, arg2, arg3, arg4, arg5);
001416  001576  // Notes : Plots a coloured Outline Rectangle from top corner (x1,y1) to
001417  001577  //       : bottom corner (x2,y2) on the screen.
001418  001578        
001419  001579  func gfx_RectangleFilled("x1","y1","x2","y2","colr"), 0;    // draw filled rectangle
001420  001580  // Syntax: gfx_Rectangle(x1, y1, x2, y2, colour);
001421  001581  // Usage : gfx_Rectangle(arg1, arg2, arg3, arg4, arg5);
001422  001582  // Notes : Plots a coloured Solid Rectangle from top corner (x1,y1) to
001423  001583  //       : bottom corner (x2,y2) on the screen.
001424  001584        
001425  001585  func gfx_Circle("x", "y", "rad", "colr"), 0;        // draw open circle
001426  001586  // Syntax: gfx_Circle(x, y, rad, colr);
001427  001587  // Usage : gfx_Circle(arg1, arg2, arg3, arg4);
001428  001588  // Notes : Plots a coloured outline Circle on the screen at centre x,y with radius = rad
001429  001589        
001430  001590  func gfx_CircleFilled("x", "y", "rad", "colr"), 0;    // draw filled circle
001431  001591  // Syntax: gfx_Circle(x, y, rad, colr);
001432  001592  // Usage : gfx_Circle(arg1, arg2, arg3, arg4);
001433  001593  // Notes : Plots a coloured Solid Circle on the screen at centre x,y with radius = rad
001434  001594        
001435  001595  func gfx_PutPixel("x", "y", "colr"), 0;            // set point at x y
001436  001596  // Syntax: gfx_PutPixel(x, y, colr);
001437  001597  // Usage : gfx_PutPixel(arg1, arg2, arg3);
001438  001598  // Notes : Plots a coloured pixel on the screen at x,y location
001439  001599        
001440  001600  func gfx_GetPixel("x", "y"), 1;                // read colour at point x y
001441  001601  // Syntax: gfx_GetPixel(x, y);
001442  001602  // Usage : var := gfx_GetPixel(arg1, arg2);
001443  001603  // Notes : Reads and returns the colour value of a pixel at location x,y
001444  001604        
001445  001605  func gfx_Triangle("x1","y1","x2","y2","x3","y3","colr"), 0; // draw an open triangle
001446  001606  // Syntax: gfx_Triangle(x1, y1, x2, y2, x3, y3, colr);
001447  001607  // Usage : gfx_Triangle(arg1, arg2, arg3, arg4, arg5, arg6, arg7);
001448  001608  // Notes : Plots a coloured outline Triangle from between 3 vertices: x1,y1 x2,y2 x3,y3
001449  001609  //       : Vertices must be specified in an anti-clockwise fashion
001450  001610        
001451  001611  func gfx_OrbitInit("&x_orb", "&y_orb"), 0;        // set result holders for orbit command
001452  001612  // Syntax: gfx_OrbitInit(&x_orb, &y_orb);
001453  001613  // Usage : gfx_OrbitInit(&arg1, &arg2);
001454  001614  // Notes : Sets up the Orbit function parameters.
001455  001615  //       : &x_orb, &y_orb: calcualted Orbit coordiantes. These are pointers to local
001456  001616  //       : variables that get updated after calling gfx_Orbit(,,) function.
001457  001617  //       : The coordiantaes are calculated relative to the origin
001458  001618  //       : obtained by using the gfx_MoveTo(x, y) function.
001459  001619        
001460  001620  func gfx_Orbit("angle", "distance"), 0;            // calculate point at angle, distance
001461  001621  // Syntax: gfx_Orbit(angle, distance);
001462  001622  // Usage : gfx_Orbit(arg1, arg2);
001463  001623  // Notes : The Orbit function calcualtes the x, y coordinates of a distant point whose
001464  001624  //       : only known parameters are the angle and the distance from the current origin.
001465  001625        
001466  001626  func gfx_Polyline("n", "&vx", "&vy", "colr"), 0;    // draw a polyline from a table of vertices
001467  001627  // Syntax: gfx_Polyline(numbVertices, &vertices_x, &vertices_y, colour);
001468  001628  // Usage : gfx_Polyline(arg1, x[array], y[array], arg2);
001469  001629  // Notes : This function is very similar to the Ploygon function
001470  001630  //       : with the exception of the 1st and the last vertices not joined.
001471  001631        
001472  001632  func gfx_Polygon("n", "&vx", "&vy", "colr"), 0;        // draw a polygon from a table of vertices
001473  001633  // Syntax: gfx_Polygon(numbVertices, &vx, &y, colour);
001474  001634  // Usage : gfx_Polygon(arg1, x[array], y[array], arg2);
001475  001635  // Notes : Plots a coloured outline Polygon between specified vertices: x1,y1 x2,y2 .. xn,yn
001476  001636  //       : Vertices must be minimum of 3 and can be specified in any fashion
001477  001637        
001478  001638  func gfx_Dot(), 0;                    // set point at glb_X glb_Y, default colour
001479  001639  // Syntax: gfx_Dot();
001480  001640  // Usage : gfx_Dot();
001481  001641  // Notes : Places a coloured dot at the origin
001482  001642        
001483  001643        
001484  001644  func gfx_Bullet("r"), 0;                // draw circle at glb_X glb_Y, default colour
001485  001645  // Syntax: gfx_Bullet();
001486  001646  // Usage : gfx_Bullet();
001487  001647  // Notes : Places a coloured circle at the origin
001488  001648  //       : filled or unfilled state is controlled by PenSize
001489  001649        
001490  001650  func gfx_IncX(), 1;                    // increment global origin glb_X, returning new value
001491  001651  // Syntax: gfx_IncX();
001492  001652  // Usage : var := gfx_IncX();
001493  001653  // Notes : Increments the x coordinate of the origin
001494  001654        
001495  001655  func gfx_IncY(), 1;                    // increment global origin glb_Y, returning new value
001496  001656  // Syntax: gfx_IncY();
001497  001657  // Usage : var := gfx_IncY();
001498  001658  // Notes : Increments the y coordinate of the origin
001499  001659        
001500  001660  func gfx_BoxTo("x1", "y1"), 0;                // draw rectangle from current origin to x1 y1
001501  001661  // Syntax: gfx_BoxTo(x1, y1);
001502  001662  // Usage : gfx_BoxTo(arg1, arg2);
001503  001663  // Notes : Draws a Rectangle from the origin x,y to x1,y1.
001504  001664  //       : The new origin is then set to x1,y1. Rectangle colour needs
001505  001665  //       : to be preset with "Set Object colour" using gfx_Set(mode=2, colour);
001506  001666  //       : and the PenSize setting determines if Box is solid or outline.
001507  001667        
001508  001668  func gfx_ClipWindow("x1" ,"y1", "x2", "y2"), 0;         // set the cipping area
001509  001669  // Syntax: gfx_ClipWindow(x1, y1, x2, y2);
001510  001670  // Usage : gfx_ClipWindow(arg1, arg2, arg3, arg4);
001511  001671  // Notes : Specifies a clipping window region on the screen such that any objects
001512  001672  //       : and text placed onto the screen will be clipped and displayed only
001513  001673  //       : within that region. For the clipping window to take effect, "Clipping"
001514  001674  //       : must be enabled seperately using the gfx_Set(CLIPPING, ON) command.
001515  001675        
001516  001676        
001517  001677  func gfx_ChangeColour("oldcolr", "newcolr"), 0;         // change pixel colour in clipping area
001518  001678  // Syntax: gfx_ChangeColour(oldcolr, newcolr);
001519  001679  // Usage : gfx_ChangeColour(0xFF00, 0XFFFF);
001520  001680  // *Notes:
001521  001681        
001522  001682  func gfx_SetClipRegion(), 0;                            // set clipping area to the most recent extents
001523  001683  // Syntax: gfx_SetClipRegion();
001524  001684  // Usage : var := gfx_SetClipRegion();
001525  001685  // *Notes:
001526  001686        
001527  001687  func gfx_Ellipse("x", "y", "xrad", "yrad", "colour"), 0;
001528  001688  // Syntax: gfx_Ellipse(x, y, xrad, yrad, colour);
001529  001689  // Usage : gfx_Ellipse(arg1, arg2, arg3, arg4, arg5);
001530  001690  // Notes : Plots a coloured Ellipse on the screen at centre x,y
001531  001691  //       : with xradius = xrad and yradius = yrad.
001532  001692  //       : if PenSize = 0 Ellipse is Solid
001533  001693  //       : if PenSize = 1 Ellipse is Outline
001534  001694        
001535  001695        
001536  001696  func gfx_EllipseFilled("x", "y", "xrad", "yrad", "colour"), 0;
001537  001697  // Syntax: gfx_EllipseFilled(x, y, xrad, yrad, colour);
001538  001698  // Usage : gfx_EllipseFilled(arg1, arg2, arg3, arg4, arg5);
001539  001699  // Notes : Plots a coloured Ellipse on the screen at centre x,y
001540  001700  //       : with xradius = xrad and yradius = yrad.
001541  001701        
001542  001702        
001543  001703  func gfx_Button("state", "x", "y", "buttonColour", "textColour", "font", "textWidth", "textHeight", "text"), 1;
001544  001704  // Syntax: gfx_Button(mode, x, y, buttonColour, textColour, font, textWidth, textHeight, text);
001545  001705  // Usage : gfx_Button(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
001546  001706  // Notes : Draws a 3 dimensional Text Button at screen location defined by
001547  001707  //       : x,y arguments (top left corner). The size of the button depends on
001548  001708  //       : the font, width, height and length of the text.
001549  001709  //       : The button appearance will depend on the state parameter setting:
001550  001710  //       :         state = 0 : Button Pressed
001551  001711  //       :         state = 1 : Button Raised
001552  001712  //       : The button is automatically sized, determined by text.
001553  001713        
001554  001714        
001555  001715  func gfx_Button2("state", "x", "y", "Width", "Height", "buttonColour", "textColour", "text"), 0;
001556  001716  // Syntax: gfx_Button2(mode, x, y, width, height, buttoncolour, textcolour, text);
001557  001717  // Usage : gfx_Button2(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
001558  001718  // Notes : Draws a 3 dimensional Text Button at screen location defined by
001559  001719  //       : x,y arguments (top left corner). The size of the button is defined by the width
001560  001720  //       : and height parameters. The text is centered within those bounds.
001561  001721  //       : The button appearance will depend on the state parameter setting:
001562  001722  //       :         state = 0 : Button Pressed
001563  001723  //       :         state = 1 : Button Raised
001564  001724  //       : The button has square corners.
001565  001725        
001566  001726  func gfx_Button3("state", "x", "y", "Width", "Height", "buttonColour", "textColour", "text"), 0;
001567  001727  // Syntax: gfx_Button3(mode, x, y, width, height, buttoncolour, textcolour, text);
001568  001728  // Usage : gfx_Button3(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
001569  001729  // Notes : Draws a 3 dimensional Text Button at screen location defined by
001570  001730  //       : x,y arguments (top left corner). The size of the button is defined by the width
001571  001731  //       : and height parameters. The text is centered within those bounds.
001572  001732  //       : The button appearance will depend on the state parameter setting:
001573  001733  //       :         state = 0 : Button Pressed
001574  001734  //       :         state = 1 : Button Raised
001575  001735  //       : The button has rounded corners depending upon gfx_BevelRadius.
001576  001736        
001577  001737  func gfx_CheckBox("state", "x", "y", "Width", "Height", "boxColour", "textColour", "text"), 0;
001578  001738  // Syntax: gfx_CheckBox(state, x, y, Width, Height, boxColour, textColour, text);
001579  001739  // Usage : gfx_CheckBox(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
001580  001740  // Notes : Draws a CheckBox at screen location defined by x,y arguments (top left corner).
001581  001741  //       : The size of the button is defined by the width and height parameters.
001582  001742  //       : The text is to the right of the checkbox and truncated if necessary.
001583  001743  //       : The check appearance will depend on the state parameter setting:
001584  001744  //       :         state = 0 = CHECKED    : Checkbox Checked
001585  001745  //       :         state = 1 = UNCHECKED  : CheckBox Unchecked
001586  001746        
001587  001747  func gfx_RadioButton("state", "x", "y", "Width", "Height", "boxColour", "textColour", "text"), 0;
001588  001748  // Syntax: gfx_RadioButton(state, x, y, Width, Height, boxColour, textColour, text);
001589  001749  // Usage : gfx_RadioButton(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
001590  001750  // Notes : Draws a RadioButton at screen location defined by x,y arguments (top left corner).
001591  001751  //       : The size of the button is defined by the width and height parameters.
001592  001752  //       : The text is to the right of the radiobutton and truncated if necessary.
001593  001753  //       : The check appearance will depend on the state parameter setting:
001594  001754  //       :         state = 0 = CHECKED    : Radiobutton Checked
001595  001755  //       :         state = 1 = UNCHECKED  : Radiobutton Unchecked
001596  001756        
001597  001757  func gfx_Slider2("mode", "x1", "y1", "width", "height", "colour", "scale", "value"), 1;
001598  001758  // Syntax: gfx_Slider2(mode, x, y, width, height, colour, scale, value);
001599  001759  // Usage : gfx_Slider(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
001600  001760  // Notes : Draws a 3 dimensional Slider Bar on the screen.
001601  001761  //       : Slider parameters are as follows:
001602  001762  //       :         mode = 0 : Slider recessed
001603  001763  //       :         mode = 1 : Slider raised
001604  001764  //       :         x1, y1 = top left corner
001605  001765  //       :         x2, y2 = bottom right corner
001606  001766  //       :         scale = n : sets the full scale range from 0 to n
001607  001767  //       :         value = m : sets the relative position of the thumb 0 <= m <= n
001608  001768  //returns: scaled value of thumb position
001609  001769        
001610  001770        
001611  001771        
001612  001772        
001613  001773  func gfx_Panel("state", "x", "y", "width", "height", "colour"), 0;
001614  001774  // Syntax: gfx_Panel(style, x, y, width, height, colour);
001615  001775  // Usage : gfx_Panel(PANEL_RAISED, x, y, w, h, GRAY);
001616  001776  // Notes : Draws a panel (groupbox) at screen location defined by
001617  001777  //       : x, y, width and height with colour "colour".
001618  001778  //       :         state = 0 : sunken
001619  001779  //       :         state = 1 : raised
001620  001780  //       :         state = 2 : hide (draw object in background colour)
001621  001781  //returns: nothing
001622  001782        
001623  001783        
001624  001784        
001625  001785  func gfx_Slider("mode", "x1", "y1", "x2", "y2", "colour", "scale", "value"), 1;
001626  001786  // Syntax: gfx_Slider(mode, x1, y1, x2, y2, colour, scale, value);
001627  001787  // Usage : gfx_Slider(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
001628  001788  // Notes : Draws a 3 dimensional Slider Bar on the screen.
001629  001789  //       : Slider parameters are as follows:
001630  001790  //       :         mode = 0 : Slider recessed
001631  001791  //       :         mode = 1 : Slider raised
001632  001792  //       :         x1, y1 = top left corner
001633  001793  //       :         x2, y2 = bottom right corner
001634  001794  //       :         scale = n : sets the full scale range from 0 to n
001635  001795  //       :         value = m : sets the relative position of the thumb 0 <= m <= n
001636  001796  //returns: scaled value of thumb position
001637  001797        
001638  001798        
001639  001799        
001640  001800  func gfx_ScreenCopyPaste("xs", "ys", "xd", "yd", "width", "height"), 0;
001641  001801  // Syntax: gfx_ScreenCopyPaste(xs, ys, xd, yd, width, height);
001642  001802  // Usage : gfx_ScreenCopyPaste(arg1, arg2, arg3, arg4, arg5, arg6);
001643  001803  // Notes : Copies an area of a screen from xs,ys of size given by width and height
001644  001804  //       : and pastes it to another location determined by xd, yd.
001645  001805        
001646  001806  func gfx_RGBto565("RED", "GREEN", "BLUE"), 1;
001647  001807  // Syntax: gfx_RGBto565(red, green, blue);
001648  001808  // Usage : gfx_RGBto565(arg1, arg2, arg3);
001649  001809  // Notes : Returns the 16bit (565 format) colour value of a 24bit (R,G,B format) colour
001650  001810        
001651  001811  func gfx_332to565("COLOUR8BIT"), 1;
001652  001812  // Syntax: gfx_332to565(colour);
001653  001813  // Usage : gfx_332to565(arg);
001654  001814  // Notes : Returns the 16bit (565 format) colour value of an 8 bit (332 format) colour
001655  001815        
001656  001816  func gfx_565to332("COLOUR16BIT"), 1;
001657  001817  // Syntax: gfx_565to332(colour);
001658  001818  // Usage : clor332 := gfx_565to332(arg);
001659  001819  // Notes : Returns the 8bit (332 format) colour value of an 16 bit (565 format) colour
001660  001820        
001661  001821  func gfx_TriangleFilled("x1","y1","x2","y2","x3","y3","colr"), 0; // draw a filled triangle
001662  001822  // Syntax: gfx_TriangleFilled(x1, y1, x2, y2, x3, y3, colr);
001663  001823  // Usage : gfx_TriangleFilled(arg1, arg2, arg3, arg4, arg5, arg6, arg7);
001664  001824  // Notes : Plots a coloured Solid Triangle from between 3 vertices: x1,y1 x2,y2 x3,y3
001665  001825  //       : Vertices must be specified in an anti-clockwise fashion
001666  001826        
001667  001827        
001668  001828  func gfx_PolygonFilled("n", "&vx", "&vy", "colr"), 0;        // draw a filled polygon from a table of vertices
001669  001829  // Syntax: gfx_PolygonFilled(numbVertices, &vx, &y, colour);
001670  001830  // Usage : gfx_PolygonFilled(arg1, x[array], y[array], arg2);
001671  001831  // Notes : Plots a solid Polygon between specified vertices: x1,y1 x2,y2 .. xn,yn
001672  001832  //       : Vertices must be minimum of 3 and can be specified in any fashion
001673  001833        
001674  001834        
001675  001835  func gfx_Origin("x", "y"), 0;            // set relative screen offset for graphics objects
001676  001836  // Syntax: gfx_Offset(x, y);
001677  001837  // Usage : gfx_Offset(arg1, arg2);
001678  001838  // Notes : Set the screen offset
001679  001839        
001680  001840        
001681  001841        
001682  001842  func gfx_FillPattern("patptr", "mode"), 1;
001683  001843  // Syntax  : gfx_FillPattern(patternpointer);
001684  001844  // Usage   : gfx_FillPattern(PTN_BRICKS);
001685  001845  //         : Provides graphics fill pattern, (8 linear bytes, 1=pixel off)
001686  001846  // Notes   : "patptr" points to an 8x8 tile for rendering filled areas.
001687  001847  //         : Rendering is turned off with gfx_FillPattern(0);
001688  001848  //         : or gfx_FillPattern(OFF);
001689  001849  //         : "mode" maybe TRANSPARENT or OPAQUE (0 or 1), for OPAQUE
001690  001850  //         : mode, the current screen colour is used for the 'off'
001691  001851  //         : pixels, for transparent mode, the 'off' pixels are not drawn.
001692  001852  //         : gfx_FillPattern affects all filled object, including polygons.
001693  001853  //         : There are 32 builtin patterns, these are obtained using the
001694  001854  //         : pre-defined constants FILLPATTERN_0 to FILLPATTERN_31, or the
001695  001855  //         : names, eg PTN_BRICKS, PTN_CARGONET, PTN_CIRCUITS, etc.
001696  001856  //         : Note that the constants range from 0xFFE0 to 0xFFFF, any
001697  001857  //         : other value is assumed to be a pointer to a users 8 byte
001698  001858  //         : block pattern.
001699  001859  // Returns : returns the handle of the previous pattern.
001700  001860        
001701  001861        
001702  001862  func gfx_PieSlice("cx", "cy", "spread", "radius", "step", "startangle", "endangle", "mode", "colour"), 0;
001703  001863  // Syntax  : gfx_PieSlice(cx, cy, spread, radius, step, startangle, endangle, mode, colour);
001704  001864  // Usage   : gfx_PieSlice(120, 120, 0, 100, 8, 75, 145, 0, YELLOW);
001705  001865  // Notes   : Draws a 'pie slice' (filled arc) at "cx":"cy" with radius "radius", starting at "startangle"
001706  001866  //         : and ending at "endangle". "spread" is used to offset the centrepoint of the pieslice
001707  001867  //         : to shift a pie chart piece away from the centrepoint.
001708  001868  //         : Rendering can be obtained with gfx_FillPattern(PATTRN);
001709  001869  //         : or gfx_FillPattern(OFF); for no fill pattern.
001710  001870  //         : Step is the stepping angle increment for the fineness of the pie Slice.
001711  001871  //         : "mode" has the following effect
001712  001872  //         :   if mode = 0, no outline
001713  001873  //         :   if mode = 1, outer circumference line (using current object colour)
001714  001874  //         :   if mode = 2, outer circumference and slice lines ( (using current object colour)
001715  001875  // Returns : nothing.
001716  001876        
001717  001877        
001718  001878  func gfx_Arc("xc", "yc", "radius", "step", "startangle", "endangle", "mode"), 0;
001719  001879  // Syntax  : gfx_Arc(cx, cy, radius, step, startangle, endangle, mode);
001720  001880  // Usage   : gfx_Arc(120, 120, 0, 100, 8, 75, 145, 0);
001721  001881  // Notes   : Draws an arc at "cx":"cy" with radius "radius", starting at "startangle"
001722  001882  //         : and ending at "endangle". Colour is determined by curent object colour.
001723  001883  //         : Step is the stepping angle increment for the fineness of the arc.
001724  001884  //         : "mode" has the following effect
001725  001885  //         :   if mode = 0, outer circumference line only
001726  001886  //         :   if mode = 1, outer circumference and lines back to cy:cy
001727  001887  // Returns : nothing.
001728  001888        
001729  001889        
001730  001890  func gfx_RoundRect("x1", "y1", "x2", "y2", "rad", "color"), 0;
001731  001891  // Syntax  : gfx_RoundRect(x1, y1, x2, y2, radius, colour);
001732  001892  // Usage   : gfx_RoundRect(120, 120, 160, 160, 8, GRAY); // draw a tab like object
001733  001893  // Notes   : Draws a filled rectangle at the given co-ordinates with rounded corners
001734  001894  //         : determined by "radius".
001735  001895  //         : Bounding rectangle is x1-rad, y1-rad, x2+rad, y2+rad.
001736  001896  // Returns : nothing.
001737  001897        
001738  001898        
001739  001899  func gfx_Surround("x1", "y1", "x2", "y2", "rad1", "rad2", "color"), 0;
001740  001900  // Syntax  : gfx_Surround(x1, y1, x2, y2, radius1, radius1, colour);
001741  001901  // Usage   : gfx_Surround(120, 120, 160, 160, 8, 0, GRAY); // rounded surround frame
001742  001902  // Notes   : Draws a outline rectangle at the given co-ordinates with rounded corners
001743  001903  //         : determined by "radius1". "radius2" sets the radius of the outer rounded rectangle.
001744  001904  //         : If "radius1" is zero, the inner rectangle will have square corners.
001745  001905  //         : Bounding rectangle is x1-rad1-rad2, y1-rad1-rad2, x2+rad1+rad2, y2+rad1+rad2.
001746  001906  // Returns : nothing.
001747  001907        
001748  001908        
001749  001909  func gfx_RoundPanel("state", "x", "y", "width", "height", "radius", "bevelwidth", "colour"), 0;
001750  001910  // Syntax  : gfx_RoundPanel(style, x, y, width, height, radius, bevelwidth, colour);
001751  001911  // Usage   : gfx_RoundPanel(PANEL_RAISED, 100, 100, 30, 20, GRAY);
001752  001912  // Notes   : Draws a rounded panel at x, y, width and height may be zero allowing the function
001753  001913  //         : to be used for rounded panels, rounded buttons, circular buttons.
001754  001914  //         :         state = 0 : sunken
001755  001915  //         :         state = 1 : raised
001756  001916  //         :         state = 2 : hide (draw object in background colour)
001757  001917  //         : Bounding rectangle is x1-radius-bevelwidth, y1-radius-bevelwidth, x2+radius+bevelwidth, y2+radius+bevelwidth.
001758  001918  // Returns : nothing.
001759  001919        
001760  001920        
001761  001921  func gfx_Gradient("style", "left", "top", "right", "bottom", "color1", "color2"), 0;
001762  001922  // Syntax  : gfx_Gradient(style, x1, y1, x2, y2, colr1, colr2);
001763  001923  // Usage   : gfx_Gradient(GRAD_WAVE_VER, 100, 100, 230, 120, BLACK, WHITE);
001764  001924  // Notes   : Draws a graduated colour rectangle at the specified co-ordinate.
001765  001925  //         : "style" specifies the drawing mode
001766  001926  //         :     GRAD_DOWN         // gradient changes in the vertical direction
001767  001927  //         :     GRAD_RIGHT        // gradient change in the horizontal direction
001768  001928  //         :     GRAD_UP           // gradient changes in the vertical direction
001769  001929  //         :     GRAD_LEFT         // gradient change in the horizontal direction
001770  001930  //         :     GRAD_WAVE_VER     // gradient wave in the vertical direction
001771  001931  //         :     GRAD_WAVE_HOR     // gradient wave in the horizontal direction
001772  001932  // Returns : nothing.
001773  001933        
001774  001934        
001775  001935  func gfx_RoundGradient("style", "left", "top", "right", "bottom", "radius", "color1", "color2"), 0;
001776  001936  // Syntax  : gfx_Gradient(style, x1, y1, x2, y2, radius, colr1, colr2);
001777  001937  // Usage   : gfx_Gradient(GRAD_WAVE_VER, 100, 100, 230, 120, BLACK, WHITE);
001778  001938  // Notes   : Draws a graduated colour rounded rectangle at the specified co-ordinate.
001779  001939  //         : X1 may equal X2, and Y1 = Y2 allowing allowing the function
001780  001940  //         : to be used for rounded panels, rounded buttons, circular buttons.
001781  001941  //         : "style" specifies the drawing mode
001782  001942  //         :     GRAD_DOWN         // gradient changes in the vertical direction
001783  001943  //         :     GRAD_RIGHT        // gradient change in the horizontal direction
001784  001944  //         :     GRAD_UP           // gradient changes in the vertical direction
001785  001945  //         :     GRAD_LEFT         // gradient change in the horizontal direction
001786  001946  //         :     GRAD_WAVE_VER     // gradient wave in the vertical direction
001787  001947  //         :     GRAD_WAVE_HOR     // gradient wave in the horizontal direction
001788  001948  //         : Bounding rectangle is x1-radius, y1-radius, x2+radius, y2+radius.
001789  001949  // Returns : nothing.
001790  001950        
001791  001951        
001792  001952  func gfx_ReadBresLine("x1", "y1", "x2", "y2", "ptr"), 1;
001793  001953  // Syntax  : gfx_readBrezLine(x1, y1, x2, y2, ptr);
001794  001954  // Usage   : anArrayPtr := gfx_readBrezLine(10, 10, 50, 50, 0);  // read arbitrary line to array, let the function make the array for me
001795  001955  // Notes   : reads an arbitrary line from the display to an array.
001796  001956  //         : If "ptr" is 0, the correctly sized array is created, in which case
001797  001957  //         : it is up to the caller to eventually destroy it. Otherwise "ptr"
001798  001958  //         : is expected to point to a correctly sized array.
001799  001959  //         : NB if an array is supplied, its size must be large enough, and may
001800  001960  //         : be calculated:-
001801  001961  //         : bytecount := (MAX(ABS(x2-x1), ABS(y2-y1) + 1) * 2; // calc array size for mem_Alloc (which allocates byte storage)
001802  001962  //         : wordcount := (MAX(ABS(x2-x1), ABS(y2-y1) + 1);     // calc array size for fixed word array
001803  001963  // Returns : A pointer to the created aray, or the users array.
001804  001964  //         : In the case of ptr=0, if there is insufficient
001805  001965  //         : memory to create the array, zero is returned
001806  001966        
001807  001967        
001808  001968  func gfx_WriteBresLine("x1", "y1", "x2", "y2", "ptr"), 0;
001809  001969  // Syntax  : gfx_writeBrezLine(x1, y1, x2, y2, ptr), 0;
001810  001970  // Usage   : gfx_writeBrezLine(20, 20, 50, 50, anArrayPtr);   // write an array back to the arbitrary line
001811  001971  // Notes   : cast pixel values from array to arbitrary line "x1", "y1", "x2", "y2"
001812  001972  //         : "ptr" points to the array to be written.
001813  001973  // Returns : nothing
001814  001974        
001815  001975        
001816  001976  func gfx_ReadGRAMarea("x1", "y1", "x2", "y2", "ptr"), 1;
001817  001977  // Syntax  : gfx_ReadGRAMarea(x1, y1, x2, y2, ptr);
001818  001978  // Usage   : anArrayPtr := gfx_ReadGRAMarea(10, 10, 50, 50, 0);  // read rectangular area to array, let the function make the array for me
001819  001979  // Notes   : reads an arbitrary rectangular area from the display to an array.
001820  001980  //         : If "ptr" is 0, the correctly sized array is created, in which case
001821  001981  //         : it is up to the caller to eventually destroy it. Otherwise "ptr"
001822  001982  //         : is expected to point to a correctly sized array.
001823  001983  //         : NB if an array is supplied, its size must be large enough, and may
001824  001984  //         : be calculated:-
001825  001985  //         : bytecount := ( (ABS(x2-x1)+1) * (ABS(y2-y1) + 1)) * 2;     // calc array size for mem_Alloc (which allocates byte storage)
001826  001986  //         : wordcount := ( (ABS(x2-x1)+1) *  ABS(y2-y1);             // calc array size for fixed word array
001827  001987  // Returns : A pointer to the created aray, or the users array.
001828  001988  //         : In the case of ptr=0, if there is insufficient
001829  001989  //         : memory to create the array, zero is returned
001830  001990        
001831  001991        
001832  001992  func gfx_WriteGRAMarea("x1", "y1", "x2", "y2", "ptr"), 0;
001833  001993  // Syntax  : gfx_WriteGRAMarea(x1, y1, x2, y2, ptr), 0;
001834  001994  // Usage   : gfx_WriteGRAMarea(20, 20, 50, 50, anArrayPtr);   // write an array back to the rectangular area
001835  001995  // Notes   : "ptr" points to the array to be written.
001836  001996  // Returns : nothing
001837  001997        
001838  001998        
001839  001999  func gfx_Get("mode"), 1;
001840  002000  // Syntax: gfx_Get(mode);
001841  002001  // Usage : arg1 := gfx_Get(arg);
001842  002002  // Notes : Returns various parameters to caller
001843  002003  //       :
001844  002004  //       : mode = X_MAX (mode 0) : current orientations maximum X value
001845  002005  //       : var := gfx_Get(X_MAX);
001846  002006  //       : Returns the maximum horizontal value of the display
001847  002007  //       :
001848  002008  //       : mode = Y_MAX (mode 1) : Vcurrent orientations maximum Y value
001849  002009  //       : var := gfx_Get(Y_MAX);
001850  002010  //       : Returns the maximum vertical value of the display
001851  002011  //       :
001852  002012  //       : mode = LEFT_POS (mode 2) : Left location of last Object
001853  002013  //       : var := gfx_Get(LEFT_POS);
001854  002014  //       : Returns the left location of the last drawn object
001855  002015  //       : such as a slider or button or an image/video
001856  002016  //       :
001857  002017  //       : mode = TOP_POS (mode 3) : Top location of Object
001858  002018  //       : var := gfx_Get(TOP_POS);
001859  002019  //       : Returns the top location of the last drawn object
001860  002020  //       : such as a slider or button or an image/video
001861  002021  //       :
001862  002022  //       : mode = RIGHT_POS (mode 4) : Right location of last Object
001863  002023  //       : var := gfx_Get(RIGHT_POS);
001864  002024  //       : Returns the right location of the last drawn object
001865  002025  //       : such as a slider or button or an image/video
001866  002026  //       :
001867  002027  //       : mode = BOTTOM_POS  (mode 5) : Bottom location of Object
001868  002028  //       : var := gfx_Get(BOTTOM_POS );
001869  002029  //       : Returns the bottom location of the last drawn object
001870  002030  //       : such as a slider or button or an image/video
001871  002031  //       :
001872  002032  //       : mode = X_ORG (mode 6) : get current internal X position
001873  002033  //       : var := gfx_Get(X_ORG);
001874  002034  //       : Returns the internal X position that was set with
001875  002035  //       : gfx_MoveTo(x, y); or gfx_Set(X_ORG, pos);
001876  002036  //       :
001877  002037  //       : mode = Y_ORG (mode 7) : get current internal Y position
001878  002038  //       : var := gfx_Get(Y_ORG);
001879  002039  //       : Returns the internal X position that was set with
001880  002040  //       : gfx_MoveTo(x, y); or gfx_Set(Y_ORG, pos);
001881  002041  //       :
001882  002042        
001883  002043        
001884  002044  //------------------------------------------------------------------//
001885  002045  // Single parameter short-cuts                                      //
001886  002046  // for the gfx_Set functions                                        //
001887  002047  // These functions return the existing value before                 //
001888  002048  // the change is made.                                              //
001889  002049  //------------------------------------------------------------------//
001890  002050  func gfx_PenSize("mode"), 1;                        // 0  graphics pen size, SOLD or OUTLINE
001891  002051  func gfx_BGcolour("colour"), 1;                     // 1  graphics background colour
001892  002052  func gfx_ObjectColour("colour"), 1;                 // 2  graphics object colour
001893  002053  func gfx_Clipping("mode"), 1;                       // 3  graphics clipping ON/OFF
001894  002054  func gfx_TransparentColour("colour"), 1;            // 4  graphics image transparent mask colour
001895  002055  func gfx_Transparency("mode"), 1;                   // 5  graphics image transparent mode ON/OFF
001896  002056  func gfx_FrameDelay("milliseconds"), 1;             // 6  graphics animation frame delay
001897  002057  func gfx_ScreenMode("mode"), 1;                     // 7  graphics orientation LANDSCAPE, LANDSCAPE_R, PORTRAIT, PORTRAIT_R
001898  002058  func gfx_OutlineColour("colour"), 1;                // 8  graphics rectangle/circle outline colour
001899  002059  func gfx_Contrast("value"), 1;                      // 9  graphics hardware value 0 to 9, 0=off, 1=lowest, 8=highest (only for AMOLED devices)
001900  002060  func gfx_LinePattern("value"), 1;                   // 10 graphics line draw tesselation pattern (16 linear bits, 1=pixel off)
001901  002061  func gfx_BevelRadius("radius"), 1;                  // 11 graphics button bevel radius
001902  002062  func gfx_BevelWidth("value"), 1;                    // 12 graphics button bevel width
001903  002063  func gfx_BevelShadow("value"), 1;                   // 13 graphics button bevel shadow depth
001904  002064  func gfx_Xorigin("offset"), 1;                      // 14 graphics  X origin
001905  002065  func gfx_Yorigin("offset"), 1;                      // 15 graphics  Y origin
001906  002066        
001907  002067        
001908  002068  func gfx_PointWithinBox("x", "y", "&rectr"), 1;
001909  002069  // Syntax   : gfx_PointWithinBox(x, y, rect);
001910  002070  // Usage    : var r[4]; r[0]:=100; r[1]:=200; r[2]:=20; r[3]:=30;
001911  002071  //          : result := gfx_PointWithinBox(x, y, r); // check area at 100,200,119,229
001912  002072  // Notes    : rect is an array of 4 vars, x1, y1, width, height - using width co-ordinates
001913  002073  // returns  : Returns true if last touch co-ordinates are within the box test area.
001914  002074        
001915  002075        
001916  002076  func gfx_PointWithinRectangle("x", "y", "&recta"), 1;
001917  002077  // Syntax   : gfx_PointWithinRectangle(x, y, recta);
001918  002078  // Usage    : var r[4]; r[0]:=100; r[1]:=200; r[2]:=119; r[3]:=129;
001919  002079  //          : result := gfx_PointWithinRectangle(x, y, r); // check if point within area at 100,200,119,229
001920  002080  // Notes    : rect is an array of 4 vars, x1, y1, x2, y2 using absolute co-ordinates
001921  002081  // returns  : Returns true if x:y co-ordinates are within the rectangle test area.
001922  002082        
001923  002083        
001924  002084  func __reserved17(), 0; // do not remove
001925  002085  func __reserved18(), 0; // do not remove
001926  002086  func __reserved19(), 0; // do not remove
001927  002087  func __reserved20(), 0; // do not remove
001928  002088  func __reserved21(), 0; // do not remove
001929  002089  func __reserved22(), 0; // do not remove
001930  002090        
001931  002091        
001932  002092  // built in fill pattern constants for function gfx_FillPattern
001933  002093  #CONST
001934  002126  #END
001935  002127        
001936  002128  #CONST
001937  002161  #END
001938  002162        
001939  002163  //------------------------------------------------------------------//
001940  002164  //     gradient control constants                                   //
001941  002165  //------------------------------------------------------------------//
001942  002166  #constant GRAD_DOWN         0x20    // gradient changes in the vertical direction
001943  002166  #constant GRAD_DOWN         0x20    // gradient changes in the vertical direction
001944  002167  #constant GRAD_RIGHT        0x30    // gradient change in the horizontal direction
001945  002167  #constant GRAD_RIGHT        0x30    // gradient change in the horizontal direction
001946  002168  #constant GRAD_UP           0x40    // gradient changes in the vertical direction
001947  002168  #constant GRAD_UP           0x40    // gradient changes in the vertical direction
001948  002169  #constant GRAD_LEFT         0x50    // gradient change in the horizontal direction
001949  002169  #constant GRAD_LEFT         0x50    // gradient change in the horizontal direction
001950  002170  #constant GRAD_WAVE_VER     0x60    // gradient wave in the vertical direction
001951  002170  #constant GRAD_WAVE_VER     0x60    // gradient wave in the vertical direction
001952  002171  #constant GRAD_WAVE_HOR     0x70    // gradient wave in the horizontal direction
001953  002171  #constant GRAD_WAVE_HOR     0x70    // gradient wave in the horizontal direction
001954  002172        
001955  002173        
001956  002174        
001957  002175        
001958  002176  //------------------------------------------------------------------//
001959  002177  // uSD/FLASH Function Prototypes                                    //
001960  002178  //------------------------------------------------------------------//
001961  002179  func media_Video("x", "y"), 0;                      // display movie at position x y
001962  002180  // Syntax: media_Video(x, y);
001963  002181  // Usage : media_Video(arg1, arg2);
001964  002182  // Notes : Play a Video/Animation clip from the uSD card at screen location
001965  002183  //       : specified by x,y (top left corner). The location of the clip in the
001966  002184  //       : uSD card must be specified by media_setSector(Video_Sector_Add) function.
001967  002185        
001968  002186  func media_VideoFrame("x", "y","framenumber"), 0;   // display required frame from a movie at x y
001969  002187  // Syntax: media_VideoFrame(Frame_number);
001970  002188  // Usage : arg1 := media_VideoFrame();
001971  002189  // Notes : After a pointer to a valid video has been set with media_SetSector,
001972  002190  //       : calling this function shows each fram sequentially, returning
001973  002191  //       : the number of frames remaining. The position of the image is
001974  002192  //     : at the current origin as set with gfx_MoveTo(...);
001975  002193        
001976  002194  func media_SetAdd("HiWord", "LoWord"), 0;           // set stream byte address
001977  002195  // Syntax: media_SetAdd(AddHiWord, AddLoWord);
001978  002196  // Usage : media_SetAdd(arg1, arg2);
001979  002197  // Notes : Set uSD internal Address pointer for bytewise access
001980  002198        
001981  002199  func media_SetSector("HiWord", "LoWord"), 0;        // set stream sector address
001982  002200  // Syntax: media_SetSector(SectHiWord, SectLoWord);
001983  002201  // Usage : media_SetSector(arg1, arg2);
001984  002202  // Notes : Set uSD internal Sector pointer for sector block access
001985  002203        
001986  002204  func media_RdSector("*destination"), 1;
001987  002205  // Syntax: media_RdSector(*destination);
001988  002206  // Usage : media_RdSector(rdblock);
001989  002207  // Notes : Reads and Returns 512 bytes (256 words) into a destination
001990  002208  //       : block (eg rdblock[256]) pointed to by the internal Sector pointer.
001991  002209  //       : After the read the Sector pointer is automatically incremented by 1.
001992  002210  //       : Returns TRUE if uSD response was TRUE
001993  002211        
001994  002212  func media_WrSector("*source"), 1;
001995  002213  // Syntax: media_WrSector(*source);
001996  002214  // Usage : media_WrSector(wrblock);
001997  002215  // Notes : Writes 512 bytes (256 words) from a source memory block
001998  002216  //       : (eg wrblock[256]) into the uSD card. After the write the Sector
001999  002217  //       : pointer is automatically incremented by 1.
002000  002218  //       : Returns TRUE if uSD response was TRUE
002001  002219        
002002  002220  func media_ReadByte(), 1;                // read a byte at the current stream position
002003  002221  // Syntax: media_RdByte();
002004  002222  // Usage : var := media_RdByte();
002005  002223  // Notes : Reads and Returns a single byte of data from the
002006  002224  //       : uSD card pointed to by the internal Address pointer.
002007  002225  //       : After the read the Address pointer is automatically
002008  002226  //       : incremented by 1.
002009  002227        
002010  002228  func media_ReadWord(), 1;                // read a word at the current stream position
002011  002229  // Syntax: media_ReadWord();
002012  002230  // Usage : var := media_ReadWord();
002013  002231  // *Notes : Reads and Returns a single word of data from the
002014  002232  //       : uSD card pointed to by the internal Address pointer.
002015  002233  //       : After the read the Address pointer is automatically
002016  002234  //       : incremented by 2.
002017  002235        
002018  002236  func media_WriteByte("byte"), 1;              // write a byte to the current stream position
002019  002237  // Syntax: media_WriteByte(arg1);
002020  002238  // Usage : var := media_WriteByte(arg1);
002021  002239  // *Notes : Writes and Returns xxxxx
002022  002240  //       : After the write the Address pointer is automatically
002023  002241  //       : incremented by 1.
002024  002242        
002025  002243  func media_WriteWord("word"), 1;            // write a word to the current stream position
002026  002244  // Syntax: media_WriteWord(arg1);
002027  002245  // Usage : var := media_WriteWord(arg1);
002028  002246  // *Notes : Writes and Returns xxxxx
002029  002247  //       : After the write the Address pointer is automatically
002030  002248  //       : incremented by 2.
002031  002249        
002032  002250  func media_Image("x", "y"), 0;            // display image at position x y
002033  002251  // Syntax: media_Image(x, y);
002034  002252  // Usage : media_Image(arg1, arg2);
002035  002253  // Notes : Display an image from the uSD card at screen location
002036  002254  //       : specified by x,y (top left corner). The location of the
002037  002255  //       : Image in the uSD card must be specified by
002038  002256  //       : media_setSector(Image_Sector_Add) function.
002039  002257        
002040  002258  func media_Flush(), 1;                    // after writing to media, flush the sector and write
002041  002259  // Syntax: media_Flush();
002042  002260  // Usage : var := media_Flush();
002043  002261  // *Notes : After writing any data to a sector, media_Flush() should be called to ensure that the current sector that
002044  002262  //       : is being written is correctly stored back to the media else write operations may be unpredictable.
002045  002263        
002046  002264  func media_Init(), 1;                    // initialize uSD card
002047  002265  // Usage : media_Init();
002048  002266  // Notes : Initialise uSD CARD
002049  002267  //       : Response: 0 = No Card
002050  002268  //       :           1 = Card Initialised
002051  002269        
002052  002270  func __reserved23(), 0; // do not remove
002053  002271  func __reserved24(), 0; // do not remove
002054  002272  func __reserved25(), 0; // do not remove
002055  002273  func __reserved26(), 0; // do not remove
002056  002274        
002057  002275  //==============================================//
002058  002276  // Communications Function Prototypes           //
002059  002277  // NB Primary COM port has fixed pins,          //
002060  002278  // COM1, COM2 and COM3 must have pins assigned. //
002061  002279  //==============================================//
002062  002280  func setbaud("baudnum"), 0;            // set baud rate of COM0
002063  002281  // Syntax: setbaud(baud_number);
002064  002282  // Usage : setbaud(BAUD_128000);        //Set baud rate to 128000bps
002065  002283  // *Notes : argument specifies the baud rate using pre-defined constant.
002066  002284  //       : The pre-defined constant is a value of 0-19 , and internally
002067  002285  //       : this is used as a table pointer to get the baud rate divisor
002068  002286  //       : value for one of the 20 selected baud rates, control is then
002069  002287  //       : passed to com_SetBaud(COM0, baudlookup[baud_number]);
002070  002288  //       : The pre-defined constants equate to a value of 0-19.
002071  002289  //       : If a value other than 0-19 is used, a run time error (eror 25)
002072  002290  //       : will occur.
002073  002291        
002074  002292  // baud divisor rates for legacy setbaud(n);
002075  002293  #CONST
002076  002315  #END
002077  002316        
002078  002317        
002079  002318  func com_SetBaud("comport","baudrate/10"), 1;
002080  002319  // Syntax: com_SetBaud("comport","baudrate/10");
002081  002320  // Usage : com_SetBaud(COM1, 960);   // set COM1 to 9600 baud
002082  002321  // Notes : sets to any viable baud rate from 160 to 655350
002083  002322  // return true if baud rate was acceptable
002084  002323        
002085  002324        
002086  002325  func COM1_RX_pin("pin"), 1;        // select the hardware pin for the COM1 receive line
002087  002326  // Usage : COM1_RX_pin(PA0); // set COM1 RX to PA0 pin
002088  002327  // Notes : Selects the hardware pin for COM1 receive line.
002089  002328  //       : Note that only a single pin can be mapped to COM1 RX.
002090  002329  //       : Pins that can be mapped to COMx TX are PA0 to PA13
002091  002330  //       : Pins that can't be mapped to COMx RX are PA14 and PA15
002092  002331  //       : If the pin argument is 0 the function has no effect
002093  002332  //       : The pin is automatically set to an input.
002094  002333  //       : If the COMx RX pin is set to same pin as COMx TX pin (eg for a loopback check)
002095  002334  //       : it is necessary to configure the input pin first, eg
002096  002335  //       :     COM1_RX_pin(PA7);     // configure COM1 RX to PA7 (this disconnects anything else)
002097  002336  //       :     COM1_TX_pin(PA7));    // configure COM1 TX to PA7
002098  002337  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002099  002338        
002100  002339  func COM2_RX_pin("pin"), 1;        // select the hardware pin for the COM2 receive line
002101  002340  // Usage : COM2_RX_pin(PA0); // set COM2 RX to PA0 pin
002102  002341  // Notes : Selects the hardware pin for COM2 receive line.
002103  002342  //       : Note that only a single pin can be mapped to COM2 RX.
002104  002343  //       : Pins that can be mapped to COMx TX are PA0 to PA13
002105  002344  //       : Pins that can't be mapped to COMx RX are PA14 and PA15
002106  002345  //       : If the pin argument is 0 the function has no effect
002107  002346  //       : The pin is automatically set to an input.
002108  002347  //       : If the COMx RX pin is set to same pin as COMx TX pin (eg for a loopback check)
002109  002348  //       : it is necessary to configure the input pin first, eg
002110  002349  //       :     COM2_RX_pin(PA7);     // configure COM2 RX to PA7 (this disconnects anything else)
002111  002350  //       :     COM2_TX_pin(PA7));    // configure COM2 TX to PA7
002112  002351  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002113  002352        
002114  002353  func COM3_RX_pin("pin"), 1;        // select the hardware pin for the COM3 receive line
002115  002354  // Usage : COM3_RX_pin(PA0); // set COM3 RX to PA0 pin
002116  002355  // Notes : Selects the hardware pin for COM3 receive line.
002117  002356  //       : Note that only a single pin can be mapped to COM3 RX.
002118  002357  //       : Pins that can be mapped to COMx TX are PA0 to PA13
002119  002358  //       : Pins that can't be mapped to COMx RX are PA14 and PA15
002120  002359  //       : If the pin argument is 0 the function has no effect
002121  002360  //       : The pin is automatically set to an input.
002122  002361  //       : If the COMx RX pin is set to same pin as COMx TX pin (eg for a loopback check)
002123  002362  //       : it is necessary to configure the input pin first, eg
002124  002363  //       :     COM3_RX_pin(PA7);     // configure COM3 RX to PA7 (this disconnects anything else)
002125  002364  //       :     COM3_TX_pin(PA7));    // configure COM3 TX to PA7
002126  002365  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002127  002366        
002128  002367        
002129  002368  func COM1_TX_pin("pin"), 1;        // select the hardware pin for COM1 transmit line
002130  002369  // Syntax: COM1_TX_pin(pin);
002131  002370  // Usage : COM1_TX_pin(PA2); // set COM1 TX to PA2 pin
002132  002371  // Notes : Select the hardware pin for COMx transmit line.
002133  002372  //       : Pins that can be mapped to COMx TX are PA1, PA3 to PA9, and PA12 or PA13
002134  002373  //       : Pins that can't be mapped to COMx TX are PA0, PA2, PA10, PA11, PA14 and PA15
002135  002374  //       : If the pin argument is 0, COMx TX is disconnected from all pins.
002136  002375  //       : The pin is automatically set to an output.
002137  002376  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002138  002377        
002139  002378  func COM2_TX_pin("pin"), 1;        // select the hardware pin for COM2 transmit line
002140  002379  // Syntax: COM2_TX_pin(pin);
002141  002380  // Usage : COM2_TX_pin(PA2); // set COM2 TX to PA2 pin
002142  002381  // Notes : Select the hardware pin for COMx transmit line.
002143  002382  //       : Pins that can be mapped to COMx TX are PA1, PA3 to PA9, and PA12 or PA13
002144  002383  //       : Pins that can't be mapped to COMx TX are PA0, PA2, PA10, PA11, PA14 and PA15
002145  002384  //       : If the pin argument is 0, COMx TX is disconnected from all pins.
002146  002385  //       : The pin is automatically set to an output.
002147  002386  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002148  002387        
002149  002388  func COM3_TX_pin("pin"), 1;        // select the hardware pin for COM3 transmit line
002150  002389  // Syntax: COM3_TX_pin(pin);
002151  002390  // Usage : COM3_TX_pin(PA2); // set COM3 TX to PA2 pin
002152  002391  // Notes : Select the hardware pin for COMx transmit line.
002153  002392  //       : Pins that can be mapped to COMx TX are PA1, PA3 to PA9, and PA12 or PA13
002154  002393  //       : Pins that can't be mapped to COMx TX are PA0, PA2, PA10, PA11, PA14 and PA15
002155  002394  //       : If the pin argument is 0, COMx TX is disconnected from all pins.
002156  002395  //       : The pin is automatically set to an output.
002157  002396  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002158  002397        
002159  002398  func com_Init("buf","bufsize","qualifier"), 0;  // set up a interrupt driven ring buffer for comms
002160  002399  // Syntax: com_Init(buffer, bufsize, qualifier);
002161  002400  // Usage1: com_Init(mybuf, 20, 0);
002162  002401  // Usage2: com_Init(mybuf, 20, ':');
002163  002402  // Notes : initialize a serial capture buffer for the comms input
002164  002403  //       : The program must declare a var array as a circular buffer.
002165  002404  //       : Usage1 declares a circular buffer which will continually
002166  002405  //       : buffer characters.
002167  002406  //       : Usage2 must receive ':' before any characters will
002168  002407  //       : accumulate in the buffer.
002169  002408        
002170  002409  func com1_Init("buf","bufsize","qualifier"), 0;
002171  002410  // Syntax: com1_Init(buffer, bufsize, qualifier);
002172  002411  // Usage1: com1_Init(mybuf, 20, 0);
002173  002412  // Usage2: com1_Init(mybuf, 20, ':');
002174  002413  // Notes : initialize a serial capture buffer for the comms input
002175  002414  //       : The program must declare a var array as a circular buffer.
002176  002415  //       : Usage1 declares a circular buffer which will continually
002177  002416  //       : buffer characters.
002178  002417  //       : Usage2 must receive ':' before any characters will
002179  002418  //       : accumulate in the buffer.
002180  002419        
002181  002420  func com2_Init("buf","bufsize","qualifier"), 0;
002182  002421  // Syntax: com2_Init(buffer, bufsize, qualifier);
002183  002422  // Usage1: com2_Init(mybuf, 20, 0);
002184  002423  // Usage2: com2_Init(mybuf, 20, ':');
002185  002424  // Notes : initialize a serial capture buffer for the comms input
002186  002425  //       : The program must declare a var array as a circular buffer.
002187  002426  //       : Usage1 declares a circular buffer which will continually
002188  002427  //       : buffer characters.
002189  002428  //       : Usage2 must receive ':' before any characters will
002190  002429  //       : accumulate in the buffer.
002191  002430        
002192  002431  func com3_Init("buf","bufsize","qualifier"), 0;
002193  002432  // Syntax: com3_Init(buffer, bufsize, qualifier);
002194  002433  // Usage1: com3_Init(mybuf, 20, 0);
002195  002434  // Usage2: com3_Init(mybuf, 20, ':');
002196  002435  // Notes : initialize a serial capture buffer for the comms input
002197  002436  //       : The program must declare a var array as a circular buffer.
002198  002437  //       : Usage1 declares a circular buffer which will continually
002199  002438  //       : buffer characters.
002200  002439  //       : Usage2 must receive ':' before any characters will
002201  002440  //       : accumulate in the buffer.
002202  002441        
002203  002442        
002204  002443  func serin(), 1;                // read a byte from primary com port COM0
002205  002444  // Syntax: serin();
002206  002445  // Usage : char := serin();
002207  002446  // Notes : Receives a character from the Serial Port COM0. The transmission format is:
002208  002447  //     : No Parity, 1 Stop Bit, 8 Data Bits (N,8,1).
002209  002448  //     : The default Baud Rate for COM0 is 115,200 bits per second or 115,200 baud.
002210  002449  //     : The baud rate can be changed under program control by using the setbaud(...)
002211  002450  //     : or the com_SetBaud(...) function.
002212  002451  //     : COM0 pins cannot be mapped, and are fixed as pins 42 and 33 (host adaptor / programming)
002213  002452  //     : serin may be buffered (refer to com_Init function above)
002214  002453  //     : Returns: -1 if no character is available
002215  002454  //     : Returns: -2 if a framing error or over-run has occurred (auto cleared)
002216  002455  //     : Returns: positive value 0 to 255 for a valid character received
002217  002456        
002218  002457  func serin1(), 1;
002219  002458  // Syntax: serinx();
002220  002459  // Usage : char := serinx();
002221  002460  // Notes : Receives a character from Serial Port COMx. The transmission format is:
002222  002461  //     : No Parity, 1 Stop Bit, 8 Data Bits (N,8,1).
002223  002462  //     : The default Baud Rate for COM1, COM2 and COM3 is 9600 baud.
002224  002463  //     : The baud rate can be changed under program control by using the com_SetBaud(...) function.
002225  002464  //     : serinx may be buffered (refer to comx_Init function above)
002226  002465  //     : serin RX pins must be mapped before use, (refer to COMx_RX_pin functions above)
002227  002466  //     : Returns: -1 if no character is available
002228  002467  //     : Returns: -2 if a framing error or over-run has occurred (auto cleared)
002229  002468  //     : Returns: positive value 0 to 255 for a valid character received
002230  002469        
002231  002470  func serin2(), 1;
002232  002471  // Syntax: serinx();
002233  002472  // Usage : char := serinx();
002234  002473  // Notes : Receives a character from Serial Port COMx. The transmission format is:
002235  002474  //     : No Parity, 1 Stop Bit, 8 Data Bits (N,8,1).
002236  002475  //     : The default Baud Rate for COM1, COM2 and COM3 is 9600 baud.
002237  002476  //     : The baud rate can be changed under program control by using the com_SetBaud(...) function.
002238  002477  //     : serinx may be buffered (refer to comx_Init function above)
002239  002478  //     : serin RX pins must be mapped before use, (refer to COMx_RX_pin functions above)
002240  002479  //     : Returns: -1 if no character is available
002241  002480  //     : Returns: -2 if a framing error or over-run has occurred (auto cleared)
002242  002481  //     : Returns: positive value 0 to 255 for a valid character received
002243  002482        
002244  002483  func serin3(), 1;
002245  002484  // Syntax: serinx();
002246  002485  // Usage : char := serinx();
002247  002486  // Notes : Receives a character from Serial Port COMx. The transmission format is:
002248  002487  //     : No Parity, 1 Stop Bit, 8 Data Bits (N,8,1).
002249  002488  //     : The default Baud Rate for COM1, COM2 and COM3 is 9600 baud.
002250  002489  //     : The baud rate can be changed under program control by using the com_SetBaud(...) function.
002251  002490  //     : serinx may be buffered (refer to comx_Init function above)
002252  002491  //     : serin RX pins must be mapped before use, (refer to COMx_RX_pin functions above)
002253  002492  //     : Returns: -1 if no character is available
002254  002493  //     : Returns: -2 if a framing error or over-run has occurred (auto cleared)
002255  002494  //     : Returns: positive value 0 to 255 for a valid character received
002256  002495        
002257  002496  func serout("char"), 0;                // write a byte to COM0
002258  002497  // Syntax: serout1("char");
002259  002498  // Usage : serout1(ch);
002260  002499  // Notes : send character to COM0
002261  002500        
002262  002501  func serout1("char"), 0;
002263  002502  // Syntax: seroutx("char");
002264  002503  // Usage : serout1(ch);
002265  002504  // Notes : send character to COMx
002266  002505        
002267  002506  func serout2("char"), 0;
002268  002507  // Syntax: seroutx("char");
002269  002508  // Usage : serout1(ch);
002270  002509  // Notes : send character to COMx
002271  002510        
002272  002511  func serout3("char"), 0;
002273  002512  // Syntax: seroutx("char");
002274  002513  // Usage : serout1(ch);
002275  002514  // Notes : send character to COMx
002276  002515        
002277  002516  func com_Reset(), 0;                 // reset the comms receiver
002278  002517  // Syntax: com_Reset();
002279  002518  // Usage : com_Reset();
002280  002519  // Notes : reset comms to default polled mode
002281  002520        
002282  002521  func com1_Reset(), 0;
002283  002522  // Syntax: com_Reset();
002284  002523  // Usage : com_Reset();
002285  002524  // Notes : reset comms to default polled mode
002286  002525        
002287  002526  func com2_Reset(), 0;
002288  002527  // Syntax: com_Reset();
002289  002528  // Usage : com_Reset();
002290  002529  // Notes : reset comms to default polled mode
002291  002530        
002292  002531  func com3_Reset(), 0;
002293  002532  // Syntax: com_Reset();
002294  002533  // Usage : com_Reset();
002295  002534  // Notes : reset comms to default polled mode
002296  002535        
002297  002536  func com_Count(), 1;                // return count of characters in receive buffer
002298  002537  // Syntax: com_Count();
002299  002538  // Usage : arg := com_Count();
002300  002539  // Notes : return count of buffered characters in buffer attachment
002301  002540        
002302  002541  func com1_Count(), 1;
002303  002542  // Syntax: com_Count();
002304  002543  // Usage : arg := com_Count();
002305  002544  // Notes : return count of buffered characters in buffer attachment
002306  002545        
002307  002546  func com2_Count(), 1;
002308  002547  // Syntax: com_Count();
002309  002548  // Usage : arg := com_Count();
002310  002549  // Notes : return count of buffered characters in buffer attachment
002311  002550        
002312  002551  func com3_Count(), 1;
002313  002552  // Syntax: com_Count();
002314  002553  // Usage : arg := com_Count();
002315  002554  // Notes : return count of buffered characters in buffer attachment
002316  002555        
002317  002556  func com_Full(), 1;                // return TRUE if receiver buffer filled to capcity
002318  002557  // Syntax: com_Full();
002319  002558  // Usage : if (com_Full() ,,,, go read buffer;
002320  002559  // Notes : return true if buffer full (not necessarily an error if
002321  002560  //       : buffer is sized to a packet size)
002322  002561        
002323  002562  func com1_Full(), 1;
002324  002563  // Syntax: com_Full();
002325  002564  // Usage : if (com_Full() ,,,, go read buffer;
002326  002565  // Notes : return true if buffer full (not necessarily an error if
002327  002566  //       : buffer is sized to a packet size)
002328  002567        
002329  002568  func com2_Full(), 1;
002330  002569  // Syntax: com_Full();
002331  002570  // Usage : if (com_Full() ,,,, go read buffer;
002332  002571  // Notes : return true if buffer full (not necessarily an error if
002333  002572  //       : buffer is sized to a packet size)
002334  002573        
002335  002574  func com3_Full(), 1;
002336  002575  // Syntax: com_Full();
002337  002576  // Usage : if (com_Full() ,,,, go read buffer;
002338  002577  // Notes : return true if buffer full (not necessarily an error if
002339  002578  //       : buffer is sized to a packet size)
002340  002579        
002341  002580  func com_Error(), 1;                // return comms errors comms error occurred
002342  002581  // Syntax: comx_Error();
002343  002582  // Usage : if (com_Error() ) ...... take recovery action;
002344  002583  // Notes : return non zero if any errors low level comms errors occured
002345  002584  // returns :
002346  002585  // bit0 = Receiver Overflow Error
002347  002586  // bit1 = Receiver Framing Error
002348  002587  // bit2 = Transmit Buffer Overflow
002349  002588        
002350  002589  func com1_Error(), 1;
002351  002590  // Syntax: comx_Error();
002352  002591  // Usage : if (com_Error() ) ...... take recovery action;
002353  002592  // Notes : return non zero if any errors low level comms errors occured
002354  002593  // returns :
002355  002594  // bit0 = Receiver Overflow Error
002356  002595  // bit1 = Receiver Framing Error
002357  002596  // bit2 = Transmit Buffer Overflow
002358  002597        
002359  002598  func com2_Error(), 1;
002360  002599  // Syntax: comx_Error();
002361  002600  // Usage : if (com_Error() ) ...... take recovery action;
002362  002601  // Notes : return non zero if any errors low level comms errors occured
002363  002602  // returns :
002364  002603  // bit0 = Receiver Overflow Error
002365  002604  // bit1 = Receiver Framing Error
002366  002605  // bit2 = Transmit Buffer Overflow
002367  002606        
002368  002607  func com3_Error(), 1;
002369  002608  // Syntax: comx_Error();
002370  002609  // Usage : if (com_Error() ) ...... take recovery action;
002371  002610  // Notes : return non zero if any errors low level comms errors occured
002372  002611  // returns :
002373  002612  // bit0 = Receiver Overflow Error
002374  002613  // bit1 = Receiver Framing Error
002375  002614  // bit2 = Transmit Buffer Overflow
002376  002615        
002377  002616  func com_Sync(), 1;                // returns TRUE if qualifier has been received
002378  002617  // Usage : comx_Sync();
002379  002618  // return true if sync character has been received in com_Init("...") mode
002380  002619        
002381  002620  func com1_Sync(), 1;
002382  002621  // Usage : comx_Sync();
002383  002622  // return true if sync character has been received in com_Init("...") mode
002384  002623        
002385  002624  func com2_Sync(), 1;
002386  002625  // Usage : comx_Sync();
002387  002626  // return true if sync character has been received in com_Init("...") mode
002388  002627        
002389  002628  func com3_Sync(), 1;
002390  002629  // Usage : comx_Sync();
002391  002630  // return true if sync character has been received in com_Init("...") mode
002392  002631        
002393  002632        
002394  002633  func com_TXbuffer("buf", "bufsize", "pin"), 0;    // sets the buffer location for buffered transmission
002395  002634  // Usage : com_TXbuffer(mybuf, 1024, PA0);    // set the TX buffer, using PA0 for turnaround
002396  002635  // Usage : com_TXbuffer(0, 0, 0);             // revert to non buffered service
002397  002636  // Notes : initialize a serial buffer for the COM0 output.
002398  002637  //       : The program must declare a var array as a circular buffer.
002399  002638  //       : When a TX buffer is declared for comms, the transmission
002400  002639  //       : of characters becomes non blocking. If the buffer has
002401  002640  //       : insufficient space to accept the next character from a
002402  002641  //       : serout_x() function, the excess characters will be ignored,
002403  002642  //       : and the com_Full_x() error will be asserted.   If the
002404  002643  //       : TX buffer is no longer required, just set the buffer pointer
002405  002644  //       : to zero, the size in this case doesnt matter and is ignored.
002406  002645  //       : The function can resize or reallocated to another buffer at
002407  002646  //       : any time. The buffer is flushed before any changes are made.
002408  002647  //       : "pin" designates an IO pin to control a bi-directional
002409  002648  //       : control device for half duplex mode. "pin" will go HI at the
002410  002649  //       : start of a transmission, and will return low after the final
002411  002650  //       : byte is transmitted. If not required, just set "pin" to zero.
002412  002651        
002413  002652  func com1_TXbuffer("buf", "bufsize", "pin"), 0;
002414  002653  // Usage : com1_TXbuffer(mybuf, 1024, PA0);    // set the TX buffer, using PA0 for turnaround
002415  002654  // Usage : com1_TXbuffer(0, 0, 0);              // revert to non buffered service
002416  002655  // Notes : initialize a serial buffer for the COM0 output.
002417  002656  //       : The program must declare a var array as a circular buffer.
002418  002657  //       : When a TX buffer is declared for comms, the transmission
002419  002658  //       : of characters becomes non blocking. If the buffer has
002420  002659  //       : insufficient space to accept the next character from a
002421  002660  //       : serout_x() function, the excess characters will be ignored,
002422  002661  //       : and the com_Full_x() error will be asserted.   If the
002423  002662  //       : TX buffer is no longer required, just set the buffer pointer
002424  002663  //       : to zero, the size in this case doesnt matter and is ignored.
002425  002664  //       : The function can resize or reallocated to another buffer at
002426  002665  //       : any time. The buffer is flushed before any changes are made.
002427  002666  //       : "pin" designates an IO pin to control a bi-directional
002428  002667  //       : control device for half duplex mode. "pin" will go HI at the
002429  002668  //       : start of a transmission, and will return low after the final
002430  002669  //       : byte is transmitted. If not required, just set "pin" to zero.
002431  002670        
002432  002671  func com2_TXbuffer("buf", "bufsize", "pin"), 0;
002433  002672  // Usage : com2_TXbuffer(mybuf, 1024, PA0);    // set the TX buffer, using PA0 for turnaround
002434  002673  // Usage : com2_TXbuffer(0, 0, 0);              // revert to non buffered service
002435  002674  // Notes : initialize a serial buffer for the COM0 output.
002436  002675  //       : The program must declare a var array as a circular buffer.
002437  002676  //       : When a TX buffer is declared for comms, the transmission
002438  002677  //       : of characters becomes non blocking. If the buffer has
002439  002678  //       : insufficient space to accept the next character from a
002440  002679  //       : serout_x() function, the excess characters will be ignored,
002441  002680  //       : and the com_Full_x() error will be asserted.   If the
002442  002681  //       : TX buffer is no longer required, just set the buffer pointer
002443  002682  //       : to zero, the size in this case doesnt matter and is ignored.
002444  002683  //       : The function can resize or reallocated to another buffer at
002445  002684  //       : any time. The buffer is flushed before any changes are made.
002446  002685  //       : "pin" designates an IO pin to control a bi-directional
002447  002686  //       : control device for half duplex mode. "pin" will go HI at the
002448  002687  //       : start of a transmission, and will return low after the final
002449  002688  //       : byte is transmitted. If not required, just set "pin" to zero.
002450  002689        
002451  002690  func com3_TXbuffer("buf", "bufsize", "pin"), 0;
002452  002691  // Usage : com3_TXbuffer(mybuf, 1024, PA0);    // set the TX buffer, using PA0 for turnaround
002453  002692  // Usage : com3_TXbuffer(0, 0, 0);              // revert to non buffered service
002454  002693  // Notes : initialize a serial buffer for the COM0 output.
002455  002694  //       : The program must declare a var array as a circular buffer.
002456  002695  //       : When a TX buffer is declared for comms, the transmission
002457  002696  //       : of characters becomes non blocking. If the buffer has
002458  002697  //       : insufficient space to accept the next character from a
002459  002698  //       : serout_x() function, the excess characters will be ignored,
002460  002699  //       : and the com_Full_x() error will be asserted.   If the
002461  002700  //       : TX buffer is no longer required, just set the buffer pointer
002462  002701  //       : to zero, the size in this case doesnt matter and is ignored.
002463  002702  //       : The function can resize or reallocated to another buffer at
002464  002703  //       : any time. The buffer is flushed before any changes are made.
002465  002704  //       : "pin" designates an IO pin to control a bi-directional
002466  002705  //       : control device for half duplex mode. "pin" will go HI at the
002467  002706  //       : start of a transmission, and will return low after the final
002468  002707  //       : byte is transmitted. If not required, just set "pin" to zero.
002469  002708        
002470  002709        
002471  002710  func com_TXcount(), 1;                // return count of characters in COM0 TX buffer
002472  002711  // Syntax: com_TXcount();
002473  002712  // Usage : arg := com_Count();
002474  002713  // Notes : return count of characters remaining in COM0 transmit buffer
002475  002714  //       : that was previously allocated with com_TXbuffer(...);
002476  002715        
002477  002716  func com1_TXcount(), 1;
002478  002717  // Syntax: com_TXcount();
002479  002718  // Usage : arg := com_Count();
002480  002719  // Notes : return count of characters remaining in COM0 transmit buffer
002481  002720  //       : that was previously allocated with com_TXbuffer(...);
002482  002721        
002483  002722  func com2_TXcount(), 1;
002484  002723  // Syntax: com_TXcount();
002485  002724  // Usage : arg := com_Count();
002486  002725  // Notes : return count of characters remaining in COM0 transmit buffer
002487  002726  //       : that was previously allocated with com_TXbuffer(...);
002488  002727        
002489  002728  func com3_TXcount(), 1;
002490  002729  // Syntax: com_TXcount();
002491  002730  // Usage : arg := com_Count();
002492  002731  // Notes : return count of characters remaining in COM0 transmit buffer
002493  002732  //       : that was previously allocated with com_TXbuffer(...);
002494  002733        
002495  002734  func com_TXemptyEvent("function"), 1;  // sets a function to be called when COM0 TX buffer empty
002496  002735  // Usage : arg := com_TXemptyEvent();
002497  002736  // Notes : If a comms TX buffer that was previously allocated with
002498  002737  //       : com_TXbuffer(...);, this function can be used to set up
002499  002738  //       : a function to be called when the COM0 TX buffer is empty.
002500  002739  //       : This is useful for either reloading the TX buffer, setting
002501  002740  //       : or clearing a pin to change the direction of eg a RS485
002502  002741  //       : line driver, or any other form of traffic control.
002503  002742  //       : The event function must not have any parameters.
002504  002743  //       : To disable the event, simply call com_TXemptyEvent(0).
002505  002744  //       : com_TXbuffer(...); also resets any active event.
002506  002745  //       : com_TXemptyEvent returns any previous event function
002507  002746  //       : address, or zero if there was no previous function.
002508  002747        
002509  002748  func com1_TXemptyEvent("function"), 1;
002510  002749  // Usage : arg := com1_TXemptyEvent();
002511  002750  // Notes : If a comms TX buffer that was previously allocated with
002512  002751  //       : com_TXbuffer(...);, this function can be used to set up
002513  002752  //       : a function to be called when the COM0 TX buffer is empty.
002514  002753  //       : This is useful for either reloading the TX buffer, setting
002515  002754  //       : or clearing a pin to change the direction of eg a RS485
002516  002755  //       : line driver, or any other form of traffic control.
002517  002756  //       : The event function must not have any parameters.
002518  002757  //       : To disable the event, simply call com_TXemptyEvent(0).
002519  002758  //       : com_TXbuffer(...); also resets any active event.
002520  002759  //       : com_TXemptyEvent returns any previous event function
002521  002760  //       : address, or zero if there was no previous function.
002522  002761        
002523  002762  func com2_TXemptyEvent("function"), 1;
002524  002763  // Usage : arg := com2_TXemptyEvent();
002525  002764  // Notes : If a comms TX buffer that was previously allocated with
002526  002765  //       : com_TXbuffer(...);, this function can be used to set up
002527  002766  //       : a function to be called when the COM0 TX buffer is empty.
002528  002767  //       : This is useful for either reloading the TX buffer, setting
002529  002768  //       : or clearing a pin to change the direction of eg a RS485
002530  002769  //       : line driver, or any other form of traffic control.
002531  002770  //       : The event function must not have any parameters.
002532  002771  //       : To disable the event, simply call com_TXemptyEvent(0).
002533  002772  //       : com_TXbuffer(...); also resets any active event.
002534  002773  //       : com_TXemptyEvent returns any previous event function
002535  002774  //       : address, or zero if there was no previous function.
002536  002775        
002537  002776  func com3_TXemptyEvent("function"), 1;
002538  002777  // Usage : arg := com3_TXemptyEvent();
002539  002778  // Notes : If a comms TX buffer that was previously allocated with
002540  002779  //       : com_TXbuffer(...);, this function can be used to set up
002541  002780  //       : a function to be called when the COM0 TX buffer is empty.
002542  002781  //       : This is useful for either reloading the TX buffer, setting
002543  002782  //       : or clearing a pin to change the direction of eg a RS485
002544  002783  //       : line driver, or any other form of traffic control.
002545  002784  //       : The event function must not have any parameters.
002546  002785  //       : To disable the event, simply call com_TXemptyEvent(0).
002547  002786  //       : com_TXbuffer(...); also resets any active event.
002548  002787  //       : com_TXemptyEvent returns any previous event function
002549  002788  //       : address, or zero if there was no previous function.
002550  002789        
002551  002790  func com_TXbufferHold("state"), 1; // hold or release a com_TXbuffer
002552  002791  // Usage : arg := com_TXbufferHold(OFF);  // start sending the buffer
002553  002792  // Notes : Expecting that a comms TX buffer that was previously allocated with
002554  002793  //       : com_TXbuffer(...);, com_TXbufferHold(ON) can be used to stop
002555  002794  //       : the buffer being sent wile it is being loaded. Mormally, when
002556  002795  //       : using buffered comms, the transmit process will begin
002557  002796  //       : immediately. This is often undesirable for 2 reasons,
002558  002797  //       : 1] you may wish to build a packet then send it later
002559  002798  //       : 2] when using com_TXemptyEvent erroneous empty events will occur
002560  002799  //       : as the FIFO buffer is constantly trying to empty while
002561  002800  //       : you are busy tring to fill it.
002562  002801  // return -1 if function is called illegally when TX comms is not buffered.
002563  002802  // return buffer count when called with argument of 1, eg com_TXbufferHold(ON)
002564  002803  // return 0 when argument is zero, eg com_TXbufferHold(OFF)
002565  002804        
002566  002805  func com1_TXbufferHold("state"), 1;
002567  002806  // Usage : arg := com1_TXbufferHold(OFF);  // start sending the buffer
002568  002807  // Notes : Expecting that a comms TX buffer that was previously allocated with
002569  002808  //       : com_TXbuffer(...);, com_TXbufferHold(ON) can be used to stop
002570  002809  //       : the buffer being sent wile it is being loaded. Mormally, when
002571  002810  //       : using buffered comms, the transmit process will begin
002572  002811  //       : immediately. This is often undesirable for 2 reasons,
002573  002812  //       : 1] you may wish to build a packet then send it later
002574  002813  //       : 2] when using com_TXemptyEvent erroneous empty events will occur
002575  002814  //       : as the FIFO buffer is constantly trying to empty while
002576  002815  //       : you are busy tring to fill it.
002577  002816  // return -1 if function is called illegally when TX comms is not buffered.
002578  002817  // return buffer count when called with argument of 1, eg com_TXbufferHold(ON)
002579  002818  // return 0 when argument is zero, eg com_TXbufferHold(OFF)
002580  002819        
002581  002820  func com2_TXbufferHold("state"), 1;
002582  002821  // Usage : arg := com2_TXbufferHold(OFF);  // start sending the buffer
002583  002822  // Notes : Expecting that a comms TX buffer that was previously allocated with
002584  002823  //       : com_TXbuffer(...);, com_TXbufferHold(ON) can be used to stop
002585  002824  //       : the buffer being sent wile it is being loaded. Mormally, when
002586  002825  //       : using buffered comms, the transmit process will begin
002587  002826  //       : immediately. This is often undesirable for 2 reasons,
002588  002827  //       : 1] you may wish to build a packet then send it later
002589  002828  //       : 2] when using com_TXemptyEvent erroneous empty events will occur
002590  002829  //       : as the FIFO buffer is constantly trying to empty while
002591  002830  //       : you are busy tring to fill it.
002592  002831  // return -1 if function is called illegally when TX comms is not buffered.
002593  002832  // return buffer count when called with argument of 1, eg com_TXbufferHold(ON)
002594  002833  // return 0 when argument is zero, eg com_TXbufferHold(OFF)
002595  002834        
002596  002835  func com3_TXbufferHold("state"), 1;
002597  002836  // Usage : arg := com3_TXbufferHold(OFF);  // start sending the buffer
002598  002837  // Notes : Expecting that a comms TX buffer that was previously allocated with
002599  002838  //       : com_TXbuffer(...);, com_TXbufferHold(ON) can be used to stop
002600  002839  //       : the buffer being sent wile it is being loaded. Mormally, when
002601  002840  //       : using buffered comms, the transmit process will begin
002602  002841  //       : immediately. This is often undesirable for 2 reasons,
002603  002842  //       : 1] you may wish to build a packet then send it later
002604  002843  //       : 2] when using com_TXemptyEvent erroneous empty events will occur
002605  002844  //       : as the FIFO buffer is constantly trying to empty while
002606  002845  //       : you are busy tring to fill it.
002607  002846  // return -1 if function is called illegally when TX comms is not buffered.
002608  002847  // return buffer count when called with argument of 1, eg com_TXbufferHold(ON)
002609  002848  // return 0 when argument is zero, eg com_TXbufferHold(OFF)
002610  002849        
002611  002850  func com_Mode("8" ,"N", "1", "comport"), 1 ;
002612  002851  // Syntax   : comx_Mode("databits", "parity", "Stopbits", "comport");
002613  002852  // Usage    : comx_Mode(8, 'N', 1, COM0);                        // set COM0 to 8N1
002614  002853  // *Notes   : Data Bits must be 8
002615  002854  //          : Parity may be 'N', 'O' or 'E'.
002616  002855  //          : Stop Bits may be 1 or 2.
002617  002856  // returns true if mode was acceptable
002618  002857        
002619  002858  func com_TXblock("buf", "bufsize"), 0;                       // commence a block transmission
002620  002859  // Syntax   : com_TXblock("buf", "bufsize");
002621  002860  // Usage    : com_TXblock(mybuf, 30);                         // point to the TX buffer and send 30 character
002622  002861  // *Notes   : Bufsize bytes are transmitted to the serial port from the string pointer "buf".
002623  002862  //          : if a transmit buffer is active and space is available this function will return almost
002624  002863  //          : immediately otherwise it will block until until the space is available, or the data is transmitted.
002625  002864        
002626  002865  func com_RXblock("buf", "bufsize"), 0;                       // commence a block reception
002627  002866  // Syntax   : com_RXblock("buf", "bufsize");
002628  002867  // Usage    : com_RXblock(mybuf, 30);                        // point to the RX buffer and receive 30 character
002629  002868  // *Notes   : Bufsize bytes are received from the serial port to the string pointer "buf".
002630  002869  //          : if a receive buffer is active and bufsize characters are available this function will return almost
002631  002870  //          : immediately otherwise it will block until until the required bytes are received.
002632  002871        
002633  002872  func __reserved30(), 0; // do not remove
002634  002873        
002635  002874  //------------------------------------------------------------------//
002636  002875  //        Function Prototypes for I2C
002637  002876  //------------------------------------------------------------------//
002638  002877  func I2C1_Open("speed", "SCLpin", "SDApin"), 1;
002639  002878  // Syntax : I2C1_Openx(speed, SCLpin, SDApin),
002640  002879  // Usage  : I2C1_Open(I2C_MED, PA2, PA3);
002641  002880  // Notes  : configures the required I2C module
002642  002881  //        : see 'I2C timing related constants' and 'pin constants'
002643  002882  //        : Pins that can be mapped to SCLpin and SDApin are PA0 to PA13
002644  002883  //        : Pins that can't be mapped to SCLpin or SDApin are PA14 and PA15
002645  002884  //        : For I2C speeds of I2C_MED and I2C_FAST SCLpin may be PA14 and SDApin may be PA15
002646  002885  //        : This is a 'special case' to support Slew rate control for I2C_MED and also properly support I2C_FAST
002647  002886  //        : For other pin combinations I2C_MED does not support Slew rate control and I2C_FAST does not fully run at 1Mhz
002648  002887  // Returns: True if successful
002649  002888        
002650  002889        
002651  002890  func I2C2_Open("speed", "SCLpin", "SDApin"), 1;
002652  002891  // Syntax : I2C2_Openx(speed, SCLpin, SDApin),
002653  002892  // Usage  : I2C2_Open(I2C_MED, PA2, PA3);
002654  002893  // Notes  : configures the required I2C module
002655  002894  //        : see 'I2C timing related constants' and 'pin constants'
002656  002895  //        : Pins that can be mapped to SCLpin and SDApin are PA0 to PA13
002657  002896  //        : Pins that can't be mapped to SCLpin or SDApin are PA14 and PA15
002658  002897  //        : For I2C speeds of I2C_MED and I2C_FAST SCLpin may be PA14 and SDApin may be PA15
002659  002898  //        : This is a 'special case' to support Slew rate control for I2C_MED and also properly support I2C_FAST
002660  002899  //        : For other pin combinations I2C_MED does not support Slew rate control and I2C_FAST does not fully run at 1Mhz
002661  002900  // Returns: True if successful
002662  002901        
002663  002902        
002664  002903  func I2C3_Open("speed", "SCLpin", "SDApin"), 1;
002665  002904  // Syntax : I2C3_Openx(speed, SCLpin, SDApin),
002666  002905  // Usage  : I2C3_Open(I2C_MED, PA2, PA3);
002667  002906  // Notes  : configures the required I2C module
002668  002907  //        : see 'I2C timing related constants' and 'pin constants'
002669  002908  //        : Pins that can be mapped to SCLpin and SDApin are PA0 to PA13
002670  002909  //        : Pins that can't be mapped to SCLpin or SDApin are PA14 and PA15
002671  002910  //        : For I2C speeds of I2C_MED and I2C_FAST SCLpin may be PA14 and SDApin may be PA15
002672  002911  //        : This is a 'special case' to support Slew rate control for I2C_MED and also properly support I2C_FAST
002673  002912  //        : For other pin combinations I2C_MED does not support Slew rate control and I2C_FAST does not fully run at 1Mhz
002674  002913  // Returns: True if successful
002675  002914        
002676  002915        
002677  002916  func I2C1_Close(), 0;
002678  002917  // Usage : I2C1_Close();
002679  002918  // Notes : disables the I2C1 module.
002680  002919        
002681  002920  func I2C2_Close(), 0;
002682  002921  // Usage : I2C2_Close();
002683  002922  // Notes : disables the I2C2 module.
002684  002923        
002685  002924  func I2C3_Close(), 0;
002686  002925  // Usage : I2C3_Close();
002687  002926  // Notes : disables the I2C3 module.
002688  002927        
002689  002928  func I2C1_Start(), 1;
002690  002929  // Syntax: I2C1_Start();
002691  002930  // Usage : I2C1_Start();
002692  002931  // Notes : generates a Start condition.
002693  002932  //       : returns true if successful (usually ignored)
002694  002933        
002695  002934  func I2C2_Start(), 1;
002696  002935  // Syntax: I2C2_Start();
002697  002936  // Usage : I2C2_Start();
002698  002937  // Notes : generates a Start condition.
002699  002938  //       : returns true if successful (usually ignored)
002700  002939        
002701  002940  func I2C3_Start(), 1;
002702  002941  // Syntax: I2C3_Start();
002703  002942  // Usage : I2C3_Start();
002704  002943  // Notes : generates a Start condition.
002705  002944  //       : returns true if successful (usually ignored)
002706  002945        
002707  002946  func I2C1_Stop(), 1;
002708  002947  // Syntax: I2C1_Stop();
002709  002948  // Usage : I2C1_Stop();
002710  002949  // Notes : generates a Stop condition.
002711  002950  //       : returns true if successful (usually ignored)
002712  002951        
002713  002952  func I2C2_Stop(), 1;
002714  002953  // Syntax: I2C2_Stop();
002715  002954  // Usage : I2C2_Stop();
002716  002955  // Notes : generates a Stop condition.
002717  002956  //       : returns true if successful (usually ignored)
002718  002957        
002719  002958  func I2C3_Stop(), 1;
002720  002959  // Syntax: I2C3_Stop();
002721  002960  // Usage : I2C3_Stop();
002722  002961  // Notes : generates a Stop condition.
002723  002962  //       : returns true if successful (usually ignored)
002724  002963        
002725  002964  func I2C1_Restart(), 1;
002726  002965  // Syntax: I2C1_Restart();
002727  002966  // Usage : I2C1_Restart();
002728  002967  // Notes : generates a Restart condition.
002729  002968  //       : returns true if successful (usually ignored)
002730  002969        
002731  002970  func I2C2_Restart(), 1;
002732  002971  // Syntax: I2C2_Restart();
002733  002972  // Usage : I2C2_Restart();
002734  002973  // Notes : generates a Restart condition.
002735  002974  //       : returns true if successful (usually ignored)
002736  002975        
002737  002976  func I2C3_Restart(), 1;
002738  002977  // Syntax: I2C3_Restart();
002739  002978  // Usage : I2C3_Restart();
002740  002979  // Notes : generates a Restart condition.
002741  002980  //       : returns true if successful (usually ignored)
002742  002981        
002743  002982  func I2C1_Read(), 1;
002744  002983  // Syntax: I2C1_Read();
002745  002984  // Usage : ch := I2C1_Read();
002746  002985  // Notes : reads a single byte from the I2C Bus.
002747  002986        
002748  002987  func I2C2_Read(), 1;
002749  002988  // Syntax: I2C2_Read();
002750  002989  // Usage : ch := I2C2_Read();
002751  002990  // Notes : reads a single byte from the I2C Bus.
002752  002991        
002753  002992  func I2C3_Read(), 1;
002754  002993  // Syntax: I2C3_Read();
002755  002994  // Usage : ch := I2C3_Read();
002756  002995  // Notes : reads a single byte from the I2C Bus.
002757  002996        
002758  002997  func I2C1_Write("byte"), 1;
002759  002998  // Syntax: I2C1_Write(byte);
002760  002999  // Usage : r := I2C1_Write(ch);
002761  003000  // Notes : is used to write a byte to the I2C bus.
002762  003001  //       : Returns 0 if failed, 1 if no ack, 2 if ack
002763  003002        
002764  003003  func I2C2_Write("byte"), 1;
002765  003004  // Syntax: I2C2_Write(byte);
002766  003005  // Usage : r := I2C2_Write(ch);
002767  003006  // Notes : is used to write a byte to the I2C bus.
002768  003007  //       : Returns 0 if failed, 1 if no ack, 2 if ack
002769  003008        
002770  003009  func I2C3_Write("byte"), 1;
002771  003010  // Syntax: I2C3_Write(byte);
002772  003011  // Usage : r := I2C3_Write(ch);
002773  003012  // Notes : is used to write a byte to the I2C bus.
002774  003013  //       : Returns 0 if failed, 1 if no ack, 2 if ack
002775  003014        
002776  003015  func I2C1_Ack(), 0;
002777  003016  // Syntax: I2C1_Ack();
002778  003017  // Usage : I2C1_Ack();
002779  003018  // Notes : generates the acknowledge condition.
002780  003019        
002781  003020  func I2C2_Ack(), 0;
002782  003021  // Syntax: I2C2_Ack();
002783  003022  // Usage : I2C2_Ack();
002784  003023  // Notes : generates the acknowledge condition.
002785  003024        
002786  003025  func I2C3_Ack(), 0;
002787  003026  // Syntax: I2C3_Ack();
002788  003027  // Usage : I2C3_Ack();
002789  003028  // Notes : generates the acknowledge condition.
002790  003029        
002791  003030  func I2C1_Nack(), 0;
002792  003031  // Syntax: I2C1_Nack();
002793  003032  // Usage : I2C1_Nack();
002794  003033  // Notes : generates the negative acknowledge condition.
002795  003034        
002796  003035  func I2C2_Nack(), 0;
002797  003036  // Syntax: I2C2_Nack();
002798  003037  // Usage : I2C2_Nack();
002799  003038  // Notes : generates the negative acknowledge condition.
002800  003039        
002801  003040  func I2C3_Nack(), 0;
002802  003041  // Syntax: I2C3_Nack();
002803  003042  // Usage : I2C3_Nack();
002804  003043  // Notes : generates the negative acknowledge condition.
002805  003044        
002806  003045  func I2C1_AckStatus(), 1;
002807  003046  // Syntax: I2C1_AckStatus();
002808  003047  // Usage : r := I2C1_AckStatus();
002809  003048  // Notes : returns the ACK status from the device.
002810  003049        
002811  003050  func I2C2_AckStatus(), 1;
002812  003051  // Syntax: I2C2_AckStatus();
002813  003052  // Usage : r := I2C2_AckStatus();
002814  003053  // Notes : returns the ACK status from the device.
002815  003054        
002816  003055  func I2C3_AckStatus(), 1;
002817  003056  // Syntax: I2C3_AckStatus();
002818  003057  // Usage : r := I2C3_AckStatus();
002819  003058  // Notes : returns the ACK status from the device.
002820  003059        
002821  003060  func I2C1_AckPoll("control"), 1;
002822  003061  // Syntax: I2C1_AckPoll();
002823  003062  // Usage : r := I2C1_AckPoll(0xA0);
002824  003063  // Notes : waits for a device to return from ACK polling.
002825  003064        
002826  003065  func I2C2_AckPoll("control"), 1;
002827  003066  // Syntax: I2C2_AckPoll();
002828  003067  // Usage : r := I2C2_AckPoll(0xA0);
002829  003068  // Notes : waits for a device to return from ACK polling.
002830  003069        
002831  003070  func I2C3_AckPoll("control"), 1;
002832  003071  // Syntax: I2C3_AckPoll();
002833  003072  // Usage : r := I2C3_AckPoll(0xA0);
002834  003073  // Notes : waits for a device to return from ACK polling.
002835  003074        
002836  003075  func I2C1_Idle(), 1;
002837  003076  // Syntax : I2C1_Idle();
002838  003077  // Usage  : r := I2C1_Idle();
002839  003078  // Notes  : waits until the I2C Bus is Inactive.
002840  003079  //        : Times out if bus not idle within 1 second
002841  003080  // Returns: TRUE if successful, else failed (timed out)
002842  003081        
002843  003082  func I2C2_Idle(), 1;
002844  003083  // Syntax : I2C2_Idle();
002845  003084  // Usage  : r := I2C2_Idle();
002846  003085  // Notes  : waits until the I2C Bus is Inactive.
002847  003086  //        : Times out if bus not idle within 1 second
002848  003087  // Returns: TRUE if successful, else failed (timed out)
002849  003088        
002850  003089  func I2C3_Idle(), 1;
002851  003090  // Syntax : I2C3_Idle();
002852  003091  // Usage  : r := I2C3_Idle();
002853  003092  // Notes  : waits until the I2C Bus is Inactive.
002854  003093  //        : Times out if bus not idle within 1 second
002855  003094  // Returns: TRUE if successful, else failed (timed out)
002856  003095        
002857  003096        
002858  003097  func I2C1_Gets("buffer", "size"), 1;
002859  003098  // Syntax: I2C1_Gets("buffer", "size");
002860  003099  // Usage : r := I2C1_Gets(mybuf, 16);
002861  003100  // Notes : only reads up to "size" characters into "buffer"
002862  003101  //       : Reads up to asciiz terminator including terminator
002863  003102        
002864  003103  func I2C2_Gets("buffer", "size"), 1;
002865  003104  // Syntax: I2C2_Gets("buffer", "size");
002866  003105  // Usage : r := I2C2_Gets(mybuf, 16);
002867  003106  // Notes : only reads up to "size" characters into "buffer"
002868  003107  //       : Reads up to asciiz terminator including terminator
002869  003108        
002870  003109  func I2C3_Gets("buffer", "size"), 1;
002871  003110  // Syntax: I2C3_Gets("buffer", "size");
002872  003111  // Usage : r := I2C3_Gets(mybuf, 16);
002873  003112  // Notes : only reads up to "size" characters into "buffer"
002874  003113  //       : Reads up to asciiz terminator including terminator
002875  003114        
002876  003115  func I2C1_Getn("buffer", "size"), 1;
002877  003116  // Syntax: I2C1_Gets("buffer", "size");
002878  003117  // Usage : r := I2C1_Gets(mybuf, 16);
002879  003118  // Notes : reads "size" bytes into "buffer"
002880  003119  //       :
002881  003120        
002882  003121  func I2C2_Getn("buffer", "size"), 1;
002883  003122  // Syntax: I2C2_Gets("buffer", "size");
002884  003123  // Usage : r := I2C2_Gets(mybuf, 16);
002885  003124  // Notes : reads "size" bytes into "buffer"
002886  003125  //       :
002887  003126        
002888  003127  func I2C3_Getn("buffer", "size"), 1;
002889  003128  // Syntax: I2C3_Gets("buffer", "size");
002890  003129  // Usage : r := I2C3_Gets(mybuf, 16);
002891  003130  // Notes : reads "size" bytes into "buffer"
002892  003131  //       :
002893  003132        
002894  003133  func I2C1_Puts("buffer"), 1;
002895  003134  // Syntax: I2C1_Puts("buffer");
002896  003135  // Usage : r := I2C1_Puts(mybuf);
002897  003136  // Notes : writes an asciiz string to the I2C device
002898  003137  //       : returns count of characters written
002899  003138        
002900  003139  func I2C2_Puts("buffer"), 1;
002901  003140  // Syntax: I2C2_Puts("buffer");
002902  003141  // Usage : r := I2C2_Puts(mybuf);
002903  003142  // Notes : writes an asciiz string to the I2C device
002904  003143  //       : returns count of characters written
002905  003144        
002906  003145  func I2C3_Puts("buffer"), 1;
002907  003146  // Syntax: I2C3_Puts("buffer");
002908  003147  // Usage : r := I2C3_Puts(mybuf);
002909  003148  // Notes : writes an asciiz string to the I2C device
002910  003149  //       : returns count of characters written
002911  003150        
002912  003151  func I2C1_Putn("buffer", "count"), 1;
002913  003152  // Syntax: I2C1_Putn("buffer","count");
002914  003153  // Usage : r := I2C1_Puts(mybuf,10);
002915  003154  // Notes : writes up to "size" bytes to the I2C device
002916  003155  //       : returns number of bytes written
002917  003156        
002918  003157  func I2C2_Putn("buffer", "count"), 1;
002919  003158  // Syntax: I2C2_Putn("buffer","count");
002920  003159  // Usage : r := I2C2_Puts(mybuf,10);
002921  003160  // Notes : writes up to "size" bytes to the I2C device
002922  003161  //       : returns number of bytes written
002923  003162        
002924  003163  func I2C3_Putn("buffer", "count"), 1;
002925  003164  // Syntax: I2C3_Putn("buffer","count");
002926  003165  // Usage : r := I2C3_Puts(mybuf,10);
002927  003166  // Notes : writes up to "size" bytes to the I2C device
002928  003167  //       : returns number of bytes written
002929  003168        
002930  003169        
002931  003170  func spi_ReadBlock("buf", "bufsize"), 0;                       // commence a block reception
002932  003171  // Syntax   : spi_ReadBlock("buf", "bufsize");
002933  003172  // Usage    : spi_ReadBlock(mybuf, 30);                        // point to the buffer and read 30 characters
002934  003173  // *Notes   : Bufsize bytes are read from the SPI port to the string pointer "buf".
002935  003174        
002936  003175  func spi1_ReadBlock("buf", "bufsize"), 0;                       // commence a block reception
002937  003176  // Syntax   : spi1_ReadBlock("buf", "bufsize");
002938  003177  // Usage    : spi1_ReadBlock(mybuf, 30);                        // point to the buffer and read 30 characters
002939  003178  // *Notes   : Bufsize bytes are read from the SPI port to the string pointer "buf".
002940  003179        
002941  003180  func spi2_ReadBlock("buf", "bufsize"), 0;                       // commence a block reception
002942  003181  // Syntax   : spi2_ReadBlock("buf", "bufsize");
002943  003182  // Usage    : spi2_ReadBlock(mybuf, 30);                        // point to the buffer and read 30 characters
002944  003183  // *Notes   : Bufsize bytes are read from the SPI port to the string pointer "buf".
002945  003184        
002946  003185  func spi3_ReadBlock("buf", "bufsize"), 0;                       // commence a block reception
002947  003186  // Syntax   : spi3_ReadBlock("buf", "bufsize");
002948  003187  // Usage    : spi3_ReadBlock(mybuf, 30);                        // point to the buffer and read 30 characters
002949  003188  // *Notes   : Bufsize bytes are read from the SPI port to the string pointer "buf".
002950  003189        
002951  003190  // I2C timing related constants
002952  003191  #CONST
002953  003199  #END
002954  003200        
002955  003201        
002956  003202        
002957  003203  //------------------------------------------------------------------//
002958  003204  // Direct uSD (SPI0) card SPI functions                             //
002959  003205  //------------------------------------------------------------------//
002960  003206  func spi_Init("speed","ip_mode","op_mode"), 0;  // set the SPI port, not used if uSD active
002961  003207  func spi_Read(), 1;                             // read a raw byte from SPI (lowers CS)
002962  003208  func spi_Write("byte"), 0;                      // write a raw byte to SPI (lowers CS)
002963  003209  func spi_Disable(), 0;                          // disable SPI reading or writing (raise CS)
002964  003210                                                  //
002965  003211        
002966  003212  //------------------------------------------------------------------//
002967  003213  // Function prototypes for SPI1, SPI2 and SPI3                      //
002968  003214  //------------------------------------------------------------------//
002969  003215  func SPI1_SDO_pin("pin"), 1;                // select the hardware pin for SPI1 transmit line
002970  003216  // Syntax: SPI_SDO_pin(pin);
002971  003217  // Usage : SPI_SDO_pin(PA1); // set SPI SDO to PA1 pin
002972  003218  // Notes : Select the hardware pin for SPIx transmit line.
002973  003219  //       : Note that multiple pins can be connected simmultaneously.
002974  003220  //       : Pins that can be mapped to SPIx TX are PA1, PA3 to PA9, PA12 or PA13
002975  003221  //       : Pins that can't be mapped to SPIx SDO are PA0, PA2, PA10, PA11, PA14 and PA15
002976  003222  //       : If the pin argument is 0, SPIx SDO is disconnected from all pins.
002977  003223  //       : The pin is automatically set to an output.
002978  003224  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002979  003225        
002980  003226  func SPI2_SDO_pin("pin"), 1;                // select the hardware pin for SPI2 transmit line
002981  003227  // Syntax: SPI2_SDO_pin(pin);
002982  003228  // Usage : SPI2_SDO_pin(PA1); // set SPI2 SDO to PA1 pin
002983  003229  // Notes : Select the hardware pin for SPIx transmit line.
002984  003230  //       : Note that multiple pins can be connected simmultaneously.
002985  003231  //       : Pins that can be mapped to SPIx TX are PA1, PA3 to PA9, PA12 or PA13
002986  003232  //       : Pins that can't be mapped to SPIx SDO are PA0, PA2, PA10, PA11, PA14 and PA15
002987  003233  //       : If the pin argument is 0, SPIx SDO is disconnected from all pins.
002988  003234  //       : The pin is automatically set to an output.
002989  003235  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002990  003236        
002991  003237  func SPI3_SDO_pin("pin"), 1;                // select the hardware pin for SPI3 transmit line
002992  003238  // Syntax: SPI3_SDO_pin(pin);
002993  003239  // Usage : SPI3_SDO_pin(PA1); // set SPI3 SDO to PA1 pin
002994  003240  // Notes : Select the hardware pin for SPIx transmit line.
002995  003241  //       : Note that multiple pins can be connected simmultaneously.
002996  003242  //       : Pins that can be mapped to SPIx TX are PA1, PA3 to PA9, PA12 or PA13
002997  003243  //       : Pins that can't be mapped to SPIx SDO are PA0, PA2, PA10, PA11, PA14 and PA15
002998  003244  //       : If the pin argument is 0, SPIx SDO is disconnected from all pins.
002999  003245  //       : The pin is automatically set to an output.
003000  003246  //       : Returns: Returns TRUE if function succeeded (usually ignored)
003001  003247        
003002  003248  func SPI1_SDI_pin("pin"), 1;                // select the hardware pin for SPI1 receive line
003003  003249  // Syntax: SPI1_SDI_pin(pin);
003004  003250  // Usage : SPI1_SDI_pin(PA3); // set SPI1 SDI to PA3 pin
003005  003251  // Notes : Selects the hardware pin for SPIx receive line.
003006  003252  //       : Note that only a single pin can be mapped to SPI SDI.
003007  003253  //       : Pins that can be mapped to SPIx SDI are PA0 to PA13
003008  003254  //       : Pins that can't be mapped to SPIx SDI are PA14 and PA15
003009  003255  //       : If the pin argument is 0 the function has no effect
003010  003256  //       : The pin is automatically set to an input.
003011  003257  //       : If the SPIx SDI pin is set to same pin as SPIx SDO pin (eg for a loopback check)
003012  003258  //       : it is necessary to configure the SDI pin first, eg
003013  003259  //       :     SPI1_SDI_pin(PA3);     // configure SPI1 SDI to PA3 (this disconnects anything else)
003014  003260  //       :     SPI1_SDO_pin(PA3));    // configure SPI1 SDO to PA3
003015  003261  //       : Returns: Returns TRUE if function succeeded (usually ignored)
003016  003262        
003017  003263  func SPI2_SDI_pin("pin"), 1;                // select the hardware pin for SPI2 receive line
003018  003264  // Syntax: SPI2_SDI_pin(pin);
003019  003265  // Usage : SPI2_SDI_pin(PA3); // set SPI2 SDI to PA3 pin
003020  003266  // Notes : Selects the hardware pin for SPIx receive line.
003021  003267  //       : Note that only a single pin can be mapped to SPI SDI.
003022  003268  //       : Pins that can be mapped to SPIx SDI are PA0 to PA13
003023  003269  //       : Pins that can't be mapped to SPIx SDI are PA14 and PA15
003024  003270  //       : If the pin argument is 0 the function has no effect
003025  003271  //       : The pin is automatically set to an input.
003026  003272  //       : If the SPIx SDI pin is set to same pin as SPIx SDO pin (eg for a loopback check)
003027  003273  //       : it is necessary to configure the SDI pin first, eg
003028  003274  //       :     SPI2_SDI_pin(PA3);     // configure SPI2 SDI to PA3 (this disconnects anything else)
003029  003275  //       :     SPI2_SDO_pin(PA3));    // configure SPI2 SDO to PA3
003030  003276  //       : Returns: Returns TRUE if function succeeded (usually ignored)
003031  003277        
003032  003278  func SPI3_SDI_pin("pin"), 1;                // select the hardware pin for SPI2 receive line
003033  003279  // Syntax: SPI3_SDI_pin(pin);
003034  003280  // Usage : SPI3_SDI_pin(PA3); // set SPI3 SDI to PA3 pin
003035  003281  // Notes : Selects the hardware pin for SPIx receive line.
003036  003282  //       : Note that only a single pin can be mapped to SPI SDI.
003037  003283  //       : Pins that can be mapped to SPIx SDI are PA0 to PA13
003038  003284  //       : Pins that can't be mapped to SPIx SDI are PA14 and PA15
003039  003285  //       : If the pin argument is 0 the function has no effect
003040  003286  //       : The pin is automatically set to an input.
003041  003287  //       : If the SPIx SDI pin is set to same pin as SPIx SDO pin (eg for a loopback check)
003042  003288  //       : it is necessary to configure the SDI pin first, eg
003043  003289  //       :     SPI3_SDI_pin(PA3);     // configure SPI3 SDI to PA3 (this disconnects anything else)
003044  003290  //       :     SPI3_SDO_pin(PA3));    // configure SPI3 SDO to PA3
003045  003291  //       : Returns: Returns TRUE if function succeeded (usually ignored)
003046  003292        
003047  003293  func SPI1_SCK_pin("pin"), 1;                // select the hardware pin for SPI1 clock line
003048  003294  // Syntax: SPI1_SCK_pin(pin);
003049  003295  // Usage : SPI1_SCK_pin(PA0); // set SPI1 SCK to PA0 pin
003050  003296  // Notes : Selects the hardware pin for SPI clock line.
003051  003297  //       : Note that only a single pin should be mapped to spi SCK.
003052  003298  //       : Pins that can be mapped to SPIx SCK are PA1, PA3 to PA9, PA12 or PA13
003053  003299  //       : Pins that can't be mapped to SPIx SCK are PA0, PA2, PA10, PA11, PA14 and PA15
003054  003300  //       : If the pin argument is 0 the SPIx SCK pin is disconnected
003055  003301  //       : The pin is automatically set to an output.
003056  003302  //       : Returns: Returns TRUE if finction succeeded (usually ignored)
003057  003303        
003058  003304  func SPI2_SCK_pin("pin"), 1;                // select the hardware pin for SPI2 clock line
003059  003305  // Syntax: SPI2_SCK_pin(pin);
003060  003306  // Usage : SPI2_SCK_pin(PA0); // set SPI1 SCK to PA0 pin
003061  003307  // Notes : Selects the hardware pin for SPI clock line.
003062  003308  //       : Note that only a single pin should be mapped to spi SCK.
003063  003309  //       : Pins that can be mapped to SPIx SCK are PA1, PA3 to PA9, PA12 or PA13
003064  003310  //       : Pins that can't be mapped to SPIx SCK are PA0, PA2, PA10, PA11, PA14 and PA15
003065  003311  //       : If the pin argument is 0 the SPIx SCK pin is disconnected
003066  003312  //       : The pin is automatically set to an output.
003067  003313  //       : Returns: Returns TRUE if finction succeeded (usually ignored)
003068  003314        
003069  003315  func SPI3_SCK_pin("pin"), 1;                // select the hardware pin for SPI3 clock line
003070  003316  // Syntax: SPI3_SCK_pin(pin);
003071  003317  // Usage : SPI3_SCK_pin(PA0); // set SPI1 SCK to PA0 pin
003072  003318  // Notes : Selects the hardware pin for SPI clock line.
003073  003319  //       : Note that only a single pin should be mapped to spi SCK.
003074  003320  //       : Pins that can be mapped to SPIx SCK are PA1, PA3 to PA9, PA12 or PA13
003075  003321  //       : Pins that can't be mapped to SPIx SCK are PA0, PA2, PA10, PA11, PA14 and PA15
003076  003322  //       : If the pin argument is 0 the SPIx SCK pin is disconnected
003077  003323  //       : The pin is automatically set to an output.
003078  003324  //       : Returns: Returns TRUE if finction succeeded (usually ignored)
003079  003325        
003080  003326        
003081  003327  func SPI1_Init("speed","mode"), 1;              // set the SPI1 port
003082  003328  func SPI2_Init("speed","mode"), 1;              // set the SPI2 port
003083  003329  func SPI3_Init("speed","mode"), 1;              // set the SPI3 port
003084  003330        
003085  003331        
003086  003332  //------------------------------------------------------------------------------
003087  003333  // Constants for SPI1, SPI2 an SPI3 "mode"
003088  003334  //------------------------------------------------------------------------------
003089  003335  #CONST
003090  003352  #END
003091  003353        
003092  003354  //------------------------------------------------------------------------------
003093  003355  // Constants for SPI1, SPI2 an SPI3 "speed"
003094  003356  //------------------------------------------------------------------------------
003095  003357  #CONST
003096  003374  #END
003097  003375        
003098  003376        
003099  003377  func SPI1_Read(), 1;                                 // read a raw byte from SPI1
003100  003378  func SPI2_Read(), 1;                                 // read a raw byte from SPI2
003101  003379  func SPI3_Read(), 1;                                 // read a raw byte from SPI3
003102  003380        
003103  003381  func SPI1_Write("byte"), 1;                          // write a raw byte to SPI1
003104  003382  func SPI2_Write("byte"), 1;                          // write a raw byte to SPI2
003105  003383  func SPI3_Write("byte"), 1;                          // write a raw byte to SPI3
003106  003384        
003107  003385  func spi_WriteBlock("buf", "bufsize"), 0;                       // commence a block write
003108  003386  // Syntax   : spi_WriteBlock("buf", "bufsize");
003109  003387  // Usage    : spi_WriteBlock(mybuf, 30);                         // point to the Write buffer and send 30 characters
003110  003388  // *Notes   : Bufsize bytes are transmitted to the SPI port from the string pointer "buf".
003111  003389        
003112  003390  func spi1_WriteBlock("buf", "bufsize"), 0;                       // commence a block write
003113  003391  // Syntax   : spi1_WriteBlock("buf", "bufsize");
003114  003392  // Usage    : spi1_WriteBlock(mybuf, 30);                         // point to the Write buffer and send 30 characters
003115  003393  // *Notes   : Bufsize bytes are transmitted to the SPI port from the string pointer "buf".
003116  003394        
003117  003395  func spi2_WriteBlock("buf", "bufsize"), 0;                       // commence a block write
003118  003396  // Syntax   : spi2_WriteBlock("buf", "bufsize");
003119  003397  // Usage    : spi2_WriteBlock(mybuf, 30);                         // point to the Write buffer and send 30 characters
003120  003398  // *Notes   : Bufsize bytes are transmitted to the SPI port from the string pointer "buf".
003121  003399        
003122  003400  func spi3_WriteBlock("buf", "bufsize"), 0;                       // commence a block write
003123  003401  // Syntax   : spi3_WriteBlock("buf", "bufsize");
003124  003402  // Usage    : spi3_WriteBlock(mybuf, 30);                         // point to the Write buffer and send 30 characters
003125  003403  // *Notes   : Bufsize bytes are transmitted to the SPI port from the string pointer "buf".
003126  003404        
003127  003405  //------------------------------------------------------------------//
003128  003406  // Display Access                                                   //
003129  003407  //------------------------------------------------------------------//
003130  003408  func disp_SetReg("register", "data"), 0;
003131  003409  // Syntax: display_SetReg(register, data);
003132  003410  // Usage : display_SetReg(arg1, arg2);
003133  003411  // Notes : Sets uLCD specific display driver registers. Refer
003134  003412  //       : to appropriate display driver data sheet.
003135  003413        
003136  003414  func disp_setGRAM("x1","y1","x2","y2"), 0;    // set GRAM window
003137  003415  // Syntax: disp_setGRAM(x1, y1, x2, y2);
003138  003416  // Usage : disp_setGRAM(arg1, arg2, arg3, arg4);
003139  003417  // Notes : Prepares the GRAM area for user access.
003140  003418  //       : Data can now be written with disp_GRAM.
003141  003419  //       : GRAM will be set accordingly for the correct screen mode.
003142  003420  //       : the LO word of the 32 bit pixel count is returned. This is
003143  003421  //       : usually all that is needed unlse GRAM area exceeds 256^2
003144  003422  //       : A copy of the 32bit value can be found in
003145  003423  //       : GRAM_PIXEL_COUNT_LO and GRAM_PIXEL_COUNT_HI
003146  003424        
003147  003425  func disp_WrGRAM("colour"), 0;
003148  003426  // Syntax: display_WrGRAM(colour);
003149  003427  // Usage : display_WrGRAM(arg);
003150  003428  // Notes : Data can be written to the GRAM consecutively using
003151  003429  //       : this function once the GRAM access window has been setup.
003152  003430        
003153  003431  func disp_WriteControl("value"), 0;             // write a control byte to the display
003154  003432        
003155  003433  func disp_WriteWord("value"), 0;                // write a word to the display
003156  003434        
003157  003435        
003158  003436  func disp_ReadWord(), 1;                        // read a word from the display
003159  003437  // Syntax: disp_ReadWord();
003160  003438  // Usage : x:=disp_ReadWord();
003161  003439  // Notes : Read a word from the controller
003162  003440  // Eg:   : disp_WriteControl(0);         // select Ilitek ID register
003163  003441  //       : print(disp_ReadWord());        // print ID
003164  003442  //       : (Many displays are write only)
003165  003443        
003166  003444        
003167  003445  // NB only available on certain displays, check individual data sheets
003168  003446  func sys_StoreTouchCalibration(), 1;
003169  003447  // Syntax: sys_StoreTouchCalibration();
003170  003448  // Usage : r := sys_StoreTouchCalibration();
003171  003449  // Notes : Store the touch calibration values in non-volatile memory.
003172  003450  //       : Returns true if the values have been accepted and stored,
003173  003451  //       : else returns false if write could not be performed, or
003174  003452  //       : touch calibration values are improbable.
003175  003453  //       : The values that are stored are obtained from:-
003176  003454  //       : TOUCH_XMINCAL             78  // touch calibration value
003177  003455  //       : TOUCH_YMINCAL             79  // touch calibration value
003178  003456  //       : TOUCH_XMAXCAL             80  // touch calibration value
003179  003457  //       : TOUCH_YMAXCAL             81  // touch calibration value
003180  003458  //       : refer to the 4DGL example touchCalibrate.4DG for further information.
003181  003459  //       : This function is not supported on uVGA, Capacitive touch
003182  003460  //       : and 4.3" resistive touch modules.
003183  003461        
003184  003462  // NB only available on certain displays, check individual data sheets
003185  003463  func disp_Sync("line"), 0;                      //  (uVGA only)  wait till scanline reaches "line"
003186  003464  // Syntax: disp_Sync(line);
003187  003465  // Usage : disp_Sync(480);
003188  003466  // Notes : Waits till the hardware gets to a certain line.
003189  003467  //       : Allows the program to synchronise writing to the hardware for flicker free operation.
003190  003468  //       : Some experimentation may be needed to find an optimum line for disp_Sync
003191  003469  //       : depending on the graphics operation. The higher the value, the slower
003192  003470  //       : the throughput. A cetain point will be reached (number of scanlines + blanking lines
003193  003471  //       : within the vertical retrace period) where it will just 'hang up' stopping the
003194  003472  //       : entire process. Eg, in 640x480 mode, if the 'lines' value is 507, operation will
003195  003473  //       : be slowest (as its actually right at the end of the blanking period) and 508
003196  003474  //       : will cause a hangup situation as it is above the highes scanline value.
003197  003475  //       : Currently, this function is only supported on displays with SSD1963 driver.
003198  003476        
003199  003477  func disp_Init(), 0;                           // initialize display with required tables. New in v0.7
003200  003478  // Syntax: disp_Init();                        New in v0.7
003201  003479  // Usage : disp_Init();
003202  003480  // Notes : Initialises or reinitialises the display.
003203  003481  //       : Normally used after restoration of peripheral power
003204  003482  //       : and after DeepSleep.
003205  003483        
003206  003484  func disp_Disconnect(), 0;                     // Disconnect display to ensure reduced power after disabling peripheral power. New in v0.7
003207  003485  // Syntax: disp_Disconnect();                  New in v0.7
003208  003486  // Usage : disp_Disconnect();
003209  003487  // Notes : Disconnects the display driver pins and/or reconfigures it to achieve
003210  003488  //       : its lowest possible power consumption. Use after disabling peripheral power
003211  003489  //       : to ensure the minimal power usage by the display.
003212  003490  //       : disp_Init() should be used to reinitialise the display.
003213  003491        
003214  003492  func disp_BlitPixelsFromCOM0(), 0;                     // Writes current GRAM window pixels to the display from the COM port
003215  003493  // Syntax: disp_BlitPixelsFromCOM0();                  New in v1.1
003216  003494  // Usage : disp_BlitPixelsFromCOM0();
003217  003495  // Notes : Writes the number of pixels defined by the last disp_setGRAM() call to the
003218  003496  //       : display from the specified com port.
003219  003497        
003220  003498  func __reserved42(), 0; // do not remove
003221  003499        
003222  003500        
003223  003501  //------------------------------------------------------------------//
003224  003502  //        Image Control Function Prototypes                         //
003225  003503  //------------------------------------------------------------------//
003226  003504  func img_SetPosition("handle", "index", "xpos", "ypos"), 1;
003227  003505  // Syntax: img_SetPosition(handle, index, xpos, ypos);
003228  003506  // Usage : r := img_SetPosition(hImageList, imagenum, x, y);
003229  003507  // Notes : set the position where the image will be displayed
003230  003508  //       : returns true if index was ok and function was successful.
003231  003509  //       : you may turn off an image so when img_Refresh is called,
003232  003510  //       : the image will not be shown
003233  003511        
003234  003512  func img_Enable("handle", "index"), 1;
003235  003513  // Syntax: img_Enable(handle, index);
003236  003514  // Usage : r := img_Enable(hImageList, imagenum);
003237  003515  // Notes : enable image in a image list
003238  003516  //       : returns true if index was ok and function was successful.
003239  003517  //       : this is the default state so when img_Refresh is called,
003240  003518  //       : all the images in the list will be shown
003241  003519  //       : if index is set to -1, all of the images are enabled
003242  003520        
003243  003521  func img_Disable("handle", "index"), 1;
003244  003522  // Syntax: img_Disable(handle, index);
003245  003523  // Usage : r := img_Disable(hImageList, imagenum);
003246  003524  // Notes : disable image in a image list
003247  003525  //       : returns true if index was ok and function was successful.
003248  003526  //       : you must turn off an image so when img_Refresh is called,
003249  003527  //       : the image will not be shown.
003250  003528  //       : if index is set to -1, all of the images are disabled
003251  003529        
003252  003530        
003253  003531  func img_Darken("handle", "index"), 1;
003254  003532  // Syntax: img_Darken(handle, index);
003255  003533  // Usage : r := img_Darken(hImageList, imagenum);
003256  003534  // Notes : darken image in a image list
003257  003535  //       : returns true if index was ok and function was successful.
003258  003536  //       : if index is set to -1, all of the images are darkened
003259  003537  //       : NB:- this feature will only work for the next refresh, then
003260  003538  //       : the image reverts back to normal when displayed again.
003261  003539        
003262  003540        
003263  003541  func img_Lighten("handle", "index"), 1;
003264  003542  // Syntax: img_Lighten(handle, index);
003265  003543  // Usage : r := img_Lighten(hImageList, imagenum);
003266  003544  // Notes : lighten image in a image list
003267  003545  //       : returns true if index was ok and function was successful.
003268  003546  //       : if index is set to -1, all of the images are lightened
003269  003547  //       : NB:- this feature will only work for the next refresh, then
003270  003548  //       : the image reverts back to normal when displayed again.
003271  003549        
003272  003550  func img_SetWord("handle", "index", "offset", "word"), 1;
003273  003551  // Syntax: img_SetWord(handle, index, offset, word);
003274  003552  // Usage : img_SetWord(hndl, 5, IMAGE_XPOS, 10);
003275  003553  // Notes : set specified word (0-7) in a image entry
003276  003554  //       : returns TRUE if successful, return value usually ignored.
003277  003555        
003278  003556  func img_GetWord("handle", "index", "offset"), 1;
003279  003557  // Syntax: myvar := img_GetWord("handle", "index", "offset");
003280  003558  // Usage : myvar := img_GetWord(hndl, 5, IMAGE_YPOS);
003281  003559  // Notes : returns specified word (0-14) from an image entry
003282  003560  //       : refer to image control entry offsets.
003283  003561        
003284  003562  func img_Show("handle", "index"), 1;
003285  003563  // Syntax: img_Show(handle, index);
003286  003564  // Usage : display image entry (regardless of enable/disable)
003287  003565  //       : returns TRUE if successful, return value usually ignored.
003288  003566        
003289  003567  func img_SetAttributes("handle", "index","value"), 1;
003290  003568  // Syntax: img_SetAttributes("handle", "index","offset");
003291  003569  // Usage : img_SetAttributes(hndl, 5, I_TOPMOST);
003292  003570  // Notes : This function SETS one or more bits in the IMAGE_FLAGS field
003293  003571  //       : of an image control entry. "value" refers to various bits in
003294  003572  //       : the image control entry (see image attribute flags).
003295  003573  //       : A '1' bit in the "value" field SETS the respective bit
003296  003574  //       : in the IMAGE_FLAGS field of the image control entry.
003297  003575  //       : returns TRUE if successful, return value usually ignored.
003298  003576        
003299  003577  func img_ClearAttributes("handle", "index","value"), 1;
003300  003578  // Syntax: img_ClearAttributes("handle", "index","offset");
003301  003579  // Usage : img_ClearAttributes(hndl, 5, I_TOPMOST);
003302  003580  // Notes : This function CLEARS one or more bits in the IMAGE_FLAGS field
003303  003581  //       : of an image control entry. "value" refers to various bits in
003304  003582  //       : the image control entry (see image attribute flags)
003305  003583  //       : a '1' bit in the "value" field CLEARS the respective bit
003306  003584  //       : in the IMAGE_FLAGS field of the image control entry.
003307  003585  //       : returns TRUE if successful, return value usually ignored.
003308  003586        
003309  003587  func img_Touched("handle", "index"), 1;
003310  003588  // Syntax: r := img_Touched(handle, index);
003311  003589  // Usage : img_Touched(hndl, 17);
003312  003590  //       : returns -1 if image not touched, or returns index
003313  003591  // Notes : if index is passed as -1, function tests all images,
003314  003592  //       : and returns -1 if image not touched, or returns index.
003315  003593        
003316  003594        
003317  003595  func img_SelectReadPosition("handle", "index", "frame", "x", "y"), 1;
003318  003596  // Syntax: img_SelectReadPosition(handle, index, frame, xpos, ypos);
003319  003597  // Usage : r := img_SelectReadPosition(hImageList, imagenum, frame, x, y);
003320  003598  // Notes : set a position in an image control for sequential reading
003321  003599  //       : of pixels from the uSD card (fat16 or raw modes supported)
003322  003600  //       : No image window area is set, the image will not be shown
003323  003601  //       : This function provides a means of preparing to load an image,
003324  003602  //       : or part of an image, to an array. (see img_SequentialRead)
003325  003603  //Returns: returns true if index was ok and function was successful.
003326  003604        
003327  003605        
003328  003606  func img_SequentialRead("count", "ptr"), 1;  // read pixels from selected read position of an image
003329  003607  // Syntax: img_SequentialRead(count, ptr);
003330  003608  // Usage1: r := img_SequentialRead(imgwidth, myArray);    // read 1 line from image control to array
003331  003609  // Usage2: r := img_SequentialRead(123, 0);            // skip 123 words from sequential stream
003332  003610  // Usage3: r := img_SequentialRead(20, 1);            // write 20 pixels to current GRAM position from stream
003333  003611  // Notes : once a position has ben set with the img_SelectReadPosition function,
003334  003612  //       : this function can then used for sequential reading of pixels from
003335  003613  //       : image storage.
003336  003614  //       : if "ptr" is 0, "count" pixels from the stream are simply skipped.
003337  003615  //       : if "ptr" is 1, "count" pixels are written to the GRAM area,
003338  003616  //       : else "ptr" must point to a valid array that is at least
003339  003617  //       : the size of "count".
003340  003618  //       : or part of an image, to an array. (see img_SequentialRead)
003341  003619  //       : returns TRUE if function succeded.
003342  003620        
003343  003621  func __reserved43(), 0; // do not remove
003344  003622  func __reserved44(), 0; // do not remove
003345  003623  func __reserved45(), 0; // do not remove
003346  003624  func __reserved46(), 0; // do not remove
003347  003625        
003348  003626  // image control header offsets
003349  003627  #CONST
003350  003634  #END
003351  003635        
003352  003636  // image control entry offsets
003353  003637  #CONST
003354  003652  #END
003355  003653        
003356  003654  // image attribute flags (in IMAGE_FLAGS)
003357  003655  // for img_SetAttributes(...) and img_ClearAttributes(...)
003358  003656  #CONST
003359  003670  #END
003360  003671        
003361  003672        
003362  003673  //------------------------------------------------------------------//
003363  003674  //        Timer Function Prototypes
003364  003675  //------------------------------------------------------------------//
003365  003676  func sys_T(), 1;
003366  003677  // Syntax: sys_T();
003367  003678  // Usage : t := sys_T();
003368  003679  // Notes : return the current value of the rolling system timer (1msec) LO word
003369  003680        
003370  003681  func sys_T_HI(), 1;
003371  003682  // Syntax: sys_T_HI();
003372  003683  // Usage : t := sys_T_HI();
003373  003684  // Notes : return the current value of the rolling system timer (1msec) HI word
003374  003685        
003375  003686  func sys_SetTimer("timernum","value"), 0;
003376  003687  // Syntax: sys_SetTimer("timernum", "value");
003377  003688  // Usage : sys_SetTimer(TIMER5, 10000);
003378  003689  // Notes : set a countdown on the selected timer, or 'top up' if required.
003379  003690  //       : There ar 8 timers TIMER0 to TIMER7 which stop at the count of 0
003380  003691  //       : Maximum timeout period is 65.535 seconds
003381  003692  //       : A timer can be read with the sys_GetTimer("timernum") function
003382  003693        
003383  003694  func sys_GetTimer("timernum"), 1;
003384  003695  // Syntax: t := sys_GetTimer("timernum");
003385  003696  // Usage : t := sys_GetTimer(TIMER3);
003386  003697  // Notes : returns 0 if timer has expired, or the current countdown value.
003387  003698  //       : There ar 8 timers TIMER0 to TIMER7 which stop at the count of 0
003388  003699  //       : Maximum timeout period is 65.535 seconds
003389  003700  //       : A timer must be set with the sys_SetTimer("timernum","value") function
003390  003701        
003391  003702  func sys_SetTimerEvent("timernum","function"), 1;
003392  003703  // Syntax: sys_SetTimerFunction("timernum", "function");
003393  003704  // Usage : sys_SetTimer(TIMER5, myfunc);
003394  003705  // Notes : set a function to be called for selected timer.
003395  003706  //       : When the timer reaches zero, the function is called.
003396  003707  //       : The called function must not have any parameters
003397  003708  //       : sys_SetTimerEvent returns any previous event function
003398  003709  //       : address, or zero if there was no previous function.
003399  003710        
003400  003711  func sys_EventQueue(), 1;
003401  003712  // Syntax: sys_EventQueue();
003402  003713  // Usage : tasks := sys_EventQueue();
003403  003714  // Notes : returns the max number of events that were pending
003404  003715  //       : in the timer queue since the last call to this function.
003405  003716  //       : This can be used to assess timer event overhead burden,
003406  003717  //       : especially after or during a sys_EventsPostpone action.
003407  003718        
003408  003719  func sys_EventsPostpone(), 0;
003409  003720  // Syntax: sys_EventPostpone();
003410  003721  // Usage : sys_EventPostpone();   // postpone the event queue
003411  003722  // Notes : postpone any events until the sys_EventResume function is executed
003412  003723  //       : The timer event queue will continue to queue events, but no action
003413  003724  //       : will take place untill a sys_EventResume function is encountered.
003414  003725  //       : The queue will continue to receive up to 32 events before discarding
003415  003726  //       : any further events. This function is required to allow a sequence of
003416  003727  //       : instructions or functions to occur that would otherwise be corrupted
003417  003728  //       : by an event occuring during the sequence of instructions or functions.
003418  003729  //       : A good example of this is when you set a position to print, if there
003419  003730  //       : was no way of locking the current sequence, an event may occur which
003420  003731  //       : does a similar thing, and a contention would occur - printing to
003421  003732  //       : the wrong position. This function should be used wisely, if any action
003422  003733  //       : that is required would take considerable time, it is better to disable
003423  003734  //       : any conflicting event functions with a bypass flag, then restart the
003424  003735  //       : conflicting event by re-issuing a timer value.
003425  003736        
003426  003737  func sys_EventsResume(), 0;
003427  003738  // Syntax: sys_EventsResume();
003428  003739  // Usage : sys_EventsResume();   // resume the event queue
003429  003740  // Notes : resume any postponed events. The queue will try to execute any timer
003430  003741  //       : events that were incurred during the postponed period.
003431  003742        
003432  003743        
003433  003744  func sys_GetTime(), 0;
003434  003745  // Syntax: sys_GetTime();
003435  003746  // Usage : to(mystring); sys_GetTime();   // save current time string to buffer
003436  003747  // Notes : print the system time in the format eg "6:10:45"
003437  003748  //       : Can be captured to a buffer using the to( function
003438  003749  //       : Returns nothing.
003439  003750        
003440  003751  func sys_SetTime("hours", "mins", "secs"), 1;
003441  003752  // Syntax: sys_SetTime(h, m, s);
003442  003753  // Usage : sys_SetTime(10, 0, 0);   // set the system time
003443  003754  // Notes : Used to set clock to correct time after power up or suspension
003444  003755  //Returns: Returns true if valid time.
003445  003756        
003446  003757  func sys_GetDate(), 0;
003447  003758  // Syntax: sys_GetDate();
003448  003759  // Usage : to(mystring); sys_GetDate();   // save current time string to buffer
003449  003760  // Notes : print the system date in the format eg "25-09-2012"
003450  003761  //       : Can be captured to a buffer using the to( function
003451  003762  //       : Returns nothing.
003452  003763        
003453  003764  func sys_SetDate("year", "month", "day"), 1;
003454  003765  // Syntax: sys_SetDate(y, m, d);
003455  003766  // Usage : sys_SetDate(10, 0, 0);   // set the system time
003456  003767  // Notes : Used to set clock to correct date after power up or suspension
003457  003768  //Returns: Returns true if valid date.
003458  003769        
003459  003770  func sys_Sleep("units"), 1;
003460  003771  // Syntax: t := sys_Sleep("units");
003461  003772  // Usage : t := sys_Sleep(10);
003462  003773  // Notes : sets the display into low power mode for a period of time.
003463  003774  //       : Touching the touch screen will also wake from sleep.
003464  003775  //       : as will bus Change Interrupts.
003465  003776  //       : Returns remaining sleep units.
003466  003777        
003467  003778  func iterator("offset"), 0;
003468  003779  // Syntax: t :=  iterator("offset");
003469  003780  // Usage : t :=  iterator(10);
003470  003781  // Notes : set the iterator size for ++/--
003471  003782  //       : The next postinc,postdec,preinc of predec will alter
003472  003783  //       : by the specified value.
003473  003784  //       : The offset will return to 1 after the next operation.
003474  003785        
003475  003786  func sys_DeepSleep("units"), 1;               // put the module into its lowest power consumption mode. New in v0.7
003476  003787  // Syntax: t := sys_DeepSleep("units");    New in v0.7
003477  003788  // Usage : t := sys_DeepSleep(10);
003478  003789  // Notes : sets the display and processor into lowest power mode for a period of time.
003479  003790  //       : When returning from DeepSleep the display should be reinitialised
003480  003791  //       : with disp_Init().
003481  003792  //       : Touching the touch screen will also wake from sleep.
003482  003793  //       : Returns remaining sleep units.
003483  003794        
003484  003795  //------------------------------------------------------------------//
003485  003796  //         Touch Screen Function Prototypes
003486  003797  //------------------------------------------------------------------//
003487  003798        
003488  003799  func touch_DetectRegion("x1" ,"y1", "x2", "y2"), 0;
003489  003800  // Syntax: touch_DetectRegion(x1, y1, x2, y2);
003490  003801  // Usage : touch_DetectRegion(arg1, arg2, arg3, arg4);
003491  003802  // Notes : Specifies a new touch detect region on the screen
003492  003803  //       : such that only touch activity in that region will
003493  003804  //       : be reported by the status poll touch_Get(TOUCH_STATUS);
003494  003805        
003495  003806  func touch_Set("mode"), 0;
003496  003807  // Syntax: touch_Set(mode);
003497  003808  // Usage : touch_Set(arg);
003498  003809  // Notes : Sets various Touch Screen related parameters
003499  003810  //       :
003500  003811  //       : mode = TOUCH_ENABLE (mode 0)  Enable Touch Screen
003501  003812  //       : touch_Set(TOUCH_ENABLE);
003502  003813  //       : Enables and initialises Touch Screen hardware
003503  003814  //       :
003504  003815  //       : mode = TOUCH_DISABLE (mode 1)  Disable Touch Screen
003505  003816  //       : touch_Set(TOUCH_DISABLE );
003506  003817  //       : Disables the Touch Screen
003507  003818  //       : Note: Touch Screen runs in the background and disabling
003508  003819  //       : it when not in use will free up extra resources
003509  003820  //       : such as 4DVM CPU cycles.
003510  003821  //       :
003511  003822  //       : mode = TOUCH_REGIONDEFAULT (mode 2)  Default Touch Region
003512  003823  //       : touch_Set(TOUCH_REGIONDEFAULT);
003513  003824  //       : This will reset the current active region to default
003514  003825  //       : to the full screen without the application having to
003515  003826  //       : set a new active region for the full screen.
003516  003827  //       : (NB for 'no touch' devices - like uVGAII or OLED's/LCD's
003517  003828  //       : that requre to be interfaced with an external pointing
003518  003829  //       : device, values that are poked into TOUCH_DRIVE will be
003519  003830  //       : read with the touch_Get() function)
003520  003831        
003521  003832        
003522  003833  func touch_Get("mode"), 1;
003523  003834  // Syntax: touch_Get(mode);
003524  003835  // Usage : arg1 := touch_Get(arg);
003525  003836  // Notes : Returns various Touch Screen parameters to caller
003526  003837  //       :
003527  003838  //       : mode = TOUCH_STATUS  (mode 0)
003528  003839  //       : var := touch_Get(TOUCH_STATUS);
003529  003840  //       : Returns the various states of the touch screen
003530  003841  //       : 0 = NOTOUCH
003531  003842  //       : 1 = TOUCH_PRESSED
003532  003843  //       : 2 = TOUCH_RELEASED
003533  003844  //       : 3 = TOUCH_MOVING
003534  003845  //       :
003535  003846  //       : mode = TOUCH_GETX   (mode 1)
003536  003847  //       : var := touch_Get(TOUCH_GETX);
003537  003848  //       : Returns the X coordinates of the touch
003538  003849  //       :
003539  003850  //       : mode = TOUCH_GETY   (mode 2)
003540  003851  //       : var := touch_Get(TOUCH_GETY);
003541  003852  //       : Returns the Y coordinates of the touch
003542  003853        
003543  003854        
003544  003855  //touch_Set() related constants
003545  003856  #CONST
003546  003860  #END
003547  003861        
003548  003862  //touch_Get() related constants
003549  003863  #CONST
003550  003871  #END
003551  003872        
003552  003873  func touch_TestBox("&rect"), 1;
003553  003874  // Syntax   : touch_Test(rect);
003554  003875  // Usage    : var r[4]; r[0]:=100; r[1]:=200; r[2]:=20; r[3]:=30;
003555  003876  //          : result := touch_Test(r); // check area at 100,200,119,229
003556  003877  // Notes    : rect is an array of 4 vars, x1, y1, width, height (using boxed co-ordinates)
003557  003878  // returns  : Returns true if last touch co-ordinates are within the boxed test area.
003558  003879        
003559  003880  func touch_TestArea("&rect"), 1;
003560  003881  // Syntax   : touch_Test(rect);
003561  003882  // Usage    : var r[4]; r[0]:=100; r[1]:=200; r[2]:=119; r[3]:=129;
003562  003883  //          : result := touch_Test(r); // check area at 100,200,119,229
003563  003884  // Notes    : rect is an array of 4 vars, x1, y1, x2, y2 (using absolute co-ordinates)
003564  003885  // returns  : Returns true if last touch co-ordinates are within the absolute co-ordinate test area.
003565  003886        
003566  003887        
003567  003888  func __reserved51(), 0; // do not remove
003568  003889  func __reserved52(), 0; // do not remove
003569  003890        
003570  003891  //------------------------------------------------------------------//
003571  003892  //        Memory Allocation Function Prototypes
003572  003893  //------------------------------------------------------------------//
003573  003894        
003574  003895  func mem_Alloc("size"), 1;
003575  003896  // Syntax: mem_Alloc(bytesize);
003576  003897  // Usage : myvar := mem_Alloc(100);
003577  003898  // Notes : Allocate a block of memory to pointer myvar
003578  003899  //       : The allocated memory contains garbage but is a fast allocation.
003579  003900  //       : The block must later be released with mem_Free();
003580  003901  //       : returns 0 if function fails
003581  003902        
003582  003903  func mem_AllocV("size"), 1;
003583  003904  // Syntax: mem_AllocV(bytesize);
003584  003905  // Usage : myvar := mem_AllocV(100);
003585  003906  // Notes : Allocate a block of memory to pointer myvar
003586  003907  //       : The block of memory is filled with signature values
003587  003908  //       : the block starts with A5,5A then fills with incrementing
003588  003909  //       : number eg:- A5,5A,00,01,02,03...FF,00,11....
003589  003910  //       : This can be helpful when debugging
003590  003911  //       : The block must later be released with mem_Free();
003591  003912  //       : returns 0 if function fails
003592  003913        
003593  003914  func mem_AllocZ("size"), 1;
003594  003915  // Syntax: mem_AllocZ(bytesize);
003595  003916  // Usage : myvar := mem_AllocC(100);
003596  003917  // Notes : Allocate a zeroed block of memory to pointer myvar
003597  003918  //       : The block of memory is filled with zeroes
003598  003919  //       : The block must later be released with mem_Free();
003599  003920  //       : returns 0 if function fails
003600  003921        
003601  003922  func mem_Realloc("ptr", "size"), 1;
003602  003923  // Syntax: myvar := mem_Realloc("ptr", "size");
003603  003924  // Usage : myvar := mem_Realloc(ptr, size);
003604  003925  // Notes : The function may move the memory block to a new location,
003605  003926  //       : in which case the new location is returned.
003606  003927  //       : The content of the memory block is preserved up to the lesser
003607  003928  //       : of the new and old sizes, even if the block is moved.
003608  003929  //       : If the new size is larger, the value of the newly allocated
003609  003930  //       : portion is indeterminate. In case that ptr is NULL,
003610  003931  //       : the function behaves exactly as mem_Alloc, assigning a new block
003611  003932  //       : of size bytes and returning a pointer to the beginning of it.
003612  003933  //       : In case that the size is 0, the memory previously allocated in
003613  003934  //       : ptr is deallocated as if a call to mem_Free()was made, and a NULL
003614  003935  //       : pointer is returned.
003615  003936        
003616  003937  func mem_Free("allocation"), 1;
003617  003938  // Syntax: myvar := mem_Free(allocation);
003618  003939  // Usage : myvar := mem_Free(myvar);
003619  003940  // Notes : De-allocate a block of memory previously created with
003620  003941  //       : mem_Alloc(...), mem_AllocV(...); or mem_AllocZ(...);
003621  003942  //       : returns 0 if function fails
003622  003943        
003623  003944  func mem_Heap(), 1;
003624  003945  // Syntax: myvar := mem_Heap();
003625  003946  // Usage : myvar := mem_Heap();
003626  003947  // Notes : returns bytecount available in heap
003627  003948  //       :
003628  003949        
003629  003950  func mem_Set("ptr","char","size"), 1;
003630  003951  // Syntax: mem_Set(ptr,char,bytesize);
003631  003952  // Usage : mem_Set(p, 'A', 100);
003632  003953  // Notes : fill a block of memory with a byte value
003633  003954  //       : Note that count is a byte count, this facilitates
003634  003955  //       : clearing word aligned byte arrays when using word
003635  003956  //       : aligned packed strings.
003636  003957  //       : returns ptr
003637  003958        
003638  003959  func mem_Copy("src", "dest", "bytecount"), 1;
003639  003960  // Syntax: myvar := mem_Copy(src, dest, bytesize);
003640  003961  // Usage : myvar := mem_Copy(p1, p2, 100);
003641  003962  // Notes : copy a word aligned block of memory from src to dest
003642  003963  //       : Note that count is a byte count, this facilitates
003643  003964  //       : copying word aligned byte arrays when using word
003644  003965  //       : aligned packed strings.
003645  003966  //       : returns src
003646  003967        
003647  003968  func mem_Compare("ptr1","ptr2","count"), 1;
003648  003969  // Syntax: myvar := mem_Compare(ptr1,ptr2,bytesize);
003649  003970  // Usage : myvar := mem_Compare(p1, p2, 100);
003650  003971  // Notes : compare word aligned blocks of memory at src, dest
003651  003972  //       : Note that count is a byte count, this facilitates
003652  003973  //       : comparing word aligned byte arrays when using word
003653  003974  //       : aligned packed strings.
003654  003975  //       : returns 0 if we have a match
003655  003976        
003656  003977  func __reserved53(), 0; // do not remove
003657  003978  func __reserved54(), 0; // do not remove
003658  003979        
003659  003980  //------------------------------------------------------------------//
003660  003981  //        FAT16 Function Prototypes
003661  003982  //------------------------------------------------------------------//
003662  003983        
003663  003984  func file_Error(), 1;
003664  003985  // Syntax: myvar := file_Error();
003665  003986  // Usage : e := file_Error();
003666  003987  // Notes : return the most recent file error.
003667  003988  //       :
003668  003989        
003669  003990  func file_Count("filename"), 1;
003670  003991  // Syntax: count := file_Count("filename");
003671  003992  // Usage : count := file_Count("*.4dg");
003672  003993  // Notes : returns number of files found that match the criteria
003673  003994        
003674  003995  func file_Dir("filename"), 1;
003675  003996  // Syntax: count := file_Dir("filename");
003676  003997  // Usage : count := file_Dir("*.4dg");
003677  003998  // Notes : streams a string of filenames that agree with the search key
003678  003999  //       : returns number of files found that match the criteria
003679  004000        
003680  004001  func file_FindFirst("fname"), 1;
003681  004002  // Syntax: res := file_FindFirst("fname");
003682  004003  // Usage : if (file_FindFirst("*.4xe") ....
003683  004004  // Notes : returns true if at least 1 file exists
003684  004005  //       : that satisfies the file argument.
003685  004006  //       : Wildcards are usually used so if
003686  004007  //       : file_FindFirst returns true, further
003687  004008  //       : tests can be made using file_FindNext();
003688  004009  //       : to find all the files that match the
003689  004010  //       : wildcard class. Note that the stream behaviour
003690  004011  //       : is the same as file_Dir.
003691  004012  //       :
003692  004013        
003693  004014  func file_FindNext(), 1;
003694  004015  // Syntax: res := file_FindNext();
003695  004016  // Usage : while ((file_FindNext()) ....
003696  004017  // Notes : returns true if more file exists
003697  004018  //       : that satisfies the file argument
003698  004019  //       : that was given for  file_FindFirst.
003699  004020  //       : Wildcards must be used for
003700  004021  //       : file_FindFirst, else this function will
003701  004022  //       : always return zero as the only occurence
003702  004023  //       : will have already been found.
003703  004024  //       : Note that the stream behaviour
003704  004025  //       : is the same as file_Dir.
003705  004026  //       :
003706  004027        
003707  004028  func file_Exists("fname"), 1;
003708  004029  // Syntax: res := file_Exists("fname"),
003709  004030  // Usage : if(file_Exists("myfile") ....
003710  004031  // Notes : returns true if file exists
003711  004032  //       :
003712  004033        
003713  004034  func file_Open("fname", "mode"), 1;
003714  004035  // Syntax: handle := file_Open("fname","mode"),
003715  004036  // Usage : handle := file_Open("myfile.txt", 'r');
003716  004037  // Notes : returns handle if file exists
003717  004038  //       :
003718  004039        
003719  004040  func file_Close("handle"), 1;
003720  004041  // Syntax: res := file_Close("handle");
003721  004042  // Usage : res := file_Close(hnd1);
003722  004043  // Notes : returns true if file closed ok
003723  004044  //       :
003724  004045        
003725  004046  func file_Read("*dest", "size", "handle"), 1;
003726  004047  // Syntax: res := file_Read("*dest", "size", "handle"),
003727  004048  // Usage : res := file_Read(memblock,20,hnd1);
003728  004049  // Notes : returns number of characters read
003729  004050  //       : if "dest" is zero, data is read direct to GRAM window
003730  004051  //       :
003731  004052        
003732  004053        
003733  004054  func file_Seek("handle", "HiWord", "LoWord"), 1;
003734  004055  // Syntax: res := file_Seek("handle", "HiWord", "LoWord")
003735  004056  // Usage : res := file_Seek(hSource, 0, 0x1234);
003736  004057  // Notes : set file position to 0x00001234 (byte position 4660)
003737  004058  //       : for the file handle so subsequent data may be read
003738  004059  //       : from that position onwards with file_GetC(...),
003739  004060  //       : file_GetW(...) or file_GetS(...), or an image
003740  004061  //       : can be displayed with file_Image(...)
003741  004062  // Notes : returns true if ok, usually ignored
003742  004063        
003743  004064  func file_Index("handle", "HiSize", "LoSize","recordnum"), 1;
003744  004065  // Syntax: file_Index("handle", "HiSize", "LoSize","recordnum"), 1;
003745  004066  // Usage : res := file_Index(hsource, 0, 1000, 123), 1;
003746  004067  // Notes : set file seek position to 123000
003747  004068  //       : for the file handle so subsequent data may be read
003748  004069  //       : from that record position onwards with file_GetC(...),
003749  004070  //       : file_GetW(...) or file_GetS(...), or an image
003750  004071  //       : can be displayed with file_Image(...)
003751  004072  // Notes : returns true if ok, usually ignored
003752  004073        
003753  004074  func file_Tell("handle", "&HiWord", "&LoWord"), 1;
003754  004075  // Syntax: file_Tell("handle", &HiWord, &LoWord);
003755  004076  // Usage : file_Tell(fhndl, &SizeHi, &SizeLo);
003756  004077  // Notes : Reads the 32 bit file pointer and stores it into 2 variables.
003757  004078  //       : returns true if function succeeded
003758  004079        
003759  004080  func file_Write("*source", "size", "handle"), 1;
003760  004081  // Syntax: res := fwrite("*source", "size", "handle"),
003761  004082  // Usage : res := fwrite(memblock, 20, hnd1);
003762  004083  // Notes : returns number of bytes written
003763  004084  //       :
003764  004085        
003765  004086  func file_Size("handle", "&HiWord", "&LoWord"), 1;
003766  004087  // Syntax: file_Size("handle", &HiWord, &LoWord);
003767  004088  // Usage : file_Size(fhndl, &SizeHi, &SizeLo);
003768  004089  // Notes : Reads the 32 bit file size and stores it into 2 variables.
003769  004090  //       : returns true if function succeeded
003770  004091        
003771  004092  func file_Image("x", "y", "handle"), 1;
003772  004093  // Syntax: file_Image(x, y, handle);
003773  004094  // Usage : file_Image(10, 10, hnd1);
003774  004095  // Notes : Display an image from a file at the current file position.
003775  004096  //       : The image is displayed at x,y (with respect to top left corner).
003776  004097  //       : If there is more than 1 image in the file, it can be
003777  004098  //       : accessed with file_Seek(...)
003778  004099        
003779  004100  func file_ScreenCapture("x", "y", "width", "height", "handle"), 1;
003780  004101  // Syntax: file_ScreenCapture(x, y, w, h, handle);
003781  004102  // Usage : file_ScreenCapture(10, 10, 50,50, hnd1);
003782  004103  // Notes : Save a image from screen to file at the current file position.
003783  004104  //       : The image can later be displayed with file_Image(...);
003784  004105  //       : The file may be opened in append mode to accumulate multiple
003785  004106  //       : images. Later, the images can be accessed with file_Seek(...);
003786  004107  //       : Note that the image will be sector aligned.
003787  004108  //       : All image headers must start on a sector boundary.
003788  004109  //       : The image is saved from x, y (with respect to top left corner)
003789  004110  //       : and the capture area is determined by "width" and "height".
003790  004111  //       : returns 0 if function succeeded
003791  004112        
003792  004113  func file_PutC("char","handle"), 1;
003793  004114  // Syntax: file_PutC("char", "handle");
003794  004115  // Usage : file_PutC('x', hndl);
003795  004116  // Notes : returns true if function succeeded
003796  004117        
003797  004118  func file_GetC("handle"), 1;
003798  004119  // Syntax: file_GetC("handle");
003799  004120  // Usage : mychar := fgetC("handle");
003800  004121  // Notes : returns next char from file
003801  004122        
003802  004123  func file_PutW("word","handle"), 1;
003803  004124  // Syntax: file_PutW("word","handle");
003804  004125  // Usage : file_PutW(0x1234, hndl);
003805  004126  // Notes : returns true if function succeeded
003806  004127        
003807  004128  func file_GetW("handle"), 1;
003808  004129  // Syntax: file_GetW("handle");
003809  004130  // Usage : myword := fgetW("handle");
003810  004131  // Notes : returns next word in file
003811  004132        
003812  004133  func file_PutS("*source", "handle"), 1;
003813  004134  // Syntax: res := file_Puts("*source", "handle"),
003814  004135  // Usage : res := file_Puts(mystring, hnd1);
003815  004136  // Notes : returns number of characters written
003816  004137  //       :
003817  004138        
003818  004139  func file_GetS("*string", "size", "handle"), 1;
003819  004140  // Syntax: res := file_Gets("*string", "size", "handle");
003820  004141  // Usage : res := file_Gets(mystr , 81, hnd1); // read up to 80 chars
003821  004142  // Notes : get a string from a file
003822  004143  //       : returns pointer to string or null if failed.
003823  004144  //       : file_GetS(...) automatically appends a null-terminator to the data read.
003824  004145  //       : NB:- only reads up to "size-1" characters into "string"
003825  004146  //       : file_GetS(...) will stop reading when any of the following conditions are true:
003826  004147  //       : A] It has read n-1 bytes (one character is reserved for the null-terminator)
003827  004148  //       : B] It encounters a newline character (a line-feed in the compilers tested here), or
003828  004149  //       : C] It reaches the end of file
003829  004150  //       : D] A read error occurs.
003830  004151        
003831  004152        
003832  004153  func file_Erase("fname"), 1;
003833  004154  // Syntax: res := file_Erase("fname");
003834  004155  // Usage : res := file_Erase("myfile.txt");
003835  004156  // Notes : returns true if successful
003836  004157  //       :
003837  004158        
003838  004159  func file_Rewind("handle"), 1;
003839  004160  // Syntax: res := file_Rewind("handle");
003840  004161  // Usage : res := file_Rewind(hnd1);
003841  004162  // Notes : returns true if file rewound ok (usually ignored)
003842  004163  //       : resets the file pointer the the beginning of the open file.
003843  004164        
003844  004165  func file_LoadFunction("fname.4xe"), 1;
003845  004166  // Syntax: res := file_LoadFunction("fname.4fn");
003846  004167  // Usage : myfunc := file_LoadFunction(myfuncname);
003847  004168  // Notes : Load a function or program from disk and
003848  004169  //       : return a function pointer to the allocation.
003849  004170  //       : The function can then be invoked just like any other
003850  004171  //       : function would be called via a function pointer.
003851  004172  //       : Parameters may be passed to it in a conventional way.
003852  004173  //       : The function may be discarded at any time when no
003853  004174  //       : longer required, thus freeing its memory resources.
003854  004175  //       : The loaded function can be discarded with mem_Free(..)
003855  004176  //       : eg:
003856  004177  //       : popupWindow := file_LoadFunction("popupWindow1.4fn");
003857  004178  //       : if(!popupWindow) goto LoadFunctionFailed; // could not load the function !!!
003858  004179  //       : then elsewhere in your program:-
003859  004180  //       : res := popupWindow(MYMODE,"My Title","My Popup Text");
003860  004181  //       : if(res == QUIT_APPLICATION) goto exitApp;
003861  004182  //       : Later in your program, when popupWindow is no longer
003862  004183  //       : required for the application:-
003863  004184  //       : res := mem_Free(popupWindow);
003864  004185  //       : if(!res) goto FreeFunctionFailed; // should never happen if memory not corrupted
003865  004186  //       : The callers stack is shared by the loaded function,
003866  004187  //       : however any global variables in the loaded function
003867  004188  //       : are private to that function.
003868  004189  //
003869  004190        
003870  004191  func file_Run("fname.4xe", "arglistptr"), 1;
003871  004192  // Syntax: res := file_Run("fname.4xe","arglistptr");
003872  004193  // Usage : res := file_Run(fname, argptr);
003873  004194  // Notes : current program releases any allocated memory but
003874  004195  //       : retains the stack and global memory.
003875  004196  //       : If arglistptr is 0, no arguments are passed, else
003876  004197  //       : arglist points to an array, the first element being
003877  004198  //       : the number of elements in the array.
003878  004199  //       : func 'main' in the called program accepts
003879  004200  //       : the arguments, if any. The arguments can only
003880  004201  //       : be passed by value, no pointers or references can be
003881  004202  //       : used as all memory is cleared before the file
003882  004203  //       : is loaded. Refer to file_Exec and file_LoadFunction
003883  004204  //       : for functions that can pass by reference.
003884  004205        
003885  004206  func file_Exec("fname.4xe", "arglistptr"), 1;
003886  004207  // Syntax: res := file_Exec("fname.4xe","arglistptr");
003887  004208  // Usage : res := file_Exec("fname.4xe","arglistptr");
003888  004209  // Notes : returns like a function, current program
003889  004210  //       : calling program is kept active and control returns to it.
003890  004211  //       : If arglistptr is 0, no arguments are passed, else
003891  004212  //       : arglist points to an array, the first element being
003892  004213  //       : the number of elements in the array.
003893  004214  //       : func 'main' in the called program accepts the arguments.
003894  004215  //       : This function is similar to file_LoadFunction(...), however,
003895  004216  //       : the function argument list is passed by pointer, and
003896  004217  //       : the memory consumed by the function is released as
003897  004218  //       : soon as the function completes.
003898  004219        
003899  004220  func file_LoadImageControl("fname1", "fname2", "mode"), 1;
003900  004221  // Syntax: hImagelist := file_LoadImageControl ("controlfile", "imagefile", "mode"),
003901  004222  // Usage : hImagelist := file_LoadImageControl ("resource.dat", "resource.gci", 0);
003902  004223  // Notes : Reads a control file to create an image list.
003903  004224  //       : Returns NULL if function fails.
003904  004225  //       : Returns a handle (pointer to the memory allocation) to the
003905  004226  //       : image control list that has been created.
003906  004227  //       : "fname1" is the control list filename "*.dat"
003907  004228  //       : "fname2" is the image filename "*.gci"
003908  004229        
003909  004230  // Notes : This function Calculates the size of a chunk of memory required for
003910  004231  //       : a image list and populates it from the image control file ("*.dat")
003911  004232  //       : therefore, when imagelist is no longer required, you must de-allocate
003912  004233  //       : the image list memory by using eg:- mem_Free(hImagelist);
003913  004234  //       : to restore the heap.
003914  004235  //       :
003915  004236  //       : mode 0:- it is assumed that there is a graphics file with the
003916  004237  //       : file extension "fname2.gci". In this case, the images have been stored
003917  004238  //       : in a FAT16 file concurrently, and the offsets that ar derived from the
003918  004239  //       : "fname1.dat" file are saved in the image control so that the image control
003919  004240  //       : can open the file (*.gci) and us file_Seek to get to the position of the
003920  004241  //       : image which can then automatically be displayed using file_Image(xpos, ypos, hSource);
003921  004242  //       : mode 0 builds the image control quickly as it only scans the *.dat file
003922  004243  //       : for the file offsets and save them in the relevant entries in the image control.
003923  004244  //       : The penalty is that images take longer to find when displayed due to file_Seek
003924  004245  //       : overheads.
003925  004246  //
003926  004247  //       : mode 1:- it is assumed that there is a graphics file with the
003927  004248  //       : file extension "fname2.gci". In this case, the images have been stored
003928  004249  //       : in a FAT16 file concurrently, and the offset of the images are saved
003929  004250  //       : in the image control so that image file (*.gci) can be mapped to directly.
003930  004251  //       : The absolute cluster/sector is mapped so file seek does not need to be called
003931  004252  //       : internally. This means that there is no seek time penalty, however, the
003932  004253  //       : image list takes a lot longer to build, as all the seeking is done at control
003933  004254  //       : build time.
003934  004255        
003935  004256  //       : mode 2:- the graphics file with the is placed in a partitioned area
003936  004257  //       : In this case, the images have been stored in a in a known raw area of the FAT16
003937  004258  //       : disk, and the absolute address of the images are saved in the DAT file
003938  004259  //       : This is the fastest operation of the image control as there is no seeking
003939  004260  //       : or other disk activity taking place.
003940  004261        
003941  004262  func file_Mount(), 1;
003942  004263  // Syntax: r := file_Mount();
003943  004264  // Usage : r := file_Mount();
003944  004265  // Notes : Create a control block for FAT16 and mount the File System
003945  004266        
003946  004267  func file_Unmount(), 0;
003947  004268  // Syntax: file_Unmount();
003948  004269  // Usage : file_Unmount();
003949  004270  // Notes : release any control block and buffers for FAT16
003950  004271  //       : and unmount the File System
003951  004272        
003952  004273  func file_PlayWAV("fname1"), 1;
003953  004274  // Syntax: file_PlayWAV("fname1");
003954  004275  // Usage : file_PlayWAV("ding.wav");
003955  004276  // Notes : Play a wave file with filename "fname1"
003956  004277  //       : This function automatically grabs a chunk
003957  004278  //       : of memory for a file buffer, and a wave
003958  004279  //       : buffer. The minimum memory requirement is
003959  004280  //       : about 580 bytes for the disk io service and
003960  004281  //       : a minimum wave buffer size of 1024. The siz
003961  004282  //       : of the wave buffer allocation
003962  004283  //       : can be increased by the snd_BufSize function.
003963  004284  //       : The default size 1024 bytes.
003964  004285  //       : NB the memory is only required during the
003965  004286  //       : duration of play, and is automatically
003966  004287  //       : released while not in use.
003967  004288  //       : See the Sound Class services for other associated controls.
003968  004289  //       : If there are no errors, returns number of blocks to play (1 to 32767)
003969  004290  //       : If errors occured, the folling is returned
003970  004291  //       : -7  : Insufficient memory available for WAV buffer and file
003971  004292  //       : -6  : cant play this rate
003972  004293  //       : -5  : no data chunk found in first rsector
003973  004294  //       : -4  : no format data
003974  004295  //       : -3  : no wave chunk signature
003975  004296  //       : -2  : bad wave file format
003976  004297  //       : -1  : file not found
003977  004298        
003978  004299  func file_Rename("fname1", "fname2"), 1;     // rename a file
003979  004300  // Syntax: file_Rename ("oldname", "newname"),
003980  004301  // Usage : file_Rename ("file.txt", "file.bak");
003981  004302  // Notes : Renames a file on uSD.
003982  004303  //       : Returns FALSE if function fails. (file does not exist, or new filename already exists)
003983  004304  //       : Returns TRUE, if successful.
003984  004305        
003985  004306  func file_SetDate("handle", "year", "month", "day", "hour", "Minute", "Second") , 1; // Sets date and time for an open file
003986  004307  // Syntax: res := file_SetDate("handle", "year", "month", "day", "hour", "Minute", "Second) ;
003987  004308  // Usage : res := file_SetDate(hndl, 2014, 10, 31, 10, 0, 0)
003988  004309  // Notes : year is a 4 digit year
003989  004310  //       : Due to limitations of FAT16 only even seconds are stored
003990  004311  //       : The handle must be closed before the file information is updated
003991  004312  //       : returns TRUE if date + time + handle valid
003992  004313  //       : returns FLAST if handle invalid, or date or time not valid (only simple checking performed).
003993  004314        
003994  004315  func __reserved57(), 0; // do not remove
003995  004316  func __reserved58(), 0; // do not remove
003996  004317        
003997  004318  //------------------------------------------------------------------------------
003998  004319  // FILEIO Error Code Constants
003999  004320  //------------------------------------------------------------------------------
004000  004321  #CONST
004001  004347  #END
004002  004348        
004003  004349  //------------------------------------------------------------------------------
004004  004350  // DISK struct offsets
004005  004351  //------------------------------------------------------------------------------
004006  004352  #CONST
004007  004369  #END
004008  004370        
004009  004371  //------------------------------------------------------------------------------
004010  004372  // FILE struct offsets
004011  004373  //------------------------------------------------------------------------------
004012  004374  #CONST
004013  004393  #END
004014  004394        
004015  004395        
004016  004396  //------------------------------------------------------------------//
004017  004397  //        Sound Class Services
004018  004398  //------------------------------------------------------------------//
004019  004399        
004020  004400  func snd_Volume("var"), 0;
004021  004401  // Syntax: snd_Volume("var");
004022  004402  // Usage : snd_Volume(30);
004023  004403  // Notes : set sound playback volume.  Var must
004024  004404  //       : be in the range from 8 (min volume)
004025  004405  //       : to 127 (max volume). If var is less
004026  004406  //       : than 8 volume is set to 8, and if
004027  004407  //       : var > 127 it is set to 127.
004028  004408        
004029  004409  func snd_Pitch("pitch"), 1;
004030  004410  // func snd_Pitch("freq"), 1;
004031  004411  // func snd_Pitch(7000), 1; // play the wave file with a sample frequency of 7khz
004032  004412  // Notes : sets the samples playback rate to a different frequency
004033  004413  //       : The minimum value is 4khz
004034  004414  //       : Setting the pitch to zero restores the original sample rate
004035  004415  //       : Return value is the samples original sample rate.
004036  004416        
004037  004417  func snd_BufSize("var"), 0;
004038  004418  // Syntax: snd_BufSize("var");
004039  004419  // Usage : snd_BufSize(2);
004040  004420  // Notes : specify the a memory chunk size for the wavefile buffer.
004041  004421  //       : default size 1024 bytes.
004042  004422  //       : 0 = 1024 bytes (default)
004043  004423  //       : 1 = 2048 bytes
004044  004424  //       : 2 = 4096 bytes
004045  004425  //       : 3 = 8192 bytes
004046  004426        
004047  004427  func snd_Stop(), 0;
004048  004428  // Syntax: snd_Stop();
004049  004429  // Usage : snd_Stop();
004050  004430  // Notes : stop any sound that is playing, releasing
004051  004431  //       : buffers and closes any open wav file.
004052  004432        
004053  004433  func snd_Pause(), 0;
004054  004434  // Syntax: snd_Pause();
004055  004435  // Usage : snd_Pause();
004056  004436  // Notes : pauses any sound that is playing, does nothing
004057  004437  //       : until sound is resumed with snd_Continue().
004058  004438  //       : The sample cam be terminated with snd_Stop.
004059  004439  //       : buffers and closes any open wav file.
004060  004440        
004061  004441  func snd_Continue(), 0;
004062  004442  // Syntax: snd_Continue();
004063  004443  // Usage : snd_Continue();
004064  004444  // Notes : resume any sound that is paused by snd_Pause.
004065  004445        
004066  004446  func snd_Playing(), 1;
004067  004447  // Syntax: snd_Playing();
004068  004448  // Usage : r := snd_Playing();
004069  004449  // Notes : returns 0 if sound has finished playing,
004070  004450  //       : else return number of 512 byte blocks to go.
004071  004451        
004072  004452  func snd_Freq("Freq", "Duration"), 1;
004073  004453  // Syntax: snd_Freq("Freq", "Duration");
004074  004454  // Usage : r := snd_Freq(1000, 2000);
004075  004455  // Notes : Returns 0 if note cannot be played because a wav file is playing
004076  004456  //       : else return True.
004077  004457  //       : Minimum Freq is 20
004078  004458  //       : This will produce a pure Square wave and is designed for driving
004079  004459  //       : Piezo transducers which require this sort of drive. It can also be
004080  004460  //       : used to drive the amp on displays with audio.
004081  004461        
004082  004462        
004083  004463  func __reserved60(), 0; // do not remove
004084  004464  func __reserved61(), 0; // do not remove
004085  004465  func __reserved62(), 0; // do not remove
004086  004466        
004087  004467  //=========================================================================================================
004088  004468  // String functions
004089  004469  //=========================================================================================================
004090  004470        
004091  004471  func str_Ptr("&var"), 1;
004092  004472  // Syntax: str_Ptr(&var);
004093  004473  // Usage : p := str_Ptr(&var);
004094  004474  // Notes : return a byte pointer to a word region
004095  004475        
004096  004476  func str_GetD("&ptr", "&var"), 1;
004097  004477  // Syntax: str_GetD(&ptr, &var);
004098  004478  // Usage : ok := str_GetD(&ptr, &var);
004099  004479  // Notes : convert number in a string to DWORD ( myvar[2] )
004100  004480  //       : returns true if function succeeds, advancing ptr
004101  004481        
004102  004482  func str_GetW("&ptr", "&var"), 1;
004103  004483  // Syntax: str_GetW(&ptr, &var);
004104  004484  // Usage : ok := str_GetW(&ptr, &var);
004105  004485  // Notes : convert number in a string to WORD ( myvar )
004106  004486  //       : returns true if function succeeds, advancing ptr
004107  004487        
004108  004488  func str_GetHexW("&ptr", "&var"), 1;
004109  004489  // Syntax: str_GetHexW(&ptr, &var);
004110  004490  // Usage : ok := str_GetHexW(&ptr, &var);
004111  004491  // Notes : convert HEX number in a string to WORD ( myvar )
004112  004492  //       : returns true if function succeeds, advancing ptr
004113  004493        
004114  004494  func str_GetC("&ptr", "&var"), 1;
004115  004495  // Syntax: str_GetC(&ptr, &var);
004116  004496  // Usage : ok := str_GetC(&ptr, &var);
004117  004497  // Notes : get a valid ascii char in a string to WORD ( myvar )
004118  004498  //       : returns true if function succeeds, advancing ptr
004119  004499        
004120  004500  func str_GetByte("ptr"), 1;
004121  004501  // Syntax: str_GetByte(ptr);
004122  004502  // Usage : myvar := str_GetByte(ptr);
004123  004503  // Notes : get a byte to myvar
004124  004504  //       : returns value
004125  004505        
004126  004506  func str_GetWord("ptr"), 1;
004127  004507  // Syntax: GetWord(ptr);
004128  004508  // Usage : GetWord(ptr);
004129  004509  // Notes : get a word to myvar
004130  004510  //       : returns value
004131  004511        
004132  004512  func str_PutByte("ptr","val"), 0;
004133  004513  // Syntax: str_PutByte(ptr);
004134  004514  // Usage : myvar := str_PutByte(ptr);
004135  004515  // Notes : put a byte at ptr
004136  004516  //       : returns value
004137  004517        
004138  004518  func str_PutWord("ptr","val"), 0;
004139  004519  // Syntax: str_PutWord("ptr","val");
004140  004520  // Usage : str_PutWord(p,100);
004141  004521  // Notes : put word 100 at current pointer location
004142  004522  //       : returns value
004143  004523        
004144  004524  func str_Match("&ptr", "*str"), 1;
004145  004525  // Syntax: str_Match(&ptr, *str);
004146  004526  // Usage : r := str_Match(&p, "hello");
004147  004527  // Notes : Case sensitive match
004148  004528  //       : returns true if function succeded, andvancing pointer to position past
004149  004529  //       : the matched item. Note that any whitespace characters are skipped
004150  004530  //       : in the source string prior to the test.
004151  004531        
004152  004532  func str_MatchI("&ptr", "*str"), 1;
004153  004533  // Syntax: str_MatchI(&ptr, *str);
004154  004534  // Usage : r := str_MatchI(&p, "hello");
004155  004535  // Notes : Case insensitive match
004156  004536  //       : returns true if function succeded, andvancing pointer to position past
004157  004537  //       : the matched item. Note that any whitespace characters are skipped
004158  004538  //       : in the source string prior to the test.
004159  004539        
004160  004540  func str_Find("&ptr", "*str"), 1;
004161  004541  // Syntax: str_Find(&ptr, *str);
004162  004542  // Usage : n := str_Find(&p, "hello");
004163  004543  // Notes : given the address of a pointer to a source string as the
004164  004544  //       : first argument, and a pointer to a test string as the second
004165  004545  //       : argument, attempt to find the position of the matching string
004166  004546  //       : in the source string. The test is performed with case sensitivity.
004167  004547  //       : return 0 if not found, else returns the address of the first
004168  004548  //       : character of the match. NB:- The source pointer is not altered.
004169  004549        
004170  004550  func str_FindI("&ptr", "*str"), 1;
004171  004551  // Syntax: str_Find(&ptr, *str);
004172  004552  // Usage : n := str_Find(&p, "hello");
004173  004553  // Notes : given the address of a pointer to a source string as the
004174  004554  //       : first argument, and a pointer to a test string as the second
004175  004555  //       : argument, attempt to find the position of the matching string
004176  004556  //       : in the source string. The test is performed with no case
004177  004557  //       : sensitivity, eg upper and lower case chars are accepted.
004178  004558  //       : return 0 if not found, else returns the address of the first
004179  004559  //       : character of the match. NB:- The source pointer is not altered.
004180  004560        
004181  004561  func str_Length("ptr"), 1;
004182  004562  // Syntax: str_Length(ptr);
004183  004563  // Usage : len := str_Ptr(mystring);
004184  004564  // Notes : return the length of a byte aligned string excluding terminator
004185  004565        
004186  004566  func str_Printf("&ptr", "*format"), 1;
004187  004567  // Syntax: str_Printf("&ptr", "*format");
004188  004568  // Usage : r := str_Printf(&p, "hello");
004189  004569  // Notes : refer to documentation
004190  004570  //       :
004191  004571        
004192  004572  func str_Cat("dest","src"), 1;
004193  004573  // Syntax: str_Append("&dest","&src");
004194  004574  // Usage : str_Append(&buf,"Hello");
004195  004575  // Notes : Appends a copy of the source string to the destination string.
004196  004576  //       : The terminating null character in destination is overwritten by
004197  004577  //       : the first character of source, and a new null-character is appended
004198  004578  //       : at the end of the new string formed by the concatenation of both in destination.
004199  004579  //       : returns destination.
004200  004580        
004201  004581  func str_CatN("dest","src","count"), 1;
004202  004582  // Syntax: str_Append("&dest","&src","count");
004203  004583  // Usage : str_Append(&buf,"Monday",3);
004204  004584  // Notes : Appends a copy of the source string to the destination string.
004205  004585  //       : The number of characters copied is limited by "count".
004206  004586  //       : The terminating null character in destination is overwritten by
004207  004587  //       : the first character of source, and a new null-character is appended
004208  004588  //       : at the end of the new string formed by the concatenation of both in destination.
004209  004589  //       : returns destination.
004210  004590        
004211  004591        
004212  004592  func str_ByteMove("src", "dest", "count"), 1;
004213  004593  // Syntax   : str_ByteMove(src, dest, bytecount);
004214  004594  // Input    : STR *source points to byte aligned source.
004215  004595  //          : STR *dest   points to byte aligned destination.
004216  004596  //          : VAR count   number of bytes to transfer.
004217  004597  // Usage    : nextpos := str_ByteMove(s, d, 100);
004218  004598  // Notes    : copy bytes from "src" to "dest", stopping only
004219  004599  //          : when "count" is exhausted.
004220  004600  //          : No terminator is appended, it is purely a
004221  004601  //          : byte copy, and any zeroes encountered will
004222  004602  //          : also be copied.
004223  004603  // Returns  : returns a pointer to the end of the destination
004224  004604  //          : (which is "dest" + "count")
004225  004605        
004226  004606        
004227  004607  func str_Copy("dest", "src"), 1;
004228  004608  // Syntax   : str_Copy(dest, src);
004229  004609  // Input    : STR *dest   points to byte aligned destination.
004230  004610  //          : STR *source points to byte aligned source.
004231  004611  // Usage    : nextplace := str_Copy(d, s);
004232  004612  // Notes    : copy a string from "src" to "dest", stopping only
004233  004613  //          : when the end of source string "src" is encountered
004234  004614  //          : (0x00 terminator).
004235  004615  //          : The terminator is always appended, even if "src" is
004236  004616  //          : an empty string.
004237  004617  // Returns  : returns a pointer to the 0x00 string terminator at
004238  004618  //          : end of "dest" (which is "dest" + str_Length(src); )
004239  004619        
004240  004620        
004241  004621  func str_CopyN("dest", "src", "count"), 1;
004242  004622  // Syntax   : str_CopyN(dest, src, bytecount);
004243  004623  // Input    : STR *dest   points to byte aligned destination.
004244  004624  //          : STR *source points to byte aligned source.
004245  004625  //          : VAR count   max number of chars to copy.
004246  004626  // Usage    : nextplace := str_CopyN(d, s, 100);
004247  004627  // Notes    : copy a string from "src" to "dest", stopping only
004248  004628  //          : when "count" is exhausted, or end of source
004249  004629  //          : string "str" is encountered (0x00 string terminator).
004250  004630  //          : The terminator is always appended, even if
004251  004631  //          : "count" is zero, or "src" is a null string.
004252  004632  // Returns  : returns a pointer to the 0x00 string terminator
004253  004633  //          : (which is "dest" + whatever was copied)
004254  004634        
004255  004635        
004256  004636  func __reserved63(), 0; // do not remove
004257  004637  func __reserved64(), 0; // do not remove
004258  004638  func __reserved65(), 0; // do not remove
004259  004639  func __reserved66(), 0; // do not remove
004260  004640        
004261  004641  //=========================================================================================================
004262  004642  // FLASH memory functions
004263  004643  //=========================================================================================================
004264  004644  func flash_GetByte("bank", "ptr"), 1;
004265  004645  // Syntax   : flash_GetByte(bank, ptr);
004266  004646  // Usage    : myvar := flash_GetByte(FLASHBANK_2, 0x0017); // read first byte in data statement of bank 2
004267  004647  // Notes    : Reads a single byte from any flash location.
004268  004648  //          : If the bank is read protected, only the first 2 bytes can be read (0x55, 0xAA)
004269  004649  //          : which is the header signature for a valid program.
004270  004650  // Returns  : the byte value from the location
004271  004651        
004272  004652        
004273  004653  func flash_GetWord("bank", "ptr"), 1;
004274  004654  // Syntax   : flash_GetWord(bank, ptr);
004275  004655  // Usage    : myvar := flash_GetWord(FLASHBANK_2, 0x0000); // read first word in flash bank  (0xAA55)
004276  004656  // Notes    : Reads a single word from any flash location.
004277  004657  //          : The pointer is byte aligned.
004278  004658  //          : If the bank is read protected, only the first word can be read
004279  004659  //          : which is the header signature for a valid program (0xAA55).
004280  004660  // Returns  : the byte value from the location
004281  004661        
004282  004662        
004283  004663  func flash_Copy("bank", "ptr", "dest", "count"), 1;
004284  004664  // Syntax   : flash_Copy(bank, ptr);
004285  004665  // Usage    : myvar := flash_Copy(FLASHBANK_2, 0x1234, mybuf, 20); // read 20 bytes from FLASHBANK_2 starting from 0x1234
004286  004666  // Notes    : Copies bytes from any flash locations to a user buffer.
004287  004667  //          : The destination pointer is byte aligned, so a str_Ptr must be raised to get correct address.
004288  004668  //          : If the bank is read protected, 0 bytes will be read
004289  004669  //          : which is the header signature for a valid program (0xAA55).
004290  004670  // Returns  : the count of bytes transferred.
004291  004671        
004292  004672        
004293  004673  func flash_Run("bank"), 1;
004294  004674  // Syntax    : flash_Run(bankx);
004295  004675  // Usage     : res := flash_Run(FLASHBANK_5);
004296  004676  // Notes     : Restarts the processor, running code from the required
004297  004677  //           : flash bank. bank may be a variable, or one of the
004298  004678  //           : pre-defined constants:-
004299  004679  //           :    FLASHBANK_0                 //0x00
004300  004680  //           :    FLASHBANK_1                 //0x01
004301  004681  //           :    FLASHBANK_2                 //0x02
004302  004682  //           :    FLASHBANK_3                 //0x03
004303  004683  //           :    FLASHBANK_4                 //0x04
004304  004684  //           :    FLASHBANK_5                 //0x05
004305  004685  // returns    : This function should net return as it restarts
004306  004686  //        : the processor and jumps to the required bank,
004307  004687  //        : If it does return, -1 indicates incorrect/invalid
004308  004688  //        : bank number, and -2 indicates no valid program
004309  004689  //        : in the selected bank.
004310  004690        
004311  004691  func flash_Bank(), 1;
004312  004692  // Syntax   : flash_Bank();
004313  004693  // Usage    : myvar := flash_Bank();
004314  004694  // Notes    : Identifies which flash bank the code is running from.
004315  004695  // Returns  : The FLASH bank that code is currently running from, 0-5.
004316  004696        
004317  004697        
004318  004698  func flash_EraseBank("bank", "confirmation"), 1;
004319  004699  // Syntax   : flash_EraseBank(bank, confirmation);
004320  004700  // Usage    : result := flash_EraseBank(FLASHBANK_3, 0xDEAD); // erase an entire flash bank, confirm overwrite of protected program
004321  004701  // Notes    : This function should be used with extreme caution.
004322  004702  //          : The selected bank will be completely erased regardless of FLASH_WRITE_PROTECT status
004323  004703  //          : if the confirmation value is set to hex 0xDEAD. If confirmation is any other value,
004324  004704  //          : a protected bank will not be erased, and function will return with 0
004325  004705  //          : If the destination bank is the same as the execution bank, the processor will reset
004326  004706  //          : upon completion of erase. If the "bank" argument is set to ALL (-1) and confirmation is set to 0xDEAD
004327  004707  //          : FLASHBANK_0 thru FLASHBANK_5 are cleared.
004328  004708  //          : Used with caution, this is a good way to 'clean up' the entire flash when starting new projects.
004329  004709  // Returns  : returns true if the function succeeded
004330  004710  //          : NB:- reset processor if program is erasing itself, or the ALL bank option is selected.
004331  004711        
004332  004712  func flash_LoadFile("bank", "filename"), 1;
004333  004713  // Syntax   : flash_LoadFile(bank, ptr);
004334  004714  // Usage    : result := flash_LoadFile(FLASHBANK_2, "TETRIS10.EXE"); // load the file from disk into FLASHBANK_2
004335  004715  // Notes    : Copies a file from uSD to the required flashbank.
004336  004716  //          : The destination bank cannont be the execution bank, or a bank that is write protected
004337  004717  // Returns  : returns true if the function succeeded.
004338  004718        
004339  004719        
004340  004720  func flash_WriteBlock("sourceptr", "bank", "page"), 1;
004341  004721  // Syntax   : flash_WriteBlock(pbuf, bank, page);
004342  004722  // Usage    : result := flash_WriteBlock(buffer, FLASHBANK_5, 8); // store the 2k buffer to FLASHBANK_5, location 16384
004343  004723  // Notes    : Copies a 2kbyte buffer to the required flashbank in block 0-15.
004344  004724  //          : The address of each block is 0, 2048, 4096 etc, determined by the page number 0-15.
004345  004725  //          : The destination bank cannot be an execution bank, or a program bank that is write protected.
004346  004726  // Returns  : returns true if the function succeeded.
004347  004727        
004348  004728        
004349  004729  func flash_putstr("bank", "ptr"), 1;
004350  004730  // Syntax   : flash_putstr(bank, ptr);
004351  004731  // Usage    : flash_Copy(FLASHBANK_2, 350); // print a string from FLASHBANK_2, location 350
004352  004732  // Notes    : Works the same as putstr, however, the source of the asciiz string is in FLASH storage
004353  004733  //          : Output may be redirected with the to(..) function. Bit15 of ptr is assumed 0.
004354  004734  // Returns  : True if function succeeds, usually ignored. 0 if bank is read protected
004355  004735        
004356  004736  func flash_Blit16("bank", "offset", "count"), 1;
004357  004737  // Syntax   : flash_Blit16(bank, offset, pixelcount);
004358  004738  // Usage    : disp_setGRAM(10,10,29,29); flash_Blit16(FLASHBANK_5, 2048, 400); // display image at 10,10 (20 pixels square) from FLASH image source (800 bytes)
004359  004739  // Notes    : Blit an image to a GRAM window from FLASH storage.
004360  004740  //          : Image is stored 16bits per pixel (565) in a linear fashion to suit the GRAM mechanism
004361  004741  // Returns  : actual count (normally same as count, will be lower if bank bounds exceeded)
004362  004742        
004363  004743  func flash_Blit8("bank", "offset", "count"), 1;
004364  004744  // Syntax   : flash_Blit8(bank, offset, pixelcount);
004365  004745  // Usage    : disp_setGRAM(10,10,29,29); flash_Blit8(FLASHBANK_5, 2048, 400); // display image at 10,10 (20 pixels square) from FLASH image source (400 bytes)
004366  004746  // Notes    : Blit an image to a GRAM window from FLASH storage.
004367  004747  //          : Image is stored 8 bits per pixel (332 format) in a linear fashion to suit the GRAM mechanism
004368  004748  // Returns  : actual count (normally same as count, will be lower if bank bounds exceeded)
004369  004749        
004370  004750  func flash_Blit4("bank", "offset", "count", "palette16colour"), 1;
004371  004751  // Syntax   : flash_Blit16(bank, offset, pixelcount, pal16);
004372  004752  // Usage    : disp_setGRAM(10,10,29,29); flash_Blit4(FLASHBANK_5, 2048, 400); // display image at 10,10 (20 pixels square) from FLASH image source (200 bytes packed 4:4)
004373  004753  // Notes    : Blit an image to a GRAM window from FLASH storage.
004374  004754  //          : Image is stored in a linear fashion to suit the GRAM mechanism, palette is 16 x 16bit colours
004375  004755  // Returns  : actual count (normally same as count, will be lower if bank bounds exceeded)
004376  004756        
004377  004757  func flash_Blit2("bank", "offset", "count", "palette4colour"), 1;
004378  004758  // Syntax   : flash_Blit16(bank, offset, pixelcount, pal4);
004379  004759  // Usage    : disp_setGRAM(10,10,29,29); flash_Blit2(FLASHBANK_5, 2048, 400); // display image at 10,10 (20 pixels square) from FLASH image source (100 bytes packed 2:2:2:2)
004380  004760  // Notes    : Blit an image to a GRAM window from FLASH storage.
004381  004761  //          : Image is stored in a linear fashion to suit the GRAM mechanism, palette is 4 x 16bit colours
004382  004762  // Returns  : actual count (normally same as count, will be lower if bank bounds exceeded)
004383  004763        
004384  004764  func flash_Blit1("bank", "offset", "count", "pallete2colour"), 1;
004385  004765  // Syntax   : flash_Blit1(bank, offset, pixelcount, pal2);
004386  004766  // Usage    : disp_setGRAM(10,10,29,29); flash_Blit1(FLASHBANK_5, 2048, 400); // display image at 10,10 (20 pixels square) from FLASH image source (50 bytes packed 1:1:1:1:1:1:1:1)
004387  004767  // Notes    : Blit an image to a GRAM window from FLASH storage.
004388  004768  //          : Image is stored in a linear fashion to suit the GRAM mechanism, palette is 2 x 16bit colours
004389  004769  // Returns  : actual count (normally same as count, will be lower if bank bounds exceeded)
004390  004770        
004391  004771  func flash_Exec("bank", "arglistptr"), 1;
004392  004772  // Syntax: res := flash_Exec("bank","arglistptr");
004393  004773  // Usage : res := flash_Exec("bank","arglistptr");
004394  004774  // Notes : returns like a function, current program
004395  004775  //       : calling program is kept active and control returns to it.
004396  004776  //       : If arglistptr is 0, no arguments are passed, else
004397  004777  //       : arglist points to an array, the first element being
004398  004778  //       : the number of elements in the array.
004399  004779  //       : func 'main' in the called bank accepts the arguments.
004400  004780  // WARNING Not currently implemented!
004401  004781        
004402  004782        
004403  004783  func __reserved68(), 0; // do not remove
004404  004784  func __reserved69(), 0; // do not remove
004405  004785  func __reserved70(), 0; // do not remove
004406  004786        
004407  004787  //=========================================================================================================
004408  004788  // I/O and hardware functions
004409  004789  //=========================================================================================================
004410  004790        
004411  004791        
004412  004792        
004413  004793        
004414  004794  func pin_Pulseout("pin", "value"), 1;        // non blocking (program execution continues during pulse)
004415  004795  func pin_PulseoutB("pin", "value"), 1;    // blocking (program execution suspended during pulse)
004416  004796  // Syntax: pin_Pulseout(pin, value);
004417  004797  // Usage : pin_Pulseout(PA3, 100);                 // output 100msec pulse on PA3
004418  004798  // Notes : only available on PA0 to PA9
004419  004799  //       : Invert the state of an output for "value" milliseconds.
004420  004800  //       : pulseout is non blocking, that is, code execution may continue while
004421  004801  //       : a pulse is occuring, and pulses can occur on multiple pins simultaneously.
004422  004802  //       : If not already an output, pin is automatically made a push/pull output,
004423  004803  //       : and the last state of its output latch will determine pulse polarity.
004424  004804  //       : It's its open drain state is not altered if the pin was already an output.
004425  004805  //       : If pulseout is called while pulseout is still active, the pulse timer
004426  004806  //       : will simply be updated with the new "value" and the pulse will continue
004427  004807  //       : with the extended value.
004428  004808  //       : returns true if the pin number is legal (usually ignored)
004429  004809        
004430  004810        
004431  004811  func pin_Counter("pin", "mode", "OVFfunction"), 1;
004432  004812  // Syntax: pin_Counter(pin, mode, userfunc);
004433  004813  // Usage : pin_Counter(PA5, 1, stopfunc);         // count rising edge pulses on pin PA5, call stopfunc on overflow
004434  004814  // Notes : only available on PA4 to PA9
004435  004815  //       : Connect a counter to a pin to count transistions, and optionally call an event function
004436  004816  //       : when the 16bit counter wraps from 0xFFFF to zero. The counter can be read or written
004437  004817  //       : to at any time with peekW and pokeW, therefore, the count may be set to eg 0xFFF0 so that eg:
004438  004818  //       : user function "OVFfuction" will be called after 16 pulses. If "OVFfunction" is set to zero, only the
004439  004819  //       : counter will increment, and simply wrap back to zero from 0xFFFF. If "OVFfunction" points to a user
004440  004820  //       : function, wnen the event fires, pin_Counter will be disabled, and will need to be re-armed (ie '1shot' operation)
004441  004821  //       : The pin may be configured as an input or output, the function behaves the same.
004442  004822  //       : All six pin counters may be active simultaneously, and the maximum frequency of pin transistions
004443  004823  //       : should not exceed a few Khz in mode 1 and 2and are usually used for simple process control counting.
004444  004824  //       : "mode" has the following effect:-
004445  004825  //       : mode COUNT_OFF(0)  = disconnect the counter from the pin, "OVFfunction" therefore ignored, and counting is inhibited.
004446  004826  //       : mode COUNT_RISE(1) = increment on every rising edge
004447  004827  //       : mode COUNT_FALL(2) = increment on every falling edge
004448  004828  //       : mode COUNT_EDGE(3) = increment on every rising and falling edge
004449  004829        
004450  004830  //------------------------------------------------------------------//
004451  004831  // pin counter mode constants                                       //
004452  004832  //------------------------------------------------------------------//
004453  004833  #CONST
004454  004838  #END
004455  004839        
004456  004840  func Qencoder1("PHApin", "PHBpin", "mode"), 1;
004457  004841  // Syntax: Qencoder1(pinA, pinB, mode);
004458  004842  // Usage : Qencoder1(PA4, PA5, stopfunc);         // connect PA4 and PA5 pins to qudrature encoder module #1
004459  004843  // Notes : not available on pins PA14 and PA15
004460  004844  //       : Connect a quadrature encoder to a pair of pins The position counter and delta can be read
004461  004845  //       : or written to at any time with peekW and pokeW using the following constants:-
004462  004846  //       : It is necessary to configure the pins first, depending on your requirements, eg
004463  004847  //       :           pin_Set(PIN_INP_HI, PA4);     // PA4 as input, with pullup to Vcc
004464  004848  //       : or maybe  pin_Set(PIN_INP, PA4);        // PA4 as input, no pullup or pulldown
004465  004849  //       : Returns true if the pin numbers are legal (usually ignored)
004466  004850  //    QEN1_COUNTER_LO
004467  004851  //    QEN1_COUNTER_HI
004468  004852  //    QEN1_DELTA This is reset to 0 when read
004469  004853        
004470  004854  func Qencoder2("PHApin", "PHBpin", "mode"), 1;
004471  004855  // Syntax: Qencoder2(pinA, pinB, mode);
004472  004856  // Usage : Qencoder2(PA4, PA5, stopfunc);         // connect PA4 and PA5 pins to qudrature encoder module #2
004473  004857  // Notes : not available on pins PA14 and PA15
004474  004858  //       : Connect a quadrature encoder to a pair of pins The position counter and delta can be read
004475  004859  //       : or written to at any time with peekW and pokeW using the following constants:-
004476  004860  //       : It is necessary to configure the pins first, depending on your requirements, eg
004477  004861  //       :           pin_Set(PIN_INP_HI, PA4);     // PA4 as input, with pullup to Vcc
004478  004862  //       : or maybe  pin_Set(PIN_INP, PA4);        // PA4 as input, no pullup or pulldown
004479  004863  //       : Returns true if the pin numbers are legal (usually ignored)
004480  004864  //    QEN2_COUNTER_LO
004481  004865  //    QEN2_COUNTER_HI
004482  004866  //    QEN2_DELTA This is reset to 0 when read
004483  004867        
004484  004868        
004485  004869  func Qencoder1Reset(), 0;
004486  004870  // Syntax: Qencoder1Reset();
004487  004871  // Usage : Qencoder1Reset();     // reset the counter and delta value for encoder #1
004488  004872  // Notes :
004489  004873  //    QEN1_COUNTER_LO is reset to zero
004490  004874  //    QEN1_COUNTER_HI is reset to zero
004491  004875  //    QEN1_DELTA is reset to zero
004492  004876        
004493  004877  func Qencoder2Reset(), 0;
004494  004878  // Syntax: Qencoder2Reset();
004495  004879  // Usage : Qencoder2Reset();     // reset the counter and delta value for encoder #2
004496  004880  // Notes :
004497  004881  //    QEN2_COUNTER_LO is reset to zero
004498  004882  //    QEN2_COUNTER_HI is reset to zero
004499  004883  //    QEN2_DELTA is reset to zero
004500  004884        
004501  004885        
004502  004886  func pin_PulseoutCount("pin", "freq", "count", "function"), 1;        // pulse pin at freq count times calling function when complete
004503  004887  // Syntax: pin_PulseoutCount(pin, freq, count, function);
004504  004888  // Usage : pin_PulseoutCount(PA4, 1000, 5000, 0);            // output 5000 1msec pulses on PA3
004505  004889  // Notes : only available on PA4 to PA9, maximum 3 active at any one time
004506  004890  //       : Invert the state of an output at a "freq" freuency "count" times.
004507  004891  //       : PulseoutCount is non blocking, that is, code execution may continue while
004508  004892  //       : pulses are occuring, and pulses can occur on multiple pins simultaneously.
004509  004893  //       : If not already an output, pin is automatically made a push/pull output,
004510  004894  //       : and the last state of its output latch will determine pulse polarity.
004511  004895  //       : It's its open drain state is not altered if the pin was already an output.
004512  004896  //       : If PulseoutCount is called while PulseoutCount is still active, the pulse counter
004513  004897  //       : will simply have the new "value" added to it.
004514  004898  //       : returns false if the pin number is illegal, freq is < 10, or all counters in use
004515  004899  //       : returns true if the pin number is legal (usually ignored)
004516  004900        
004517  004901  func __reserved72(), 0; // do not remove
004518  004902        
004519  004903  func pwm_Init("pin", "mode", "value"), 1;    // set pin PA4-PA9 for the required PWM mode and select its source
004520  004904  // Syntax: pwm_Init(pin, value);
004521  004905  // Usage : pwm_Init(PA4, 1, 500);                 // output 50% duty cycle on PA4
004522  004906  // Notes : only available on PA4 to PA9
004523  004907  //       : Mode PWM_OFF(0)    : Turn off the PWM (pin is left as output)
004524  004908  //       : Mode PWM_PLAIN(1)  : Plain PWM value is 0-1000, corresponding to 0-100% duty cycle.
004525  004909  //       :                    : Raw frequency ~70khz. A value of 1 is not valid
004526  004910  //       : Mode PWM_SERVO(2)  : Servo PWM value is 100-200, corresponding to 1.00 to 2.00 ms
004527  004911  //       :                    : Values of 0 to 600 are valid (0-6ms), but should be used with caution.
004528  004912  //       :                    : Repetition rate ~50hz or 20ms
004529  004913  //       : Mode PWM_BINARY(3) : Binary PWM value is 0-1024, corresponding to 0-100% duty cycle.
004530  004914  //       :                    : Raw frequency ~68khz. A value of 1 is not valid
004531  004915  //       : pwm_Init is non blocking and the pwm continues until turn off
004532  004916  //       : Returns true if the pin number is legal (usually ignored)
004533  004917        
004534  004918  //------------------------------------------------------------------------------
004535  004919  // PWM Constants
004536  004920  //------------------------------------------------------------------------------
004537  004921  #CONST
004538  004934  #END
004539  004935        
004540  004936  func OW_Reset("pin"), 1;                             // issue 1wire reset command
004541  004937  // Syntax   : OW_Reset(PA0);
004542  004938  // Usage    : OW_Reset(PA0);
004543  004939  // Notes    : Only available on PA0 to PA13
004544  004940  //          : Resets  ONEWIRE device
004545  004941  //          : Returns the status, 0 = ACK.
004546  004942  //          :
004547  004943        
004548  004944  func OW_Read("pin"), 1;                              // read data from 1wire bus
004549  004945  // Syntax   : OW_Read(PA0);
004550  004946  // Usage    : arg1 := OW_Read(PA0);
004551  004947  // Notes    : Only available on PA0 to PA13
004552  004948  //          : Reads value of the ONEWIRE pin
004553  004949  //          : that was previously selected for ONEWIRE comms.
004554  004950  //          :
004555  004951  //          : pin = 0 : the next byte from the ONEWIRE bus
004556  004952        
004557  004953  func OW_Read9("pin"), 1;                             // read data from 1wire bus, 9bit mode
004558  004954  // Syntax   : OW_Read9(PA0);
004559  004955  // Usage    : OW_Read9(PA0);
004560  004956  // Notes    : Only available on PA0 to PA13
004561  004957  //          : Reads 9 bit value of the appropriate ONEWIRE pin
004562  004958  //          : that was previously selected for ONEWIRE comms.
004563  004959  //          :
004564  004960  //          : read the 9 bits from the ONEWIRE bus
004565  004961        
004566  004962  func OW_Write("pin", "value"), 0;                      // write value to 1wire device
004567  004963  // Syntax   : OW_Write(PA0, arg);
004568  004964  // Usage    : OW_Write(PA0, arg);
004569  004965  // Notes    : Only available on PA0 to PA13
004570  004966  //          : Sends ONEWIRE data on the appropriate
004571  004967  //          : pin that was previously  selected as ONEWIRE comms.
004572  004968  //          :
004573  004969  //          : write arg to the ONEWIRE bus
004574  004970        
004575  004971  func __reserved77(), 0; // do not remove
004576  004972  func __reserved78(), 0; // do not remove
004577  004973        
004578  004974  func sys_GetDateVar("&year", "&month", "&day"), 0;              // get year, month, day into variables
004579  004975  // Syntax: sys_GetDateVar(&year, &month, &day);
004580  004976  // Usage : sys_GetDateVar(&year, &month, &day);
004581  004977  // Notes : Retrieves the date values into variables
004582  004978        
004583  004979  func sys_GetTimeVar("&hour", "&minute", "&second", "&msecs"), 0;              // get hour, minute, second, millseconds into variables
004584  004980  // Syntax: sys_GetTimeVar(&hour, &minute, &second, &msecs);
004585  004981  // Usage : sys_GetTimeVar(&hour, &minute, &second, &msecs);
004586  004982  // Notes : Retrieves the time values into variables
004587  004983        
004588  004984  func sys_PmmC(), 0;
004589  004985  // Syntax: sys_PmmC();
004590  004986  // Usage : to(mystring); sys_PmmC();   // save PmmC name and revision string to buffer
004591  004987  // Notes : print the system PmmC name and revision eg "Diablo16\n1.0"
004592  004988  //       : Can be captured to a buffer using the to( function
004593  004989  //       : Returns nothing.
004594  004990        
004595  004991  func sys_Driver(), 0;
004596  004992  // Syntax: sys_Driver();
004597  004993  // Usage : to(mystring); sys_Driver();   // save Driver name and date string to buffer
004598  004994  // Notes : print the system PmmC name and revision eg "uLCD-32WDTU-A\n130411"
004599  004995  //       : Can be captured to a buffer using the to( function
004600  004996  //       : Returns nothing.
004601  004997        
004602  004998  func gfx_Scope("left", "width", "yzero", "n", "xstep", "Yamp", "colorbg", "&old_y1", "&new_y1", "color1", "&old_y2", "&new_y2", "color2", "&old_y3", "&new_y3", "color3", "&old_y4", "&new_y4", "color4"), 0;
004603  004999  // Notes : Draws up to 4 waveforms from table(s) of vertices at the specified origin.
004604  005000  //       : "Left" is the left margin, "Width" is the width, "yzero" is the y position
004605  005001  //       : that corresponds to a y value of zero, normally "Top" + "Height" for
004606  005002  //       : a graph, or "Top" + "Height"/2 for a scope. "n" is the number of
004607  005003  //       : elements in each buffer. This will need to be greater than "width" for negative
004608  005004  //       : "xstep" values. "Yamp" is for amplification in the Y direction, 100 is unity.
004609  005005  //       : pass 0 as the address for any unused traces
004610  005006  //       : X position is incremented each point by "xstep" pixels.
004611  005007  //       : Y values are derived from a Y buffer "newy" (signed values).
004612  005008  //       : 2 buffers need to be supplied, "newy" contains new
004613  005009  //       : points to be drawn, "oldy" contains most recent set
004614  005010  //       : of points to be un-drawn. After the waveform is drawn,
004615  005011  //       : "newy" buffer is automatically copied to "oldy" buffer.
004616  005012        
004617  005013        
004618  005014  func ana_HS("rate", "samples", "&IO1", "&IO2", "&IO3", "&IO4", "COMPLETEfunction"), 0;
004619  005015  // Syntax: ana_HS(rate, samples, IO1buf, IO2buf, IO3buf, IO4buf, userFunction);
004620  005016  // Usage : ana_HS(1000, 10, IO1buf, 0, 0, 0, myFunc);
004621  005017  // Notes : Collects "samples" samples at "rate" frequency for 0 to 4 analogue pins
004622  005018  //       : and calls "COMPLETEfunction" when done.
004623  005019  //       : "rate" is samples in 100 of samples per second
004624  005020  //       : Any unused IOx pins should have their buffer addresses set to 0
004625  005021  //       : For performance reasons samples are taken in chunks of 32, thus if you
004626  005022  //       : request 33 samples there will be a delay of 31 samples before
004627  005023  //       : "COMPLETEfunction" is called
004628  005024  //       : If Touch is enabled this function should be called no more than once per
004629  005025  //       : millisecond, otherwise touch behaviour could be eratic.
004630  005026        
004631  005027        
004632  005028  func sys_ErrorMessage("msgnum"), 1;
004633  005029        
004634  005030  //==============================//
004635  005031  // NeoPixel specific functions  //
004636  005032  //==============================//
004637  005033        
004638  005034  func NP_Write("pin", "data", "size", "Options", "RepeatFirst", "Repeat", "RepeatLast"), 1;    // Write a string of colours to a NeoPixel 'display'
004639  005035  // Syntax: NP_Write(pin, data, size, Options, RepeatFirst, Repeat, RepeatLast);
004640  005036  // Usage : NP_Write(PA4, data, 50, NP_565, 10, 0, 0);                 
004641  005037  // Notes : pin         : The I/O pin for the operation PA0 to PA13
004642  005038  //       : data        : Address of data to be sent
004643  005039  //       : size        : number of colour 'sets' to follow
004644  005040  //       : Options     : format of colour data to be sent, NP_565, NP_RGB, or NP_XRGB. i.e. 2, 3 or 4 bytes per colour
004645  005041  //       : RepeatFirst : Number of times to repeat the first colour (0 means first colour is not considered 'special')
004646  005042  //       : Repeat      : Number of times to repeat the colours between first and last
004647  005043  //       : RepeatLast  : Number of times to repeat the last colour (0 means last colour is not considered 'special')
004648  005044  //       : Returns true if the pin number is legal (usually ignored)
004649  005045  //       : Due to the critical timing requirements of the NeoPixel, the system Timer is disabled during this operation.
004650  005046  //       : Comms Interrupts should also be disabled by the user, otherwise errors may occur.
004651  005047        
004652  005048  // NeoPixel related constants
004653  005049  #CONST
004654  005053  #END
004655  005054        
004656  005055  func __reserved85(), 0; // do not remove
004657  005056  func __reserved86(), 0; // do not remove
004658  005057        
004659  005058  //==============================================//
004660  005059  // spi flash device specific functions          //
004661  005060  //==============================================//
004662  005061        
004663  005062  func spiflash_SIG("spi#", "enablepin"), 1;         // read Jedec signature from SPI Flash device
004664  005063  // Syntax   : spiflash_SIG("spi#","enablepin");
004665  005064  // Usage    : var := spiflash_SIG(SPI1, PA0);
004666  005065  // Notes    : A FLASH storage device connected to the selected SPI port, and correctly initialised with the
004667  005066  //          : spi_Init(...) function, the Electronic Signature of the device can be read using this function. The only
004668  005067  //          : devices supported so far are the M25Pxx range of devices which are 512Kbit to 128Mbit Serial Flash Memory.
004669  005068  //          : Other similar devices should also work, provided they do not exceed 128Mbit.
004670  005069  //          : Release from Deep Power-down, and Read Electronic Signature. Only the low order byte is valid, the upper
004671  005070  //          : byte is ignored.
004672  005071        
004673  005072  func spiflash_ID("spi#", "enablepin"), 1;          // read ID code from FLASH device
004674  005073  // Syntax   : spiflash_ID("spi#","enablepin");
004675  005074  // Usage    : var := spiflash_ID(SPI1, PA0);
004676  005075  // Notes    : A FLASH storage device connected to the selected SPI port, and correctly initialised with the
004677  005076  //          : spi_Init(...) function, the memory type and capacity from the flash device can be read using this function
004678  005077  //          : The only devices supported so far M25Pxx range of devices which are 512Kbit to 128Mbit Serial Flash Memory.
004679  005078  //          : Other similar devices should also work, provided they do not exceed 128Mbit.
004680  005079  //          : Reads the memory type and capacity from the serial FLASH device. Hi byte contains type, and low byte
004681  005080  //          : contains capacity. Refer to the device data sheet for further information.
004682  005081        
004683  005082  func spiflash_BulkErase("spi#", "enablepin"), 0;    // erase the entire FLASH device
004684  005083  // Syntax   : spiflash_BulkErase("spi#","enablepin");
004685  005084  // Usage    : spiflash_BulkErase(SPI1, PA0);
004686  005085  // Notes    : A FLASH storage device connected to the selected SPI port, and correctly initialised with the
004687  005086  //          : spi_Init(...) function, the FLASH device can be completely erased using this function. The only devices
004688  005087  //          : supported so far are the M25Pxx range of devices which are 512Kbit to 128Mbit Serial Flash Memory.
004689  005088  //          : Other similar devices should also work, provided they do not exceed 128Mbit.
004690  005089  //          : Erases the entire flash media device. The function returns no value, and the operation can take up to 80
004691  005090  //          : seconds depending on the size of the flash device. Note that not all devices support this command.
004692  005091        
004693  005092  func spiflash_BlockErase("spi#", "enablepin", "block"), 0;            // erase the required 64k flash block
004694  005093  // Syntax   : spiflash_BlockErase("spi#", "enablepin", "block")
004695  005094  // Usage    : var := spiflash_BlockErase(SPI1, PA0, block_num)
004696  005095  // Notes    : A FLASH storage device connected to the selected SPI port, and correctly initialised with the
004697  005096  //          : spi_Init(...) function, the FLASH block can be erased using this function. The only devices supported so
004698  005097  //          : far are the M25Pxx range of devices which are 512Kbit to 128Mbit Serial Flash Memory.
004699  005098  //          : Other similar devices should also work, provided they do not exceed 128Mbit.
004700  005099  //          : E.g. there are 32 x 64K blocks on a 2Mb flash device.
004701  005100  //          : blockAddress The address of the 64k FLASH block to be erased.
004702  005101  //          : Erases the required block in a FLASH media device. The function returns no value, and the operation
004703  005102  //          : can take up to 3 milliseconds.
004704  005103        
004705  005104  func spiflash_SetAdd("spi#", "HiWord", "LoWord"), 0;           // set stream byte address
004706  005105  // Syntax: spiflash_SetAdd(AddHiWord, AddLoWord);
004707  005106  // Usage : spiflash_SetAdd(SPI1, arg1, arg2);
004708  005107  // Notes : Set FLASH internal Address pointer for bytewise access on the specified SPI port
004709  005108        
004710  005109  func spiflash_Read("*dest", "size", "spi#", "enablepin"), 1;
004711  005110  // Syntax: res := spiflash_Read("*dest", "size", "spi#", "enablepin"),
004712  005111  // Usage : res := spiflash_Read(memblock, 20, SPI1, PA0);
004713  005112  // Notes : Reads the specified number of bytes from the FLASH memory device on the specified SPI port and enable pin
004714  005113  //       : into the specified destination. The destination is a string pointer (i.e. BYTE aligned). The source
004715  005114  //       : is the address set by spiflash_SetAdd(), or incremented by subsequent reads or writes.
004716  005115  //       : returns number of characters read
004717  005116  //       : if "dest" is zero, data is read direct to GRAM window
004718  005117  //       :
004719  005118        
004720  005119  func spiflash_Write("*source", "size", "spi#", "enablepin"), 1;
004721  005120  // Syntax: res := fwrite("*source", "size", "spi#", "enablepin"),
004722  005121  // Usage : res := fwrite(memblock, 20, SPI1, PA0);
004723  005122  // Notes : Writes the specified number of bytes to the FLASH memory device on the specified SPI port and enable pin
004724  005123  //       : from the specified source. The source is a standard address or pointer (i.e. WORD aligned). The target
004725  005124  //       : is the address set by spiflash_SetAdd(), or incremented by subsequent reads or writes.
004726  005125  //       : returns number of bytes written
004727  005126  //       :
004728  005127        
004729  005128  func spiflash_Image("x", "y", "spi#", "enablepin"), 1;
004730  005129  // Syntax: spiflash_Image(x, y, "spi#", "enablepin");
004731  005130  // Usage : spiflash_Image(10, 10, SPI1, PA0);
004732  005131  // Notes : Display an image from a file at the current FLASH position set by spiflash_SetAdd()
004733  005132  //       : The image is displayed at x,y (with respect to top left corner).
004734  005133        
004735  005134  func spiflash_PutC("char", "spi#", "enablepin"), 0;
004736  005135  // Syntax: spiflash_PutC("char", "spi#", "enablepin");
004737  005136  // Usage : spiflash_PutC('x', SPI1, PA0);
004738  005137  // Notes : Writes a character (or byte) to the FLASH memory device on the specified SPI port and enable pin
004739  005138  //       : from the specified source. The source is a standard address or pointer (i.e. WORD aligned). The target
004740  005139  //       : is the address set by spiflash_SetAdd(), or incremented by subsequent reads or writes.
004741  005140        
004742  005141  func spiflash_GetC("spi#", "enablepin"), 1;
004743  005142  // Syntax: spiflash_GetC("spi#", "enablepin");
004744  005143  // Usage : mychar := fgetC(SPI1, PA0);
004745  005144  // Notes : Reads a character (or byte) from the FLASH memory device on the specified SPI port and enable pin
004746  005145  //       : into the specified destination. The source is the address set by spiflash_SetAdd(), or incremented
004747  005146  //       : by subsequent reads or writes.
004748  005147  //       : returns next char from file
004749  005148        
004750  005149  func spiflash_PutW("word", "spi#", "enablepin"), 0;
004751  005150  // Syntax: spiflash_PutW("word", "spi#", "enablepin");
004752  005151  // Usage : spiflash_PutW(0x1234, SPI1, PA0);
004753  005152  // Notes : Writes a word to the FLASH memory device on the specified SPI port and enable pin
004754  005153  //       : from the specified source. The source is a standard address or pointer (i.e. WORD aligned). The target
004755  005154  //       : is the address set by spiflash_SetAdd(), or incremented by subsequent reads or writes.
004756  005155        
004757  005156  func spiflash_GetW("spi#", "enablepin"), 1;
004758  005157  // Syntax: spiflash_GetW("spi#", "enablepin");
004759  005158  // Usage : myword := fgetW(SPI1, PA0);
004760  005159  // Notes : Reads a word from the FLASH memory device on the specified SPI port and enable pin
004761  005160  //       : into the specified destination. The source is the address set by spiflash_SetAdd(), or incremented
004762  005161  //       : by subsequent reads or writes.
004763  005162  // Notes : returns next word in file
004764  005163        
004765  005164  func spiflash_PutS("*source", "spi#", "enablepin"), 1;
004766  005165  // Syntax: res := spiflash_Puts("*source", "spi#", "enablepin"),
004767  005166  // Usage : res := spiflash_Puts(mystring, SPI1, PA0);
004768  005167  // Notes : Writes a string to the FLASH memory device on the specified SPI port and enable pin
004769  005168  //       : from the specified source. The source is a standard address or pointer (i.e. WORD aligned). The target
004770  005169  //       : is the address set by spiflash_SetAdd(), or incremented by subsequent reads or writes.
004771  005170  //       : returns number of characters written
004772  005171  //       :
004773  005172        
004774  005173  func spiflash_GetS("*string", "size", "spi#", "enablepin"), 1;
004775  005174  // Syntax: res := spiflash_Gets("*string", "size", "spi#", "enablepin");
004776  005175  // Usage : res := spiflash_Gets(mystr , 81, SPI1, PA0); // read up to 80 chars
004777  005176  // Notes : Reads a string from the FLASH memory device on the specified SPI port and enable pin
004778  005177  //       : into the specified destination. The source is the address set by spiflash_SetAdd(), or incremented
004779  005178  //       : by subsequent reads or writes.
004780  005179  //       : returns pointer to string or null if failed.
004781  005180  //       : spiflash_GetS(...) automatically appends a null-terminator to the data read.
004782  005181  //       : NB:- only reads up to "size-1" characters into "string"
004783  005182  //       : spiflash_GetS(...) will stop reading when any of the following conditions are true:
004784  005183  //       : A] It has read n-1 bytes (one character is reserved for the null-terminator)
004785  005184  //       : B] It encounters a newline character (a line-feed in the compilers tested here), or
004786  005185  //       : C] It reaches the end of file
004787  005186  //       : D] A read error occurs.
004788  005187        
004789  005188  func spiflash_LoadFunction("spi#", "enablepin"), 1;
004790  005189  // Syntax: res := spiflash_LoadFunction("spi#", "enablepin");
004791  005190  // Usage : myfunc := spiflash_LoadFunction(SPI1, PA0);
004792  005191  // Notes : Load a function or program from the FLASH memory device on the specified SPI port and enable pin at
004793  005192  //       : the address set by spiflash_SetAdd(), or incremented by subsequent reads or writes and
004794  005193  //       : return a function pointer to the allocation.
004795  005194  //       : The function can then be invoked just like any other
004796  005195  //       : function would be called via a function pointer.
004797  005196  //       : Parameters may be passed to it in a conventional way.
004798  005197  //       : The function may be discarded at any time when no
004799  005198  //       : longer required, thus freeing its memory resources.
004800  005199  //       : The loaded function can be discarded with mem_Free(..)
004801  005200  //       : eg:
004802  005201  //       : popupWindow := spiflash_LoadFunction("popupWindow1.4fn");
004803  005202  //       : if(!popupWindow) goto LoadFunctionFailed; // could not load the function !!!
004804  005203  //       : then elsewhere in your program:-
004805  005204  //       : res := popupWindow(MYMODE,"My Title","My Popup Text");
004806  005205  //       : if(res == QUIT_APPLICATION) goto exitApp;
004807  005206  //       : Later in your program, when popupWindow is no longer
004808  005207  //       : required for the application:-
004809  005208  //       : res := mem_Free(popupWindow);
004810  005209  //       : if(!res) goto FreeFunctionFailed; // should never happen if memory not corrupted
004811  005210  //       : The callers stack is shared by the loaded function,
004812  005211  //       : however any global variables in the loaded function
004813  005212  //       : are private to that function.
004814  005213  //
004815  005214        
004816  005215  func spiflash_Run("spi#", "enablepin", "arglistptr"), 1;
004817  005216  // Syntax: res := spiflash_Run("spi#", "enablepin", "arglistptr");
004818  005217  // Usage : res := spiflash_Run(SPI1, PA0, argptr);
004819  005218  // Notes : current program releases any allocated memory but
004820  005219  //       : retains the stack and global memory.
004821  005220  //       : If arglistptr is 0, no arguments are passed, else
004822  005221  //       : arglist points to an array, the first element being
004823  005222  //       : the number of elements in the array.
004824  005223  //       : func 'main' in the called program accepts
004825  005224  //       : the arguments, if any. The arguments can only
004826  005225  //       : be passed by value, no pointers or references can be
004827  005226  //       : used as all memory is cleared before the file
004828  005227  //       : is loaded. Refer to spiflash_Exec and spiflash_LoadFunction
004829  005228  //       : for functions that can pass by reference.
004830  005229        
004831  005230  func spiflash_Exec("spi#", "enablepin", "arglistptr"), 1;
004832  005231  // Syntax: res := spiflash_Exec("spi#", "enablepin", "arglistptr");
004833  005232  // Usage : res := spiflash_Exec(SPI1, PA0, "arglistptr");
004834  005233  // Notes : returns like a function, current program
004835  005234  //       : calling program is kept active and control returns to it.
004836  005235  //       : If arglistptr is 0, no arguments are passed, else
004837  005236  //       : arglist points to an array, the first element being
004838  005237  //       : the number of elements in the array.
004839  005238  //       : func 'main' in the called program accepts the arguments.
004840  005239  //       : This function is similar to spiflash_LoadFunction(...), however,
004841  005240  //       : the function argument list is passed by pointer, and
004842  005241  //       : the memory consumed by the function is released as
004843  005242  //       : soon as the function completes.
004844  005243        
004845  005244  func spiflash_LoadImageControl("spi#", "enablepin"), 1;
004846  005245  // Syntax: hImagelist := spiflash_LoadImageControl ("spi#", "enablepin"),
004847  005246  // Usage : hImagelist := spiflash_LoadImageControl (SPI1, PA0);
004848  005247  // Notes : Reads a control file to create an image list from the FLASH memory device on the specified SPI port
004849  005248  //       : and enable pin. The source is the address set by spiflash_SetAdd(), or incremented by subsequent reads
004850  005249  //       : or writes. The ".dat" file is first and is immediately followed a ^Z and then by the ".gci' file.
004851  005250  //       : Returns NULL if function fails.
004852  005251  //       : Returns a handle (pointer to the memory allocation) to the
004853  005252  //       : image control list that has been created.
004854  005253        
004855  005254  // Notes : This function Calculates the size of a chunk of memory required for
004856  005255  //       : a image list and populates it from the image control file ("*.dat")
004857  005256  //       : therefore, when imagelist is no longer required, you must de-allocate
004858  005257  //       : the image list memory by using eg:- mem_Free(hImagelist);
004859  005258  //       : to restore the heap.
004860  005259  //       :
004861  005260        
004862  005261  func spiflash_PlayWAV("spi#", "enablepin"), 1;
004863  005262  // Syntax: spiflash_PlayWAV("spi#", "enablepin");
004864  005263  // Usage : spiflash_PlayWAV(SPI1, PA0);
004865  005264  // Notes : Play a wave file from the FLASH memory device on the specified SPI port and enable pin.
004866  005265  //       : The source is the address set by spiflash_SetAdd(), or incremented by subsequent reads
004867  005266  //       : or writes.
004868  005267  //       : This function automatically grabs a chunk
004869  005268  //       : of memory for a file buffer, and a wave
004870  005269  //       : buffer. The minimum memory requirement is
004871  005270  //       : about 580 bytes for the disk io service and
004872  005271  //       : a minimum wave buffer size of 1024. The size
004873  005272  //       : of the wave buffer allocation
004874  005273  //       : can be increased by the snd_BufSize function.
004875  005274  //       : The default size 1024 bytes.
004876  005275  //       : NB the memory is only required during the
004877  005276  //       : duration of play, and is automatically
004878  005277  //       : released while not in use.
004879  005278  //       : See the Sound Class services for other associated controls.
004880  005279  //       : If there are no errors, returns number of blocks to play (1 to 32767)
004881  005280  //       : If errors occured, the folling is returned
004882  005281  //       : -7  : Insufficient memory available for WAV buffer and file
004883  005282  //       : -6  : cant play this rate
004884  005283  //       : -5  : no data chunk found in first rsector
004885  005284  //       : -4  : no format data
004886  005285  //       : -3  : no wave chunk signature
004887  005286  //       : -2  : bad wave file format
004888  005287  //       : -1  : file not found
004889  005288        
004890  005289  //==============================================//
004891  005290  // more com functions                           //
004892  005291  //==============================================//
004893  005292        
004894  005293  func com1_TXblock("buf", "bufsize"), 0;                       // commence a block transmission
004895  005294  // Syntax   : com1_TXblock("buf", "bufsize");
004896  005295  // Usage    : com1_TXblock(mybuf, 30);                         // point to the TX buffer and send 30 character
004897  005296  // *Notes   : Bufsize bytes are transmitted to the serial port from the string pointer "buf".
004898  005297  //          : if a transmit buffer is active and space is available this function will return almost
004899  005298  //          : immediately otherwise it will block until until the space is available, or the data is transmitted.
004900  005299        
004901  005300  func com1_RXblock("buf", "bufsize"), 0;                       // commence a block reception
004902  005301  // Syntax   : com1_RXblock("buf", "bufsize");
004903  005302  // Usage    : com1_RXblock(mybuf, 30);                        // point to the RX buffer and receive 30 character
004904  005303  // *Notes   : Bufsize bytes are received from the serial port to the string pointer "buf".
004905  005304  //          : if a receive buffer is active and bufsize characters are available this function will return almost
004906  005305  //          : immediately otherwise it will block until until the required bytes are received.
004907  005306        
004908  005307  func com2_TXblock("buf", "bufsize"), 0;                       // commence a block transmission
004909  005308  // Syntax   : com_TXblock("buf", "bufsize");
004910  005309  // Usage    : com_TXblock(mybuf, 30);                         // point to the TX buffer and send 30 character
004911  005310  // *Notes   : Bufsize bytes are transmitted to the serial port from the string pointer "buf".
004912  005311  //          : if a transmit buffer is active and space is available this function will return almost
004913  005312  //          : immediately otherwise it will block until until the space is available, or the data is transmitted.
004914  005313        
004915  005314  func com2_RXblock("buf", "bufsize"), 0;                       // commence an block reception
004916  005315  // Syntax   : com_RXblock("buf", "bufsize");
004917  005316  // Usage    : com_RXblock(mybuf, 30);                        // point to the RX buffer and receive 30 character
004918  005317  // *Notes   : Bufsize bytes are received from the serial port to the string pointer "buf".
004919  005318  //          : if a receive buffer is active and bufsize characters are available this function will return almost
004920  005319  //          : immediately otherwise it will block until until the required bytes are received.
004921  005320        
004922  005321  func com3_TXblock("buf", "bufsize"), 0;                       // commence a block transmission
004923  005322  // Syntax   : com_TXblock("buf", "bufsize");
004924  005323  // Usage    : com_TXblock(mybuf, 30);                         // point to the TX buffer and send 30 character
004925  005324  // *Notes   : Bufsize bytes are transmitted to the serial port from the string pointer "buf".
004926  005325  //          : if a transmit buffer is active and space is available this function will return almost
004927  005326  //          : immediately otherwise it will block until until the space is available, or the data is transmitted.
004928  005327        
004929  005328  func com3_RXblock("buf", "bufsize"), 0;                       // commence an block reception
004930  005329  // Syntax   : com_RXblock("buf", "bufsize");
004931  005330  // Usage    : com_RXblock(mybuf, 30);                        // point to the RX buffer and receive 30 character
004932  005331  // *Notes   : Bufsize bytes are received from the serial port to the string pointer "buf".
004933  005332  //          : if a receive buffer is active and bufsize characters are available this function will return almost
004934  005333  //          : immediately otherwise it will block until until the required bytes are received.
004935  005334        
004936  005335  func disp_BlitPixelsFromCOM1(), 0;                     // Writes current GRAM window pixels to the display from the COM port
004937  005336  // Syntax: disp_BlitPixelsFromCOM1();                  New in v1.1
004938  005337  // Usage : disp_BlitPixelsFromCOM1();
004939  005338  // Notes : Writes the number of pixels defined by the last disp_setGRAM() call to the
004940  005339  //       : display from the specified com port.
004941  005340        
004942  005341  func disp_BlitPixelsFromCOM2(), 0;                     // Writes current GRAM window pixels to the display from the COM port
004943  005342  // Syntax: disp_BlitPixelsFromCOM2();                  New in v1.1
004944  005343  // Usage : disp_BlitPixelsFromCOM2();
004945  005344  // Notes : Writes the number of pixels defined by the last disp_setGRAM() call to the
004946  005345  //       : display from the specified com port.
004947  005346        
004948  005347  func disp_BlitPixelsFromCOM3(), 0;                     // Writes current GRAM window pixels to the display from the COM port
004949  005348  // Syntax: disp_BlitPixelsFromCOM3();                  New in v1.1
004950  005349  // Usage : disp_BlitPixelsFromCOM3();
004951  005350  // Notes : Writes the number of pixels defined by the last disp_setGRAM() call to the
004952  005351  //       : display from the specified com port.
004953  005352        
004954  005353        
004955  005354  //==============================================//
004956  005355  // crc generation functions                     //
004957  005356  //==============================================//
004958  005357        
004959  005358  func crc_CSUM_8("buf","count"), 1;                      // given a pointer to a buffer and a byte count, calculate the 8bit LRC
004960  005359  // *Notes   : (if you calculate all of the incoming data
004961  005360  //          : INCLUDING the CRC, the result should be 0x00
004962  005361  //          : This is equivalent to simple addition of all bytes
004963  005362  //          : and returning the negated sum an 8 bit value.
004964  005363  //          : For the standard test string "123456789",
004965  005364  //          : crc_CSUM_8 will return 0x0023.
004966  005365        
004967  005366        
004968  005367  func crc_16("buf","count"), 1;                      // given a pointer to a buffer and a byte count, calculate CRC16
004969  005368  // *Notes   : The "mode" argument may be READ, WRITE or CHECK
004970  005369  //          : (if you calculate all of the incoming data
004971  005370  //          : INCLUDING the CRC, the result should be 0x0000
004972  005371  //          : For the standard test string "123456789",
004973  005372  //          : crc_16 will return 0xBB3D.
004974  005373        
004975  005374        
004976  005375  func crc_MODBUS("buf","count"), 1;                  // given a pointer to a buffer and a byte count, calculate CRC16 for MODBUS
004977  005376  // *Notes   : (if you calculate all of the incoming data
004978  005377  //          : INCLUDING the CRC, the result should be 0x0000
004979  005378  //          : For the standard test string "123456789",
004980  005379  //          : crc_MODBUS will return 0x4B37.
004981  005380        
004982  005381        
004983  005382  func crc_CCITT("buf","count","seed"), 1;            // given a pointer to a buffer, byte count and seed, calculate the 16bit CRC for seed
004984  005383  // *Notes   : (if you calculate all of the incoming data
004985  005384  //          : INCLUDING the CRC, the result should be 0x0000
004986  005385  //          : For the standard test string "123456789",
004987  005386  //          : crc_CCITT will return the following:-
004988  005387  //          : seed = 0 (XMODEM protocol) result = 0x31C3
004989  005388  //          : seed = 0xFFFF, result = 0x29B1
004990  005389  //          : seed = 0x1D0F, result = 0xE5CC
004991  005390        
004992  005391  func __reserved87(), 0; // do not remove
004993  005392  func __reserved88(), 0; // do not remove
004994  005393  func __reserved89(), 0; // do not remove
004995  005394        
004996  005395  //----------------------------------------------------------------------------//
004997  005396  //  functions to support buffered transmission and reception of break signal  //
004998  005397  //----------------------------------------------------------------------------//
004999  005398        
005000  005399  func com_TXbufferBrk("buf", "bufsize", "pin"), 0;    // sets the buffer location for buffered transmission
005001  005400  // Usage : com_TXbufferBrk(mybuf, 1024, PA0);    // set the TX buffer, using PA0 for turnaround
005002  005401  // Usage : com_TXbufferBrk(0, 0, 0);             // revert to non buffered service
005003  005402  // Notes : initialize a serial buffer for the COM0 output.
005004  005403  //       : The program must declare a var array as a circular buffer.
005005  005404  //       : When a TX buffer is declared for comms, the transmission
005006  005405  //       : of characters becomes non blocking. If the buffer has
005007  005406  //       : insufficient space to accept the next character from a
005008  005407  //       : serout_x() function, the excess characters will be ignored,
005009  005408  //       : and the com_Full_x() error will be asserted.   If the
005010  005409  //       : TX buffer is no longer required, just set the buffer pointer
005011  005410  //       : to zero, the size in this case doesnt matter and is ignored.
005012  005411  //       : The function can resize or reallocated to another buffer at
005013  005412  //       : any time. The buffer is flushed before any changes are made.
005014  005413  //       : "pin" designates an IO pin to control a bi-directional
005015  005414  //       : control device for half duplex mode. "pin" will go HI at the
005016  005415  //       : start of a transmission, and will return low after the final
005017  005416  //       : byte is transmitted. If not required, just set "pin" to zero.
005018  005417        
005019  005418  func com1_TXbufferBrk("buf", "bufsize", "pin"), 0;
005020  005419  // Usage : com1_TXbufferBrk(mybuf, 1024, PA0);    // set the TX buffer, using PA0 for turnaround
005021  005420  // Usage : com1_TXbufferBrk(0, 0, 0);              // revert to non buffered service
005022  005421  // Notes : initialize a serial buffer for the COM0 output.
005023  005422  //       : The program must declare a var array as a circular buffer.
005024  005423  //       : When a TX buffer is declared for comms, the transmission
005025  005424  //       : of characters becomes non blocking. If the buffer has
005026  005425  //       : insufficient space to accept the next character from a
005027  005426  //       : serout_x() function, the excess characters will be ignored,
005028  005427  //       : and the com_Full_x() error will be asserted.   If the
005029  005428  //       : TX buffer is no longer required, just set the buffer pointer
005030  005429  //       : to zero, the size in this case doesnt matter and is ignored.
005031  005430  //       : The function can resize or reallocated to another buffer at
005032  005431  //       : any time. The buffer is flushed before any changes are made.
005033  005432  //       : "pin" designates an IO pin to control a bi-directional
005034  005433  //       : control device for half duplex mode. "pin" will go HI at the
005035  005434  //       : start of a transmission, and will return low after the final
005036  005435  //       : byte is transmitted. If not required, just set "pin" to zero.
005037  005436        
005038  005437  func com2_TXbufferBrk("buf", "bufsize", "pin"), 0;
005039  005438  // Usage : com2_TXbufferBrk(mybuf, 1024, PA0);    // set the TX buffer, using PA0 for turnaround
005040  005439  // Usage : com2_TXbufferBrk(0, 0, 0);              // revert to non buffered service
005041  005440  // Notes : initialize a serial buffer for the COM0 output.
005042  005441  //       : The program must declare a var array as a circular buffer.
005043  005442  //       : When a TX buffer is declared for comms, the transmission
005044  005443  //       : of characters becomes non blocking. If the buffer has
005045  005444  //       : insufficient space to accept the next character from a
005046  005445  //       : serout_x() function, the excess characters will be ignored,
005047  005446  //       : and the com_Full_x() error will be asserted.   If the
005048  005447  //       : TX buffer is no longer required, just set the buffer pointer
005049  005448  //       : to zero, the size in this case doesnt matter and is ignored.
005050  005449  //       : The function can resize or reallocated to another buffer at
005051  005450  //       : any time. The buffer is flushed before any changes are made.
005052  005451  //       : "pin" designates an IO pin to control a bi-directional
005053  005452  //       : control device for half duplex mode. "pin" will go HI at the
005054  005453  //       : start of a transmission, and will return low after the final
005055  005454  //       : byte is transmitted. If not required, just set "pin" to zero.
005056  005455        
005057  005456  func com3_TXbufferBrk("buf", "bufsize", "pin"), 0;
005058  005457  // Usage : com3_TXbufferBrk(mybuf, 1024, PA0);    // set the TX buffer, using PA0 for turnaround
005059  005458  // Usage : com3_TXbufferBrk(0, 0, 0);              // revert to non buffered service
005060  005459  // Notes : initialize a serial buffer for the COM0 output.
005061  005460  //       : The program must declare a var array as a circular buffer.
005062  005461  //       : When a TX buffer is declared for comms, the transmission
005063  005462  //       : of characters becomes non blocking. If the buffer has
005064  005463  //       : insufficient space to accept the next character from a
005065  005464  //       : serout_x() function, the excess characters will be ignored,
005066  005465  //       : and the com_Full_x() error will be asserted.   If the
005067  005466  //       : TX buffer is no longer required, just set the buffer pointer
005068  005467  //       : to zero, the size in this case doesnt matter and is ignored.
005069  005468  //       : The function can resize or reallocated to another buffer at
005070  005469  //       : any time. The buffer is flushed before any changes are made.
005071  005470  //       : "pin" designates an IO pin to control a bi-directional
005072  005471  //       : control device for half duplex mode. "pin" will go HI at the
005073  005472  //       : start of a transmission, and will return low after the final
005074  005473  //       : byte is transmitted. If not required, just set "pin" to zero.
005075  005474        
005076  005475  func com_InitBrk("buf","bufsize","qualifier"), 0;  // set up a interrupt driven ring buffer for comms
005077  005476  // Syntax: com_InitBrk(buffer, bufsize, qualifier);
005078  005477  // Usage1: com_InitBrk(mybuf, 20, 0);
005079  005478  // Usage2: com_InitBrk(mybuf, 20, ':');
005080  005479  // Notes : initialize a serial capture buffer for the comms input
005081  005480  //       : The program must declare a var array as a circular buffer.
005082  005481  //       : Usage1 declares a circular buffer which will continually
005083  005482  //       : buffer characters.
005084  005483  //       : Usage2 must receive ':' before any characters will
005085  005484  //       : accumulate in the buffer.
005086  005485        
005087  005486  func com1_InitBrk("buf","bufsize","qualifier"), 0;
005088  005487  // Syntax: com1_InitBrk(buffer, bufsize, qualifier);
005089  005488  // Usage1: com1_InitBrk(mybuf, 20, 0);
005090  005489  // Usage2: com1_InitBrk(mybuf, 20, ':');
005091  005490  // Notes : initialize a serial capture buffer for the comms input
005092  005491  //       : The program must declare a var array as a circular buffer.
005093  005492  //       : Usage1 declares a circular buffer which will continually
005094  005493  //       : buffer characters.
005095  005494  //       : Usage2 must receive ':' before any characters will
005096  005495  //       : accumulate in the buffer.
005097  005496        
005098  005497  func com2_InitBrk("buf","bufsize","qualifier"), 0;
005099  005498  // Syntax: com2_InitBrk(buffer, bufsize, qualifier);
005100  005499  // Usage1: com2_InitBrk(mybuf, 20, 0);
005101  005500  // Usage2: com2_InitBrk(mybuf, 20, ':');
005102  005501  // Notes : initialize a serial capture buffer for the comms input
005103  005502  //       : The program must declare a var array as a circular buffer.
005104  005503  //       : Usage1 declares a circular buffer which will continually
005105  005504  //       : buffer characters.
005106  005505  //       : Usage2 must receive ':' before any characters will
005107  005506  //       : accumulate in the buffer.
005108  005507        
005109  005508  func com3_InitBrk("buf","bufsize","qualifier"), 0;
005110  005509  // Syntax: com3_InitBrk(buffer, bufsize, qualifier);
005111  005510  // Usage1: com3_InitBrk(mybuf, 20, 0);
005112  005511  // Usage2: com3_Init(mybuf, 20, ':');
005113  005512  // Notes : initialize a serial capture buffer for the comms input
005114  005513  //       : The program must declare a var array as a circular buffer.
005115  005514  //       : Usage1 declares a circular buffer which will continually
005116  005515  //       : buffer characters.
005117  005516  //       : Usage2 must receive ':' before any characters will
005118  005517  //       : accumulate in the buffer.
005119  005518        
005120  005519  //------------------------------------------------------------------//
005121  005520  //     break control constant                                       //
005122  005521  //------------------------------------------------------------------//
005123  005522  #constant BREAK      0xFFFD    // interpretation of the break signal
005124  005522  #constant BREAK      0xFFFD    // interpretation of the break signal
005125  005523        
005126  005524  //------------------------------------------------------------------//
005127  005525  // CONSTANTS
005128  005526  //------------------------------------------------------------------//
005129  005527        
005130  005528  #CONST
005131  005532  #END
005132  005533        
005133  005534  // timebase constants for timebase_init
005134  005535  // NB only TB2 and TB4 can be used for synchronous A2D sampling.
005135  005536  #CONST
005136  005547  #END
005137  005548        
005138  005549        
005139  005550  // generic constants
005140  005551  #CONST
005141  005559  #END
005142  005560        
005143  005561        
005144  005562        
005145  005563  //gfx_Get() related constants
005146  005564  #CONST
005147  005573  #END
005148  005574        
005149  005575        
005150  005576        
005151  005577        
005152  005578  #CONST
005153  005591  #END
005154  005592        
005155  005593        
005156  005594  #CONST
005157  005619  #END
005158  005620        
005159  005621        
005160  005622        
005161  005623        
005162  005624  // timer control  related constants
005163  005625  #CONST
005164  005634  #END
005165  005635        
005166  005636        
005167  005637        
005168  005638  //------------------------------------------------------------------------------
005169  005639  // system WORD variables accesible with peekW and pokeW or pointer access
005170  005640  // Note that the txt_Set variables (0-15) and gfx_set variables (16-31)
005171  005641  // can also be accessed with peekW and pokeW
005172  005642  //------------------------------------------------------------------------------
005173  005643        
005174  005644  #CONST
005175  005739  #END
005176  005740        
005177  005741  #CONST
005178  005906  #END
005179  005907        
005180  005908        
005181  005909        
005182  005910  //==================================================================================================
005183  005911        
005184  005912        
005185  005913        
005186  000013      #ENDIF
005187  000014        
005188  000015        
005189  000016  //===========================================================================================
005190  000017        
005191  000018        
005192  000002        
005193  000003        
005194  000004  // generated 04/10/2017 11:16:03
005195  000005        
005196  000006  #MODE FLASHBANK_1
005197  000007        
file C:\Program Files (x86)\4D Labs\4D Workshop 4 IDE\include\4DGL_16bitColours.fnc

005198  000008  #inherit "4DGL_16bitColours.fnc"
005199  000008  #inherit "4DGL_16bitColours.fnc"
005200  000004  */
005201  000005        
005202  000006        
005203  000007        
005204  000008  #CONST
005205  000149  #END
005206  000150        
005207  000009        
file C:\Program Files (x86)\4D Labs\4D Workshop 4 IDE\include\VisualConst.inc

005208  000010  #inherit "VisualConst.inc"
005209  000010  #inherit "VisualConst.inc"
005210  000001  // Line Patterns
005211  000002  #constant  LPCOARSE    0xF0F0
005212  000002  #constant  LPCOARSE    0xF0F0
005213  000003  #constant  LPMEDIUM    0x3333
005214  000003  #constant  LPMEDIUM    0x3333
005215  000004  #constant  LPFINE      0xAAAA
005216  000004  #constant  LPFINE      0xAAAA
005217  000005  #constant  LPDASHDOT   0x03CF
005218  000005  #constant  LPDASHDOT   0x03CF
005219  000006  #constant  LPDASHDOTDOT 0x0333
005220  000006  #constant  LPDASHDOTDOT 0x0333
005221  000007  #constant  LPSOLID     0x0000
005222  000007  #constant  LPSOLID     0x0000
005223  000011        
005224  000012        
file C:\Users\agarciamoreno\Documents\GitHub\BCN3DSigmax-Firmware-dev\Project Files LCD v126\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAXConst.inc

005225  000013  #inherit "BCN3D_SIGMAXConst.inc"
005226  000013  #inherit "BCN3D_SIGMAXConst.inc"
005227  000001  // File generated 04/10/2017 11:15:42
005228  000002  // Warning! This is a generated file, any manual changes will be
005229  000003  // lost during the next generation.
005230  000004        
005231  000005  #constant  Strings3Count    0
005232  000005  #constant  Strings3Count    0
005233  000006  #constant  Strings3Size     1
005234  000006  #constant  Strings3Size     1
005235  000007  #constant  Strings1Count    0
005236  000007  #constant  Strings1Count    0
005237  000008  #constant  Strings1Size     1
005238  000008  #constant  Strings1Size     1
005239  000009  #constant  Strings7Count    1
005240  000009  #constant  Strings7Count    1
005241  000010  #constant  Strings7Size     37
005242  000010  #constant  Strings7Size     37
005243  000011  #constant  Strings8Count    0
005244  000011  #constant  Strings8Count    0
005245  000012  #constant  Strings8Size     1
005246  000012  #constant  Strings8Size     1
005247  000013  #constant  Strings12Count    0
005248  000013  #constant  Strings12Count    0
005249  000014  #constant  Strings12Size     1
005250  000014  #constant  Strings12Size     1
005251  000015  #constant  Strings23Count    0
005252  000015  #constant  Strings23Count    0
005253  000016  #constant  Strings23Size     1
005254  000016  #constant  Strings23Size     1
005255  000017  #constant  Strings24Count    1
005256  000017  #constant  Strings24Count    1
005257  000018  #constant  Strings24Size     19
005258  000018  #constant  Strings24Size     19
005259  000019  #constant  Strings25Count    1
005260  000019  #constant  Strings25Count    1
005261  000020  #constant  Strings25Size     37
005262  000020  #constant  Strings25Size     37
005263  000021  #constant  Strings26Count    1
005264  000021  #constant  Strings26Count    1
005265  000022  #constant  Strings26Size     37
005266  000022  #constant  Strings26Size     37
005267  000023  #constant  Strings16Count    0
005268  000023  #constant  Strings16Count    0
005269  000024  #constant  Strings16Size     1
005270  000024  #constant  Strings16Size     1
005271  000025  #constant  Strings30Count    1
005272  000025  #constant  Strings30Count    1
005273  000026  #constant  Strings30Size     37
005274  000026  #constant  Strings30Size     37
005275  000027  #constant  Strings2Count    1
005276  000027  #constant  Strings2Count    1
005277  000028  #constant  Strings2Size     4
005278  000028  #constant  Strings2Size     4
005279  000029  #constant  Strings0Count    1
005280  000029  #constant  Strings0Count    1
005281  000030  #constant  Strings0Size     4
005282  000030  #constant  Strings0Size     4
005283  000031  #constant  Strings9Count    1
005284  000031  #constant  Strings9Count    1
005285  000032  #constant  Strings9Size     4
005286  000032  #constant  Strings9Size     4
005287  000033  #constant  Strings34Count    1
005288  000033  #constant  Strings34Count    1
005289  000034  #constant  Strings34Size     4
005290  000034  #constant  Strings34Size     4
005291  000035  #constant  Strings36Count    1
005292  000035  #constant  Strings36Count    1
005293  000036  #constant  Strings36Size     4
005294  000036  #constant  Strings36Size     4
005295  000037  #constant  Strings37Count    1
005296  000037  #constant  Strings37Count    1
005297  000038  #constant  Strings37Size     4
005298  000038  #constant  Strings37Size     4
005299  000039  #constant  Strings4Count    1
005300  000039  #constant  Strings4Count    1
005301  000040  #constant  Strings4Size     4
005302  000040  #constant  Strings4Size     4
005303  000041  #constant  Strings40Count    1
005304  000041  #constant  Strings40Count    1
005305  000042  #constant  Strings40Size     16
005306  000042  #constant  Strings40Size     16
005307  000043  #constant  Strings41Count    0
005308  000043  #constant  Strings41Count    0
005309  000044  #constant  Strings41Size     1
005310  000044  #constant  Strings41Size     1
005311  000045  #constant  Strings42Count    0
005312  000045  #constant  Strings42Count    0
005313  000046  #constant  Strings42Size     1
005314  000046  #constant  Strings42Size     1
005315  000047  #constant  Strings5Count    1
005316  000047  #constant  Strings5Count    1
005317  000048  #constant  Strings5Size     7
005318  000048  #constant  Strings5Size     7
005319  000049  #constant  Strings10Count    1
005320  000049  #constant  Strings10Count    1
005321  000050  #constant  Strings10Size     7
005322  000050  #constant  Strings10Size     7
005323  000051  #constant  Strings17Count    1
005324  000051  #constant  Strings17Count    1
005325  000052  #constant  Strings17Size     7
005326  000052  #constant  Strings17Size     7
005327  000053  #constant  Strings13Count    1
005328  000053  #constant  Strings13Count    1
005329  000054  #constant  Strings13Size     7
005330  000054  #constant  Strings13Size     7
005331  000055  #constant  Strings14Count    1
005332  000055  #constant  Strings14Count    1
005333  000056  #constant  Strings14Size     7
005334  000056  #constant  Strings14Size     7
005335  000057  #constant  Strings15Count    1
005336  000057  #constant  Strings15Count    1
005337  000058  #constant  Strings15Size     7
005338  000058  #constant  Strings15Size     7
005339  000059  #constant  Strings18Count    1
005340  000059  #constant  Strings18Count    1
005341  000060  #constant  Strings18Size     7
005342  000060  #constant  Strings18Size     7
005343  000061  #constant  Strings19Count    1
005344  000061  #constant  Strings19Count    1
005345  000062  #constant  Strings19Size     9
005346  000062  #constant  Strings19Size     9
005347  000063  #constant  Strings20Count    1
005348  000063  #constant  Strings20Count    1
005349  000064  #constant  Strings20Size     9
005350  000064  #constant  Strings20Size     9
005351  000065  #constant  Strings21Count    1
005352  000065  #constant  Strings21Count    1
005353  000066  #constant  Strings21Size     9
005354  000066  #constant  Strings21Size     9
005355  000067  #constant  Strings22Count    1
005356  000067  #constant  Strings22Count    1
005357  000068  #constant  Strings22Size     9
005358  000068  #constant  Strings22Size     9
005359  000069  #constant  Strings27Count    0
005360  000069  #constant  Strings27Count    0
005361  000070  #constant  Strings27Size     1
005362  000070  #constant  Strings27Size     1
005363  000071  #constant  Strings28Count    1
005364  000071  #constant  Strings28Count    1
005365  000072  #constant  Strings28Size     22
005366  000072  #constant  Strings28Size     22
005367  000073  #constant  Strings46Count    0
005368  000073  #constant  Strings46Count    0
005369  000074  #constant  Strings46Size     1
005370  000074  #constant  Strings46Size     1
005371  000075  #constant  Strings48Count    0
005372  000075  #constant  Strings48Count    0
005373  000076  #constant  Strings48Size     1
005374  000076  #constant  Strings48Size     1
005375  000077  #constant  Strings6Count    1
005376  000077  #constant  Strings6Count    1
005377  000078  #constant  Strings6Size     4
005378  000078  #constant  Strings6Size     4
005379  000079  #constant  Strings29Count    1
005380  000079  #constant  Strings29Count    1
005381  000080  #constant  Strings29Size     4
005382  000080  #constant  Strings29Size     4
005383  000081  #constant  Strings31Count    1
005384  000081  #constant  Strings31Count    1
005385  000082  #constant  Strings31Size     4
005386  000082  #constant  Strings31Size     4
005387  000083  #constant  Strings32Count    1
005388  000083  #constant  Strings32Count    1
005389  000084  #constant  Strings32Size     4
005390  000084  #constant  Strings32Size     4
005391  000085  #constant  Strings33Count    1
005392  000085  #constant  Strings33Count    1
005393  000086  #constant  Strings33Size     4
005394  000086  #constant  Strings33Size     4
005395  000087  #constant  Strings35Count    1
005396  000087  #constant  Strings35Count    1
005397  000088  #constant  Strings35Size     4
005398  000088  #constant  Strings35Size     4
005399  000089  #constant  Strings38Count    1
005400  000089  #constant  Strings38Count    1
005401  000090  #constant  Strings38Size     4
005402  000090  #constant  Strings38Size     4
005403  000091  #constant  Strings47Count    0
005404  000091  #constant  Strings47Count    0
005405  000092  #constant  Strings47Size     1
005406  000092  #constant  Strings47Size     1
005407  000093  #constant  Strings43Count    0
005408  000093  #constant  Strings43Count    0
005409  000094  #constant  Strings43Size     1
005410  000094  #constant  Strings43Size     1
005411  000095  #constant  Strings53Count    0
005412  000095  #constant  Strings53Count    0
005413  000096  #constant  Strings53Size     1
005414  000096  #constant  Strings53Size     1
005415  000097  #constant  Strings11Count    1
005416  000097  #constant  Strings11Count    1
005417  000098  #constant  Strings11Size     7
005418  000098  #constant  Strings11Size     7
005419  000099  #constant  Strings45Count    0
005420  000099  #constant  Strings45Count    0
005421  000100  #constant  Strings45Size     1
005422  000100  #constant  Strings45Size     1
005423  000101  #constant  Strings39Count    0
005424  000101  #constant  Strings39Count    0
005425  000102  #constant  Strings39Size     1
005426  000102  #constant  Strings39Size     1
005427  000103  #constant  Strings44Count    0
005428  000103  #constant  Strings44Count    0
005429  000104  #constant  Strings44Size     1
005430  000104  #constant  Strings44Size     1
005431  000105  #constant  Strings49Count    1
005432  000105  #constant  Strings49Count    1
005433  000106  #constant  Strings49Size     12
005434  000106  #constant  Strings49Size     12
005435  000107  #constant  Strings52Count    0
005436  000107  #constant  Strings52Count    0
005437  000108  #constant  Strings52Size     1
005438  000108  #constant  Strings52Size     1
005439  000109  #constant  Strings50Count    0
005440  000109  #constant  Strings50Count    0
005441  000110  #constant  Strings50Size     1
005442  000110  #constant  Strings50Size     1
005443  000111  #constant  Strings51Count    0
005444  000111  #constant  Strings51Count    0
005445  000112  #constant  Strings51Size     1
005446  000112  #constant  Strings51Size     1
005447  000113  #constant  Strings55Count    0
005448  000113  #constant  Strings55Count    0
005449  000114  #constant  Strings55Size     1
005450  000114  #constant  Strings55Size     1
005451  000115  // object indexes into ImageControl
005452  000116  #CONST
005453  000446  #END
005454  000447        
005455  000448  #constant  Strings54Size     0
005456  000448  #constant  Strings54Size     0
005457  000449  #constant  Strings54StartH   0
005458  000449  #constant  Strings54StartH   0
005459  000450  #constant  Strings54StartL   0
005460  000450  #constant  Strings54StartL   0
005461  000451  #constant  Strings3StartH   0x0
005462  000451  #constant  Strings3StartH   0x0
005463  000452  #constant  Strings3StartL   0x0
005464  000452  #constant  Strings3StartL   0x0
005465  000453  #constant  Strings1StartH   0x0
005466  000453  #constant  Strings1StartH   0x0
005467  000454  #constant  Strings1StartL   0x200
005468  000454  #constant  Strings1StartL   0x200
005469  000455  #constant  Strings7StartH   0x0
005470  000455  #constant  Strings7StartH   0x0
005471  000456  #constant  Strings7StartL   0x400
005472  000456  #constant  Strings7StartL   0x400
005473  000457  #constant  Strings8StartH   0x0
005474  000457  #constant  Strings8StartH   0x0
005475  000458  #constant  Strings8StartL   0x600
005476  000458  #constant  Strings8StartL   0x600
005477  000459  #constant  Strings12StartH   0x0
005478  000459  #constant  Strings12StartH   0x0
005479  000460  #constant  Strings12StartL   0x800
005480  000460  #constant  Strings12StartL   0x800
005481  000461  #constant  Strings23StartH   0x0
005482  000461  #constant  Strings23StartH   0x0
005483  000462  #constant  Strings23StartL   0xA00
005484  000462  #constant  Strings23StartL   0xA00
005485  000463  #constant  Strings24StartH   0x0
005486  000463  #constant  Strings24StartH   0x0
005487  000464  #constant  Strings24StartL   0xC00
005488  000464  #constant  Strings24StartL   0xC00
005489  000465  #constant  Strings25StartH   0x0
005490  000465  #constant  Strings25StartH   0x0
005491  000466  #constant  Strings25StartL   0xE00
005492  000466  #constant  Strings25StartL   0xE00
005493  000467  #constant  Strings26StartH   0x0
005494  000467  #constant  Strings26StartH   0x0
005495  000468  #constant  Strings26StartL   0x1000
005496  000468  #constant  Strings26StartL   0x1000
005497  000469  #constant  Strings16StartH   0x0
005498  000469  #constant  Strings16StartH   0x0
005499  000470  #constant  Strings16StartL   0x1200
005500  000470  #constant  Strings16StartL   0x1200
005501  000471  #constant  Strings30StartH   0x0
005502  000471  #constant  Strings30StartH   0x0
005503  000472  #constant  Strings30StartL   0x1400
005504  000472  #constant  Strings30StartL   0x1400
005505  000473  #constant  Strings2StartH   0x0
005506  000473  #constant  Strings2StartH   0x0
005507  000474  #constant  Strings2StartL   0x1600
005508  000474  #constant  Strings2StartL   0x1600
005509  000475  #constant  Strings0StartH   0x0
005510  000475  #constant  Strings0StartH   0x0
005511  000476  #constant  Strings0StartL   0x1800
005512  000476  #constant  Strings0StartL   0x1800
005513  000477  #constant  Strings9StartH   0x0
005514  000477  #constant  Strings9StartH   0x0
005515  000478  #constant  Strings9StartL   0x1A00
005516  000478  #constant  Strings9StartL   0x1A00
005517  000479  #constant  Strings34StartH   0x0
005518  000479  #constant  Strings34StartH   0x0
005519  000480  #constant  Strings34StartL   0x1C00
005520  000480  #constant  Strings34StartL   0x1C00
005521  000481  #constant  Strings36StartH   0x0
005522  000481  #constant  Strings36StartH   0x0
005523  000482  #constant  Strings36StartL   0x1E00
005524  000482  #constant  Strings36StartL   0x1E00
005525  000483  #constant  Strings37StartH   0x0
005526  000483  #constant  Strings37StartH   0x0
005527  000484  #constant  Strings37StartL   0x2000
005528  000484  #constant  Strings37StartL   0x2000
005529  000485  #constant  Strings4StartH   0x0
005530  000485  #constant  Strings4StartH   0x0
005531  000486  #constant  Strings4StartL   0x2200
005532  000486  #constant  Strings4StartL   0x2200
005533  000487  #constant  Strings40StartH   0x0
005534  000487  #constant  Strings40StartH   0x0
005535  000488  #constant  Strings40StartL   0x2400
005536  000488  #constant  Strings40StartL   0x2400
005537  000489  #constant  Strings41StartH   0x0
005538  000489  #constant  Strings41StartH   0x0
005539  000490  #constant  Strings41StartL   0x2600
005540  000490  #constant  Strings41StartL   0x2600
005541  000491  #constant  Strings42StartH   0x0
005542  000491  #constant  Strings42StartH   0x0
005543  000492  #constant  Strings42StartL   0x2800
005544  000492  #constant  Strings42StartL   0x2800
005545  000493  #constant  Strings5StartH   0x0
005546  000493  #constant  Strings5StartH   0x0
005547  000494  #constant  Strings5StartL   0x2A00
005548  000494  #constant  Strings5StartL   0x2A00
005549  000495  #constant  Strings10StartH   0x0
005550  000495  #constant  Strings10StartH   0x0
005551  000496  #constant  Strings10StartL   0x2C00
005552  000496  #constant  Strings10StartL   0x2C00
005553  000497  #constant  Strings17StartH   0x0
005554  000497  #constant  Strings17StartH   0x0
005555  000498  #constant  Strings17StartL   0x2E00
005556  000498  #constant  Strings17StartL   0x2E00
005557  000499  #constant  Strings13StartH   0x0
005558  000499  #constant  Strings13StartH   0x0
005559  000500  #constant  Strings13StartL   0x3000
005560  000500  #constant  Strings13StartL   0x3000
005561  000501  #constant  Strings14StartH   0x0
005562  000501  #constant  Strings14StartH   0x0
005563  000502  #constant  Strings14StartL   0x3200
005564  000502  #constant  Strings14StartL   0x3200
005565  000503  #constant  Strings15StartH   0x0
005566  000503  #constant  Strings15StartH   0x0
005567  000504  #constant  Strings15StartL   0x3400
005568  000504  #constant  Strings15StartL   0x3400
005569  000505  #constant  Strings18StartH   0x0
005570  000505  #constant  Strings18StartH   0x0
005571  000506  #constant  Strings18StartL   0x3600
005572  000506  #constant  Strings18StartL   0x3600
005573  000507  #constant  Strings19StartH   0x0
005574  000507  #constant  Strings19StartH   0x0
005575  000508  #constant  Strings19StartL   0x3800
005576  000508  #constant  Strings19StartL   0x3800
005577  000509  #constant  Strings20StartH   0x0
005578  000509  #constant  Strings20StartH   0x0
005579  000510  #constant  Strings20StartL   0x3A00
005580  000510  #constant  Strings20StartL   0x3A00
005581  000511  #constant  Strings21StartH   0x0
005582  000511  #constant  Strings21StartH   0x0
005583  000512  #constant  Strings21StartL   0x3C00
005584  000512  #constant  Strings21StartL   0x3C00
005585  000513  #constant  Strings22StartH   0x0
005586  000513  #constant  Strings22StartH   0x0
005587  000514  #constant  Strings22StartL   0x3E00
005588  000514  #constant  Strings22StartL   0x3E00
005589  000515  #constant  Strings27StartH   0x0
005590  000515  #constant  Strings27StartH   0x0
005591  000516  #constant  Strings27StartL   0x4000
005592  000516  #constant  Strings27StartL   0x4000
005593  000517  #constant  Strings28StartH   0x0
005594  000517  #constant  Strings28StartH   0x0
005595  000518  #constant  Strings28StartL   0x4200
005596  000518  #constant  Strings28StartL   0x4200
005597  000519  #constant  Strings46StartH   0x0
005598  000519  #constant  Strings46StartH   0x0
005599  000520  #constant  Strings46StartL   0x4400
005600  000520  #constant  Strings46StartL   0x4400
005601  000521  #constant  Strings48StartH   0x0
005602  000521  #constant  Strings48StartH   0x0
005603  000522  #constant  Strings48StartL   0x4600
005604  000522  #constant  Strings48StartL   0x4600
005605  000523  #constant  Strings6StartH   0x0
005606  000523  #constant  Strings6StartH   0x0
005607  000524  #constant  Strings6StartL   0x4800
005608  000524  #constant  Strings6StartL   0x4800
005609  000525  #constant  Strings29StartH   0x0
005610  000525  #constant  Strings29StartH   0x0
005611  000526  #constant  Strings29StartL   0x4A00
005612  000526  #constant  Strings29StartL   0x4A00
005613  000527  #constant  Strings31StartH   0x0
005614  000527  #constant  Strings31StartH   0x0
005615  000528  #constant  Strings31StartL   0x4C00
005616  000528  #constant  Strings31StartL   0x4C00
005617  000529  #constant  Strings32StartH   0x0
005618  000529  #constant  Strings32StartH   0x0
005619  000530  #constant  Strings32StartL   0x4E00
005620  000530  #constant  Strings32StartL   0x4E00
005621  000531  #constant  Strings33StartH   0x0
005622  000531  #constant  Strings33StartH   0x0
005623  000532  #constant  Strings33StartL   0x5000
005624  000532  #constant  Strings33StartL   0x5000
005625  000533  #constant  Strings35StartH   0x0
005626  000533  #constant  Strings35StartH   0x0
005627  000534  #constant  Strings35StartL   0x5200
005628  000534  #constant  Strings35StartL   0x5200
005629  000535  #constant  Strings38StartH   0x0
005630  000535  #constant  Strings38StartH   0x0
005631  000536  #constant  Strings38StartL   0x5400
005632  000536  #constant  Strings38StartL   0x5400
005633  000537  #constant  Strings47StartH   0x0
005634  000537  #constant  Strings47StartH   0x0
005635  000538  #constant  Strings47StartL   0x5600
005636  000538  #constant  Strings47StartL   0x5600
005637  000539  #constant  Strings43StartH   0x0
005638  000539  #constant  Strings43StartH   0x0
005639  000540  #constant  Strings43StartL   0x5800
005640  000540  #constant  Strings43StartL   0x5800
005641  000541  #constant  Strings53StartH   0x0
005642  000541  #constant  Strings53StartH   0x0
005643  000542  #constant  Strings53StartL   0x5A00
005644  000542  #constant  Strings53StartL   0x5A00
005645  000543  #constant  Strings11StartH   0x0
005646  000543  #constant  Strings11StartH   0x0
005647  000544  #constant  Strings11StartL   0x5C00
005648  000544  #constant  Strings11StartL   0x5C00
005649  000545  #constant  Strings45StartH   0x0
005650  000545  #constant  Strings45StartH   0x0
005651  000546  #constant  Strings45StartL   0x5E00
005652  000546  #constant  Strings45StartL   0x5E00
005653  000547  #constant  Strings39StartH   0x0
005654  000547  #constant  Strings39StartH   0x0
005655  000548  #constant  Strings39StartL   0x6000
005656  000548  #constant  Strings39StartL   0x6000
005657  000549  #constant  Strings44StartH   0x0
005658  000549  #constant  Strings44StartH   0x0
005659  000550  #constant  Strings44StartL   0x6200
005660  000550  #constant  Strings44StartL   0x6200
005661  000551  #constant  Strings49StartH   0x0
005662  000551  #constant  Strings49StartH   0x0
005663  000552  #constant  Strings49StartL   0x6400
005664  000552  #constant  Strings49StartL   0x6400
005665  000553  #constant  Strings52StartH   0x0
005666  000553  #constant  Strings52StartH   0x0
005667  000554  #constant  Strings52StartL   0x6600
005668  000554  #constant  Strings52StartL   0x6600
005669  000555  #constant  Strings50StartH   0x0
005670  000555  #constant  Strings50StartH   0x0
005671  000556  #constant  Strings50StartL   0x6800
005672  000556  #constant  Strings50StartL   0x6800
005673  000557  #constant  Strings51StartH   0x0
005674  000557  #constant  Strings51StartH   0x0
005675  000558  #constant  Strings51StartL   0x6A00
005676  000558  #constant  Strings51StartL   0x6A00
005677  000559  #constant  Strings55StartH   0x0
005678  000559  #constant  Strings55StartH   0x0
005679  000560  #constant  Strings55StartL   0x6C00
005680  000560  #constant  Strings55StartL   0x6C00
005681  000561  #IFNOT EXISTS NOGLOBALS
005682  000562  var hndl ;
005683  000563  #ENDIF
005684  000014        
file C:\Program Files (x86)\4D Labs\4D Workshop 4 IDE\include\CLPrintStrings.inc

005685  000015  #inherit "CLPrintStrings.inc"
005686  000015  #inherit "CLPrintStrings.inc"
005687  000001  func PrintStrings(var ID, var *msgid, var String)
005688  000002      var StringID, i, ch, offs32[2], res32[2];
005689  000003      StringID := oStringss[1+ID] ;
005690  000004      if (String)
005691  000005          stringsCV[ID] := -1 ;
005692  000006      else
005693  000007          stringsCV[ID] := msgid ;
005694  000008      endif
005695  000009      if ((StringID == -1) || (*(StringID + Ofs_String_Form) != CurrentForm)) return ;
005696  000010      txt_FontID(hFonts[ID]) ;
005697  000011      txt_Attributes(*(StringID + Ofs_String_FontAttribs)) ; // >> 4 fix for r25,6,7,8 PmmC
005698  000012  //    txt_Opacity(*(StringID + STTransparent)) ;
005699  000013        
005700  000014      if (*(StringID + Ofs_String_Transparent))
005701  000015          gfx_RectangleFilled(*(StringID + Ofs_String_x1), *(StringID + Ofs_String_y1), *(StringID + Ofs_String_x2), *(StringID + Ofs_String_y2), *(StringID + Ofs_String_BGColor));
005702  000016      else if (FormBGcolors[CurrentForm] != ColorBGimage)
005703  000017          gfx_RectangleFilled(*(StringID + Ofs_String_x1), *(StringID + Ofs_String_y1), *(StringID + Ofs_String_x2), *(StringID + Ofs_String_y2), FormBGcolors[CurrentForm]);
005704  000018      else
005705  000019          gfx_ClipWindow(*(StringID + Ofs_String_x1), *(StringID + Ofs_String_y1), *(StringID + Ofs_String_x2), *(StringID + Ofs_String_y2)) ;
005706  000020          gfx_Clipping(ON) ;
005707  000021          img_Show(hndl,FormStartIndex[CurrentForm]) ;
005708  000022          gfx_Clipping(OFF) ;
005709  000023        
005710  000024      endif
005711  000025        
005712  000026      txt_FGcolour(*(StringID + Ofs_String_FGColor)) ;
005713  000027      txt_BGcolour(*(StringID + Ofs_String_BGColor)) ;
005714  000028      txt_Opacity(TRANSPARENT);                // 8  text OPAQUE or TRANSPARENT
005715  000029        
005716  000030      gfx_MoveTo(*(StringID + Ofs_String_x1) , *(StringID + Ofs_String_y1)) ;
005717  000031        
005718  000032      if (String)
005719  000033          i := 0 ;
005720  000034          ch := msgid[i++] ;
005721  000035          while (ch != 0)
005722  000036              putch(ch) ;
005723  000037              ch := msgid[i++] ;
005724  000038          wend
005725  000039      else
005726  000040          umul_1616(offs32, *(StringID + Ofs_String_Size), msgid);
005727  000041          res32[1] := *(StringID + Ofs_String_StartH) ;
005728  000042          res32[0] := *(StringID + Ofs_String_StartL) ;
005729  000043          uadd_3232(res32,res32,offs32) ;
005730  000044          file_Seek(hstrings, res32[1], res32[0]);
005731  000045          repeat
005732  000046              if (*(StringID + Ofs_String_Ansi))
005733  000047                  ch := file_GetC(hstrings) ;
005734  000048              else
005735  000049                  ch := file_GetW(hstrings) ;
005736  000050              endif
005737  000051              putch(ch) ;
005738  000052          until (ch == 0) ;
005739  000053      endif
005740  000054        
005741  000055  endfunc
005742  000056        
005743  000016        
005744  000017  #constant IPDatasize 22
005745  000017  #constant IPDatasize 22
005746  000018        
005747  000019  #CONST
005748  000023  #END
005749  000024        
005750  000025  #CONST
005751  000131  #END
005752  000132        
005753  000691  #END
5754  34A8
5755  34A9
5756  34AA
5757  34AB
5758  34AC
5759  34AD
5760  34AE
5761  34AF
5762  34B0
5763  34B1
5764  34B2
5765  34B3
5766  34B4
5767  34B5
5768  34B6
5769  34B7
5770  34B8
5771  34B9
5772  34BA
5773  34BB
5774  34BC
5775  34BD
5776  34BE
5777  34BF
5778  34C0
5779  34C1
5780  34C2
5781  34C3
5782  34C4
5783  34C5
5784  34C6
5785  34C7
5786  34C8
5787  34C9
5788  34CA
5789  34CB
5790  34CC
5791  34CD
5792  34CE
5793  34CF
5794  34D0
5795  34D1
5796  34D2
5797  34D3
5798  34D4
5799  34D5
5800  34D6
5801  34D7
5802  34D8
5803  34D9
5804  34DA
5805  34DB
5806  34DC
5807  34DD
5808  34DE
5809  34DF
5810  34E0
5811  34E1
5812  34E2
5813  34E3
5814  34E4
5815  34E5
5816  34E6
5817  34E7
5818  34E8
5819  34E9
5820  34EA
5821  34EB
5822  34EC
5823  34ED
5824  34EE
5825  34EF
5826  34F0
5827  34F1
5828  34F2
5829  34F3
5830  34F4
5831  34F5
5832  34F6
5833  34F7
5834  34F8
5835  34F9
5836  34FA
5837  34FB
5838  34FC
5839  34FD
5840  34FE
5841  34FF
5842  3500
5843  3501
5844  3502
5845  3503
5846  3504
5847  3505
5848  3506
5849  3507
5850  3508
5851  3509
5852  350A
5853  350B
5854  350C
5855  350D
5856  350E
5857  350F
5858  3510
5859  3511
5860  3512
5861  3513
5862  3514
5863  3515
5864  3516
5865  3517
5866  3518
5867  3519
5868  351A
5869  351B
5870  351C
5871  351D
5872  351E
5873  351F
5874  3520
5875  3521
5876  3522
5877  3523
5878  3524
5879  3525
5880  3526
5881  3527
5882  3528
5883  3529
5884  352A
5885  352B
5886  352C
5887  352D
5888  352E
5889  352F
5890  3530
5891  3531
5892  3532
5893  3533
5894  3534
5895  3535
5896  3536
5897  3537
5898  3538
5899  3539
5900  353A
5901  353B
5902  353C
5903  353D
5904  353E
5905  353F
5906  3540
5907  3541
5908  3542
5909  3543
5910  3544
5911  3545
5912  3546
5913  3547
5914  3548
5915  3549
5916  354A
5917  354B
5918  354C
5919  354D
5920  354E
5921  354F
5922  3550
5923  3551
5924  3552
5925  3553
5926  3554
5927  3555
5928  3556
5929  3557
5930  3558
5931  3559
5932  355A
5933  355B
5934  355C
5935  355D
5936  355E
5937  355F
5938  3560
5939  3561
5940  3562
5941  3563
5942  3564
5943  3565
5944  3566
5945  3567
5946  3568
5947  3569
5948  356A
5949  356B
5950  356C
5951  356D
5952  356E
5953  356F
5954  3570
5955  3571
5956  3572
5957  3573
5958  3574
5959  3575
5960  3576
5961  3577
5962  3578
5963  3579
5964  357A
5965  357B
5966  357C
5967  357D
5968  357E
5969  357F
5970  3580
5971  3581
5972  3582
5973  3583
5974  3584
5975  3585
5976  3586
5977  3587
5978  3588
5979  3589
5980  358A
5981  358B
5982  358C
5983  358D
5984  358E
5985  358F
5986  3590
5987  3591
5988  3592
5989  3593
5990  3594
5991  3595
5992  3596
5993  3597
5994  3598
5995  3599
5996  359A
5997  359B
5998  359C
5999  359D
6000  359E
6001  359F
6002  35A0
6003  35A1
6004  35A2
6005  35A3
6006  35A4
6007  35A5
6008  35A6
6009  35A7
6010  35A8
6011  35A9
6012  35AA
6013  35AB
6014  35AC
6015  35AD
6016  35AE
6017  35AF
6018  35B0
6019  35B1
6020  35B2
6021  35B3
6022  35B4
6023  35B5
6024  35B6
6025  35B7
6026  35B8
6027  35B9
6028  35BA
6029  35BB
6030  35BC
6031  35BD
6032  35BE
6033  35BF
6034  35C0
6035  35C1
6036  35C2
6037  35C3
6038  35C4
6039  35C5
6040  35C6
6041  35C7
6042  35C8
6043  35C9
6044  35CA
6045  35CB
6046  35CC
6047  35CD
6048  35CE
6049  35CF
6050  35D0
6051  35D1
6052  35D2
6053  35D3
6054  35D4
6055  35D5
6056  35D6
6057  35D7
6058  35D8
6059  35D9
6060  35DA
6061  35DB
6062  35DC
6063  35DD
6064  35DE
6065  35DF
6066  35E0
6067  35E1
6068  35E2
6069  35E3
6070  35E4
6071  35E5
6072  35E6
6073  35E7
6074  35E8
6075  35E9
6076  35EA
6077  35EB
6078  35EC
6079  35ED
6080  35EE
6081  35EF
6082  35F0
6083  35F1
6084  35F2
6085  35F3
6086  35F4
6087  35F5
6088  35F6
6089  35F7
6090  35F8
6091  35F9
6092  35FA
6093  35FB
6094  35FC
6095  35FD
6096  35FE
6097  35FF
6098  3600
6099  3601
6100  3602
6101  3603
6102  3604
6103  3605
6104  3606
6105  3607
6106  3608
6107  3609
6108  360A
6109  360B
6110  360C
6111  360D
6112  360E
6113  360F
6114  3610
6115  3611
6116  3612
6117  3613
6118  3614
6119  3615
6120  3616
6121  3617
6122  3618
6123  3619
6124  361A
6125  361B
6126  361C
6127  361D
6128  361E
6129  361F
6130  3620
6131  3621
6132  3622
6133  3623
6134  3624
6135  3625
6136  3626
6137  3627
6138  3628
6139  3629
6140  362A
6141  362B
6142  362C
6143  362D
6144  362E
6145  362F
6146  3630
6147  3631
6148  3632
6149  3633
6150  3634
6151  3635
6152  3636
6153  3637
6154  3638
6155  3639
6156  363A
6157  363B
6158  363C
6159  363D
6160  363E
6161  363F
6162  3640
6163  3641
6164  3642
6165  3643
6166  3644
6167  3645
6168  3646
6169  3647
6170  3648
6171  3649
6172  364A
6173  364B
6174  364C
6175  364D
6176  364E
6177  364F
6178  3650
6179  3651
6180  3652
6181  3653
6182  3654
6183  3655
6184  3656
6185  3657
6186  3658
6187  3659
6188  365A
6189  365B
6190  365C
6191  365D
6192  365E
6193  365F
6194  3660
6195  3661
6196  3662
6197  3663
6198  3664
6199  3665
6200  3666
6201  3667
6202  3668
6203  3669
6204  366A
6205  366B
6206  366C
6207  366D
6208  366E
6209  366F
6210  3670
6211  3671
6212  3672
6213  3673
6214  3674
6215  3675
6216  3676
6217  3677
6218  3678
6219  3679
6220  367A
6221  367B
6222  367C
6223  367D
6224  367E
6225  367F
6226  3680
6227  3681
6228  3682
6229  3683
6230  3684
6231  3685
6232  3686
6233  3687
6234  3688
6235  3689
6236  368A
6237  368B
6238  368C
6239  368D
6240  368E
6241  368F
6242  3690
6243  3691
6244  3692
6245  3693
6246  3694
6247  3695
6248  3696
6249  3697
6250  3698
6251  3699
6252  369A
6253  369B
6254  369C
6255  369D
6256  369E
6257  369F
6258  36A0
6259  36A1
6260  36A2
6261  36A3
6262  36A4
6263  36A5
6264  36A6
6265  36A7
6266  36A8
6267  36A9
6268  36AA
6269  36AB
6270  36AC
6271  36AD
6272  36AE
6273  36AF
6274  36B0
6275  36B1
6276  36B2
6277  36B3
6278  36B4
6279  36B5
6280  36B6
6281  36B7
6282  36B8
6283  36B9
6284  36BA
6285  36BB
6286  36BC
6287  36BD
6288  36BE
6289  36BF
6290  36C0
6291  36C1
6292  36C2
6293  36C3
6294  36C4
6295  36C5
6296  36C6
6297  36C7
6298  36C8
6299  36C9
6300  36CA
6301  36CB
6302  36CC
6303  36CD
6304  36CE
6305  36CF
6306  36D0
6307  36D1
6308  36D2
6309  36D3
6310  36D4
6311  36D5
6312  36D6
6313  36D7
6314  36D8
6315  36D9
6316  36DA
6317  36DB
6318  36DC
6319  36DD
6320  36DE
6321  36DF
6322  36E0
6323  36E1
6324  36E2
6325  36E3
6326  36E4
6327  36E5
6328  36E6
6329  36E7
6330  36E8
6331  36E9
6332  36EA
6333  36EB
6334  36EC
6335  36ED
6336  36EE
6337  36EF
6338  36F0
6339  36F1
6340  36F2
6341  36F3
6342  36F4
6343  36F5
6344  36F6
6345  36F7
6346  36F8
6347  36F9
6348  36FA
6349  36FB
6350  36FC
6351  36FD
6352  36FE
6353  36FF
6354  3700
6355  3701
6356  3702
6357  3703
6358  3704
6359  3705
6360  3706
6361  3707
6362  3708
6363  3709
6364  370A
6365  370B
6366  370C
6367  370D
6368  370E
6369  370F
6370  3710
6371  3711
6372  3712
6373  3713
6374  3714
6375  3715
6376  3716
6377  3717
6378  3718
6379  3719
6380  371A
6381  371B
6382  371C
6383  371D
6384  371E
6385  371F
6386  3720
6387  3721
6388  3722
6389  3723
6390  3724
6391  3725
6392  3726
6393  3727
6394  3728
6395  3729
6396  372A
6397  372B
6398  372C
6399  372D
6400  372E
6401  372F
6402  3730
6403  3731
6404  3732
6405  3733
6406  3734
6407  3735
6408  3736
6409  3737
6410  3738
6411  3739
6412  373A
6413  373B
6414  373C
6415  373D
6416  373E
6417  373F
6418  3740
6419  3741
6420  3742
6421  3743
6422  3744
6423  3745
6424  3746
6425  3747
6426  3748
6427  3749
6428  374A
6429  374B
6430  374C
6431  374D
6432  374E
6433  374F
6434  3750
6435  3751
6436  3752
6437  3753
6438  3754
6439  3755
6440  3756
6441  3757
6442  3758
6443  3759
6444  375A
6445  375B
6446  375C
6447  375D
6448  375E
6449  375F
6450  3760
6451  3761
6452  3762
6453  3763
6454  3764
6455  3765
6456  3766
6457  3767
6458  3768
6459  3769
6460  376A
6461  376B
6462  376C
6463  376D
6464  376E
6465  376F
6466  3770
6467  3771
6468  3772
6469  3773
6470  3774
6471  3775
6472  3776
6473  3777
6474  3778
6475  3779
6476  377A
6477  377B
6478  377C
6479  377D
6480  377E
6481  377F
6482  3780
6483  3781
6484  3782
6485  3783
6486  3784
6487  3785
6488  3786
6489  3787
6490  3788
6491  3789
6492  378A
6493  378B
6494  378C
6495  378D
6496  378E
6497  378F
6498  3790
6499  3791
6500  3792
6501  3793
6502  3794
6503  3795
6504  3796
6505  3797
6506  3798
6507  3799
6508  379A
6509  379B
6510  379C
6511  379D
6512  379E
6513  379F
6514  37A0
6515  37A1
6516  37A2
6517  37A3
6518  37A4
6519  37A5
6520  37A6
6521  37A7
6522  37A8
6523  37A9
6524  37AA
6525  37AB
6526  37AC
6527  37AD
6528  37AE
6529  37AF
6530  37B0
6531  37B1
6532  37B2
6533  37B3
6534  37B4
6535  37B5
6536  37B6
6537  37B7
6538  37B8
6539  37B9
6540  37BA
6541  37BB
6542  37BC
6543  37BD
6544  37BE
6545  37BF
6546  37C0
6547  37C1
6548  37C2
6549  37C3
6550  37C4
6551  37C5
6552  37C6
6553  37C7
6554  37C8
6555  37C9
6556  37CA
6557  37CB
6558  37CC
6559  37CD
6560  37CE
6561  37CF
6562  37D0
6563  37D1
6564  37D2
6565  37D3
6566  37D4
6567  37D5
6568  37D6
6569  37D7
6570  37D8
6571  37D9
6572  37DA
6573  37DB
6574  37DC
6575  37DD
6576  37DE
6577  37DF
6578  37E0
6579  37E1
6580  37E2
6581  37E3
6582  37E4
6583  37E5
6584  37E6
6585  37E7
6586  37E8
6587  37E9
6588  37EA
6589  37EB
6590  37EC
6591  37ED
6592  37EE
6593  37EF
6594  37F0
6595  37F1
6596  37F2
6597  37F3
6598  37F4
6599  37F5
6600  37F6
6601  37F7
6602  37F8
6603  37F9
6604  37FA
6605  37FB
6606  37FC
6607  37FD
6608  37FE
6609  37FF
6610  3800
6611  3801
6612  3802
6613  3803
6614  3804
6615  3805
6616  3806
6617  3807
6618  3808
6619  3809
6620  380A
6621  380B
6622  380C
6623  380D
6624  380E
6625  380F
6626  3810
6627  3811
6628  3812
6629  3813
6630  3814
6631  3815
6632  3816
6633  3817
6634  3818
6635  3819
6636  381A
6637  381B
6638  381C
6639  381D
6640  381E
6641  381F
6642  3820
6643  3821
6644  3822
6645  3823
6646  3824
6647  3825
6648  3826
6649  3827
6650  3828
6651  3829
6652  382A
6653  382B
6654  382C
6655  382D
6656  382E
6657  382F
6658  3830
6659  3831
6660  3832
6661  3833
6662  3834
6663  3835
6664  3836
6665  3837
6666  3838
6667  3839
6668  383A
6669  383B
6670  383C
6671  383D
6672  383E
6673  383F
6674  3840
6675  3841
6676  3842
6677  3843
6678  3844
6679  3845
6680  3846
6681  3847
6682  3848
6683  3849
6684  384A
6685  384B
6686  384C
6687  384D
6688  384E
6689  384F
6690  3850
6691  3851
6692  3852
6693  3853
6694  3854
6695  3855
6696  3856
6697  3857
6698  3858
6699  3859
6700  385A
6701  385B
6702  385C
6703  385D
6704  385E
6705  385F
6706  3860
6707  3861
6708  3862
6709  3863
6710  3864
6711  3865
6712  3866
6713  3867
6714  3868
6715  3869
6716  386A
6717  386B
6718  386C
6719  386D
6720  386E
6721  386F
6722  3870
6723  3871
6724  3872
6725  3873
6726  3874
6727  3875
6728  3876
6729  3877
6730  3878
6731  3879
6732  387A
6733  387B
6734  387C
6735  387D
6736  387E
6737  387F
6738  3880
6739  3881
6740  3882
6741  3883
6742  3884
6743  3885
6744  3886
6745  3887
6746  3888
6747  3889
6748  388A
6749  388B
6750  388C
6751  388D
6752  388E
6753  388F
6754  3890
6755  3891
6756  3892
6757  3893
6758  3894
6759  3895
6760  3896
6761  3897
6762  3898
6763  3899
6764  389A
6765  389B
6766  389C
6767  389D
6768  389E
6769  389F
6770  38A0
6771  38A1
6772  38A2
6773  38A3
6774  38A4
6775  38A5
6776  38A6
6777  38A7
6778  38A8
6779  38A9
6780  38AA
6781  38AB
6782  38AC
6783  38AD
6784  38AE
6785  38AF
6786  38B0
6787  38B1
6788  38B2
6789  38B3
6790  38B4
6791  38B5
6792  38B6
6793  38B7
6794  38B8
6795  38B9
6796  38BA
6797  38BB
6798  38BC
6799  38BD
6800  38BE
6801  38BF
6802  38C0
6803  38C1
6804  38C2
6805  38C3
6806  38C4
6807  38C5
6808  38C6
6809  38C7
6810  38C8
6811  38C9
6812  38CA
6813  38CB
6814  38CC
6815  38CD
6816  38CE
6817  38CF
6818  38D0
6819  38D1
6820  38D2
6821  38D3
6822  38D4
6823  38D5
6824  38D6
6825  38D7
6826  38D8
6827  38D9
6828  38DA
6829  38DB
6830  38DC
6831  38DD
6832  38DE
6833  38DF
6834  38E0
6835  38E1
6836  38E2
6837  38E3
6838  38E4
6839  38E5
6840  38E6
6841  38E7
6842  38E8
6843  38E9
6844  38EA
6845  38EB
6846  38EC
6847  38ED
6848  38EE
6849  38EF
6850  38F0
6851  38F1
6852  38F2
6853  38F3
6854  38F4
6855  38F5
6856  38F6
6857  38F7
6858  38F8
6859  38F9
6860  38FA
6861  38FB
6862  38FC
6863  38FD
6864  38FE
6865  38FF
6866  3900
6867  3901
6868  3902
6869  3903
6870  3904
6871  3905
6872  3906
6873  3907
6874  3908
6875  3909
6876  390A
6877  390B
6878  390C
6879  390D
6880  390E
6881  390F
6882  3910
6883  3911
6884  3912
6885  3913
6886  3914
6887  3915
6888  3916
6889  3917
6890  3918
6891  3919
6892  391A
6893  391B
6894  391C
6895  391D
6896  391E
6897  391F
6898  3920
6899  3921
6900  3922
6901  3923
6902  3924
6903  3925
6904  3926
6905  3927
6906  3928
6907  3929
6908  392A
6909  392B
6910  392C
6911  392D
6912  392E
6913  392F
6914  3930
6915  3931
6916  3932
6917  3933
6918  3934
6919  3935
6920  3936
6921  3937
6922  3938
6923  3939
6924  393A
6925  393B
6926  393C
6927  393D
6928  393E
6929  393F
6930  3940
6931  3941
6932  3942
6933  3943
6934  3944
6935  3945
6936  3946
6937  3947
6938  3948
6939  3949
6940  394A
6941  394B
6942  394C
6943  394D
6944  394E
6945  394F
6946  3950
6947  3951
6948  3952
6949  3953
6950  3954
6951  3955
6952  3956
6953  3957
6954  3958
6955  3959
6956  395A
6957  395B
6958  395C
6959  395D
6960  395E
6961  395F
6962  3960
6963  3961
6964  3962
6965  3963
6966  3964
6967  3965
6968  3966
6969  3967
6970  3968
6971  3969
6972  396A
6973  396B
6974  396C
6975  396D
6976  396E
6977  396F
6978  3970
6979  3971
6980  3972
6981  3973
6982  3974
6983  3975
6984  3976
6985  3977
6986  3978
6987  3979
6988  397A
6989  397B
6990  397C
6991  397D
6992  397E
6993  397F
6994  3980
6995  3981
6996  3982
6997  3983
6998  3984
6999  3985
7000  3986
7001  3987
7002  3988
7003  3989
7004  398A
7005  398B
7006  398C
7007  398D
7008  398E
7009  398F
7010  3990
7011  3991
7012  3992
7013  3993
7014  3994
7015  3995
7016  3996
7017  3997
7018  3998
7019  3999
7020  399A
7021  399B
7022  399C
7023  399D
7024  399E
7025  399F
7026  39A0
7027  39A1
7028  39A2
7029  39A3
7030  39A4
7031  39A5
7032  39A6
7033  39A7
7034  39A8
7035  39A9
7036  39AA
7037  39AB
7038  39AC
7039  39AD
7040  39AE
7041  39AF
7042  39B0
7043  39B1
7044  39B2
7045  39B3
7046  39B4
7047  39B5
7048  39B6
7049  39B7
7050  39B8
7051  39B9
7052  39BA
7053  39BB
7054  39BC
7055  39BD
7056  39BE
7057  39BF
7058  39C0
7059  39C1
7060  39C2
7061  39C3
7062  39C4
7063  39C5
7064  39C6
7065  39C7
7066  39C8
7067  39C9
7068  39CA
7069  39CB
7070  39CC
7071  39CD
7072  39CE
7073  39CF
7074  39D0
7075  39D1
7076  39D2
7077  39D3
7078  39D4
7079  39D5
7080  39D6
7081  39D7
7082  39D8
7083  39D9
7084  39DA
7085  39DB
7086  39DC
7087  39DD
7088  39DE
7089  39DF
7090  39E0
7091  39E1
7092  39E2
7093  39E3
7094  39E4
7095  39E5
7096  39E6
7097  39E7
7098  39E8
7099  39E9
7100  39EA
7101  39EB
7102  39EC
7103  39ED
7104  39EE
7105  39EF
7106  39F0
7107  39F1
7108  39F2
7109  39F3
7110  39F4
7111  39F5
7112  39F6
7113  39F7
7114  39F8
7115  39F9
7116  39FA
7117  39FB
7118  39FC
7119  39FD
7120  39FE
7121  39FF
7122  3A00
7123  3A01
7124  3A02
7125  3A03
7126  3A04
7127  3A05
7128  3A06
7129  3A07
7130  3A08
7131  3A09
7132  3A0A
7133  3A0B
7134  3A0C
7135  3A0D
7136  3A0E
7137  3A0F
7138  3A10
7139  3A11
7140  3A12
7141  3A13
7142  3A14
7143  3A15
7144  3A16
7145  3A17
7146  3A18
7147  3A19
7148  3A1A
7149  3A1B
7150  3A1C
7151  3A1D
7152  3A1E
7153  3A1F
7154  3A20
7155  3A21
7156  3A22
7157  3A23
7158  3A24
7159  3A25
7160  3A26
7161  3A27
7162  3A28
7163  3A29
7164  3A2A
7165  3A2B
7166  3A2C
7167  3A2D
7168  3A2E
7169  3A2F
7170  3A30
7171  3A31
7172  3A32
7173  3A33
7174  3A34
7175  3A35
7176  3A36
7177  3A37
7178  3A38
7179  3A39
7180  3A3A
7181  3A3B
7182  3A3C
7183  3A3D
7184  3A3E
7185  3A3F
7186  3A40
7187  3A41
7188  3A42
7189  3A43
7190  3A44
7191  3A45
7192  3A46
7193  3A47
7194  3A48
7195  3A49
7196  3A4A
7197  3A4B
7198  3A4C
7199  3A4D
7200  3A4E
7201  3A4F
7202  3A50
7203  3A51
7204  3A52
7205  3A53
7206  3A54
7207  3A55
7208  3A56
7209  3A57
7210  3A58
7211  3A59
7212  3A5A
7213  3A5B
7214  3A5C
7215  3A5D
7216  3A5E
7217  3A5F
7218  3A60
7219  3A61
7220  3A62
7221  3A63
7222  3A64
7223  3A65
7224  3A66
7225  3A67
7226  3A68
7227  3A69
7228  3A6A
7229  3A6B
7230  3A6C
7231  3A6D
7232  3A6E
7233  3A6F
7234  3A70
7235  3A71
7236  3A72
7237  3A73
7238  3A74
7239  3A75
7240  3A76
7241  3A77
7242  3A78
7243  3A79
7244  3A7A
7245  3A7B
7246  3A7C
7247  3A7D
7248  3A7E
7249  3A7F
7250  3A80
7251  3A81
7252  3A82
7253  3A83
7254  3A84
7255  3A85
7256  3A86
7257  3A87
7258  3A88
7259  3A89
7260  3A8A
7261  3A8B
7262  3A8C
7263  3A8D
7264  3A8E
7265  3A8F
7266  3A90
7267  3A91
7268  3A92
7269  3A93
7270  3A94
7271  3A95
7272  3A96
7273  3A97
7274  3A98
7275  3A99
7276  3A9A
7277  3A9B
7278  3A9C
7279  3A9D
7280  3A9E
7281  3A9F
7282  3AA0
7283  3AA1
7284  3AA2
7285  3AA3
7286  3AA4
7287  3AA5
7288  3AA6
7289  3AA7
7290  3AA8
7291  3AA9
7292  3AAA
7293  3AAB
7294  3AAC
7295  3AAD
7296  3AAE
7297  3AAF
7298  3AB0
7299  3AB1
7300  3AB2
7301  3AB3
7302  3AB4
7303  3AB5
7304  3AB6
7305  3AB7
7306  3AB8
7307  3AB9
7308  3ABA
7309  3ABB
7310  3ABC
7311  3ABD
7312  3ABE
7313  3ABF
7314  3AC0
7315  3AC1
7316  3AC2
7317  3AC3
7318  3AC4
7319  3AC5
7320  3AC6
7321  3AC7
7322  3AC8
7323  3AC9
7324  3ACA
7325  3ACB
7326  3ACC
7327  3ACD
7328  3ACE
7329  3ACF
7330  3AD0
7331  3AD1
7332  3AD2
7333  3AD3
7334  3AD4
7335  3AD5
7336  3AD6
7337  3AD7
7338  3AD8
7339  3AD9
7340  3ADA
7341  3ADB
7342  3ADC
7343  3ADD
7344  3ADE
7345  3ADF
7346  3AE0
7347  3AE1
7348  3AE2
7349  3AE3
7350  3AE4
7351  3AE5
7352  3AE6
7353  3AE7
7354  3AE8
7355  3AE9
7356  3AEA
7357  3AEB
7358  3AEC
7359  3AED
7360  3AEE
7361  3AEF
7362  3AF0
7363  3AF1
7364  3AF2
7365  3AF3
7366  3AF4
7367  3AF5
7368  3AF6
7369  3AF7
7370  3AF8
7371  3AF9
7372  3AFA
7373  3AFB
7374  3AFC
7375  3AFD
7376  3AFE
7377  3AFF
7378  3B00
7379  3B01
7380  3B02
7381  3B03
7382  3B04
7383  3B05
7384  3B06
7385  3B07
7386  3B08
7387  3B09
7388  3B0A
7389  3B0B
7390  3B0C
7391  3B0D
7392  3B0E
7393  3B0F
7394  3B10
7395  3B11
7396  3B12
7397  3B13
7398  3B14
7399  3B15
7400  3B16
7401  3B17
7402  3B18
7403  3B19
7404  3B1A
7405  3B1B
7406  3B1C
7407  3B1D
7408  3B1E
7409  3B1F
7410  3B20
7411  3B21
7412  3B22
7413  3B23
7414  3B24
7415  3B25
7416  3B26
7417  3B27
7418  3B28
7419  3B29
7420  3B2A
7421  3B2B
7422  3B2C
7423  3B2D
7424  3B2E
7425  3B2F
7426  3B30
7427  3B31
7428  3B32
7429  3B33
7430  3B34
7431  3B35
7432  3B36
7433  3B37
7434  3B38
7435  3B39
7436  3B3A
7437  3B3B
7438  3B3C
7439  3B3D
7440  3B3E
7441  3B3F
7442  3B40
7443  3B41
7444  3B42
7445  3B43
7446  3B44
7447  3B45
7448  3B46
7449  3B47
7450  3B48
7451  3B49
7452  3B4A
7453  3B4B
7454  3B4C
7455  3B4D
7456  3B4E
7457  3B4F
7458  3B50
7459  3B51
7460  3B52
7461  3B53
7462  3B54
7463  3B55
7464  3B56
7465  3B57
7466  3B58
7467  3B59
7468  3B5A
7469  3B5B
7470  3B5C
7471  3B5D
7472  3B5E
7473  3B5F
7474  3B60
7475  3B61
7476  3B62
7477  3B63
7478  3B64
7479  3B65
7480  3B66
7481  3B67
7482  3B68
7483  3B69
7484  3B6A
7485  3B6B
7486  3B6C
7487  3B6D
7488  3B6E
7489  3B6F
7490  3B70
7491  3B71
7492  3B72
7493  3B73
7494  3B74
7495  3B75
7496  3B76
7497  3B77
7498  3B78
7499  3B79
7500  3B7A
7501  3B7B
7502  3B7C
7503  3B7D
7504  3B7E
7505  3B7F
7506  3B80
7507  3B81
7508  3B82
7509  3B83
7510  3B84
7511  3B85
7512  3B86
7513  3B87
7514  3B88
7515  3B89
7516  3B8A
7517  3B8B
7518  3B8C
7519  3B8D
7520  3B8E
7521  3B8F
7522  3B90
7523  3B91
7524  3B92
7525  3B93
7526  3B94
7527  3B95
7528  3B96
7529  3B97
7530  3B98
7531  3B99
7532  3B9A
7533  3B9B
7534  3B9C
7535  3B9D
7536  3B9E
7537  3B9F
7538  3BA0
7539  3BA1
7540  3BA2
7541  3BA3
7542  3BA4
7543  3BA5
7544  3BA6
7545  3BA7
7546  3BA8
7547  3BA9
7548  3BAA
7549  3BAB
7550  3BAC
7551  3BAD
7552  3BAE
7553  3BAF
7554  3BB0
7555  3BB1
7556  3BB2
7557  3BB3
7558  3BB4
7559  3BB5
7560  3BB6
7561  3BB7
7562  3BB8
7563  3BB9
7564  3BBA
7565  3BBB
7566  3BBC
7567  3BBD
7568  3BBE
7569  3BBF
7570  3BC0
7571  3BC1
7572  3BC2
7573  3BC3
7574  3BC4
7575  3BC5
7576  3BC6
7577  3BC7
7578  3BC8
7579  3BC9
7580  3BCA
7581  3BCB
7582  3BCC
7583  3BCD
7584  3BCE
7585  3BCF
7586  3BD0
7587  3BD1
7588  3BD2
7589  3BD3
7590  3BD4
7591  3BD5
7592  3BD6
7593  3BD7
7594  3BD8
7595  3BD9
7596  3BDA
7597  3BDB
7598  3BDC
7599  3BDD
7600  3BDE
7601  3BDF
7602  3BE0
7603  3BE1
7604  3BE2
7605  3BE3
7606  3BE4
7607  3BE5
7608  3BE6
7609  3BE7
7610  3BE8
7611  3BE9
7612  3BEA
7613  3BEB
7614  3BEC
7615  3BED
7616  3BEE
7617  3BEF
7618  3BF0
7619  3BF1
7620  3BF2
7621  3BF3
7622  3BF4
7623  3BF5
7624  3BF6
7625  3BF7
7626  3BF8
7627  3BF9
7628  3BFA
7629  3BFB
7630  3BFC
7631  3BFD
7632  3BFE
7633  3BFF
7634  3C00
7635  3C01
7636  3C02
7637  3C03
7638  3C04
7639  3C05
7640  3C06
7641  3C07
7642  3C08
7643  3C09
7644  3C0A
7645  3C0B
7646  3C0C
7647  3C0D
7648  3C0E
7649  3C0F
7650  3C10
7651  3C11
7652  3C12
7653  3C13
7654  3C14
7655  3C15
7656  3C16
7657  3C17
7658  3C18
7659  3C19
7660  3C1A
7661  3C1B
7662  3C1C
7663  3C1D
7664  3C1E
7665  3C1F
7666  3C20
7667  3C21
7668  3C22
7669  3C23
7670  3C24
7671  3C25
7672  3C26
7673  3C27
7674  3C28
7675  3C29
7676  3C2A
7677  3C2B
7678  3C2C
7679  3C2D
7680  3C2E
7681  3C2F
7682  3C30
7683  3C31
7684  3C32
7685  3C33
7686  3C34
7687  3C35
7688  3C36
7689  3C37
7690  3C38
7691  3C39
7692  3C3A
7693  3C3B
7694  3C3C
7695  3C3D
7696  3C3E
7697  3C3F
7698  3C40
7699  3C41
7700  3C42
7701  3C43
7702  3C44
7703  3C45
7704  3C46
7705  3C47
7706  3C48
7707  3C49
7708  3C4A
7709  3C4B
7710  3C4C
7711  3C4D
7712  3C4E
7713  3C4F
7714  3C50
7715  3C51
7716  3C52
7717  3C53
7718  3C54
7719  3C55
7720  3C56
7721  3C57
7722  3C58
7723  3C59
7724  3C5A
7725  3C5B
7726  3C5C
7727  3C5D
7728  3C5E
7729  3C5F
7730  3C60
7731  3C61
7732  3C62
7733  3C63
7734  3C64
7735  3C65
7736  3C66
7737  3C67
7738  3C68
7739  3C69
7740  3C6A
7741  3C6B
7742  3C6C
7743  3C6D
7744  3C6E
7745  3C6F
7746  3C70
7747  3C71
7748  3C72
7749  3C73
7750  3C74
7751  3C75
7752  3C76
7753  3C77
7754  3C78
7755  3C79
7756  3C7A
7757  3C7B
7758  3C7C
7759  3C7D
7760  3C7E
7761  3C7F
7762  3C80
7763  3C81
7764  3C82
7765  3C83
7766  3C84
7767  3C85
7768  3C86
7769  3C87
7770  3C88
7771  3C89
7772  3C8A
7773  3C8B
7774  3C8C
7775  3C8D
7776  3C8E
7777  3C8F
7778  3C90
7779  3C91
7780  3C92
7781  3C93
7782  3C94
7783  3C95
7784  3C96
7785  3C97
7786  3C98
7787  3C99
7788  3C9A
7789  3C9B
7790  3C9C
7791  3C9D
7792  3C9E
7793  3C9F
7794  3CA0
7795  3CA1
7796  3CA2
7797  3CA3
7798  3CA4
7799  3CA5
7800  3CA6
7801  3CA7
7802  3CA8
7803  3CA9
7804  3CAA
7805  3CAB
7806  3CAC
7807  3CAD
7808  3CAE
7809  3CAF
7810  3CB0
7811  3CB1
7812  3CB2
7813  3CB3
7814  3CB4
7815  3CB5
7816  3CB6
7817  3CB7
7818  3CB8
7819  3CB9
7820  3CBA
7821  3CBB
7822  3CBC
7823  3CBD
7824  3CBE
7825  3CBF
7826  3CC0
7827  3CC1
7828  3CC2
7829  3CC3
7830  3CC4
7831  3CC5
7832  3CC6
7833  3CC7
7834  3CC8
7835  3CC9
7836  3CCA
7837  3CCB
7838  3CCC
7839  3CCD
7840  3CCE
7841  3CCF
7842  3CD0
7843  3CD1
7844  3CD2
7845  3CD3
7846  3CD4
7847  3CD5
7848  3CD6
7849  3CD7
7850  3CD8
7851  3CD9
7852  3CDA
7853  3CDB
7854  3CDC
7855  3CDD
7856  3CDE
7857  3CDF
7858  3CE0
7859  3CE1
7860  3CE2
7861  3CE3
7862  3CE4
7863  3CE5
7864  3CE6
7865  3CE7
7866  3CE8
7867  3CE9
7868  3CEA
7869  3CEB
7870  3CEC
7871  3CED
7872  3CEE
7873  3CEF
7874  3CF0
7875  3CF1
7876  3CF2
7877  3CF3
7878  3CF4
7879  3CF5
7880  3CF6
7881  3CF7
7882  3CF8
7883  3CF9
7884  3CFA
7885  3CFB
7886  3CFC
7887  3CFD
7888  3CFE
7889  3CFF
7890  3D00
7891  3D01
7892  3D02
7893  3D03
7894  3D04
7895  3D05
7896  3D06
7897  3D07
7898  3D08
7899  3D09
7900  3D0A
7901  3D0B
7902  3D0C
7903  3D0D
7904  3D0E
7905  3D0F
7906  3D10
7907  3D11
7908  3D12
7909  3D13
7910  3D14
7911  3D15
7912  3D16
7913  3D17
7914  3D18
7915  3D19
7916  3D1A
7917  3D1B
7918  3D1C
7919  3D1D
7920  3D1E
7921  3D1F
7922  3D20
7923  3D21
7924  3D22
7925  3D23
7926  3D24
7927  3D25
7928  3D26
7929  3D27
7930  3D28
7931  3D29
7932  3D2A
7933  3D2B
7934  3D2C
7935  3D2D
7936  3D2E
7937  3D2F
7938  3D30
7939  3D31
7940  3D32
7941  3D33
7942  3D34
7943  3D35
7944  3D36
7945  3D37
7946  3D38
7947  3D39
7948  3D3A
7949  3D3B
7950  3D3C
7951  3D3D
7952  3D3E
7953  3D3F
7954  3D40
7955  3D41
7956  3D42
7957  3D43
7958  3D44
7959  3D45
7960  3D46
7961  3D47
7962  3D48
7963  3D49
7964  3D4A
7965  3D4B
7966  3D4C
7967  3D4D
7968  3D4E
7969  3D4F
7970  3D50
7971  3D51
7972  3D52
7973  3D53
7974  3D54
7975  3D55
7976  3D56
7977  3D57
7978  3D58
7979  3D59
7980  3D5A
7981  3D5B
7982  3D5C
7983  3D5D
7984  3D5E
7985  3D5F
7986  3D60
7987  3D61
7988  3D62
7989  3D63
7990  3D64
7991  3D65
7992  3D66
7993  3D67
7994  3D68
7995  3D69
7996  3D6A
7997  3D6B
7998  3D6C
7999  3D6D
8000  3D6E
8001  3D6F
8002  3D70
8003  3D71
8004  3D72
8005  3D73
8006  3D74
8007  3D75
8008  3D76
8009  3D77
8010  3D78
8011  3D79
8012  3D7A
8013  3D7B
8014  3D7C
8015  3D7D
8016  3D7E
8017  3D7F
8018  3D80
8019  3D81
8020  3D82
8021  3D83
8022  3D84
8023  3D85
8024  3D86
8025  3D87
8026  3D88
8027  3D89
8028  3D8A
8029  3D8B
8030  3D8C
8031  3D8D
8032  3D8E
8033  3D8F
8034  3D90
8035  3D91
8036  3D92
8037  3D93
8038  3D94
8039  3D95
8040  3D96
8041  3D97
8042  3D98
8043  3D99
8044  3D9A
8045  3D9B
8046  3D9C
8047  3D9D
8048  3D9E
8049  3D9F
8050  3DA0
8051  3DA1
8052  3DA2
8053  3DA3
8054  3DA4
8055  3DA5
8056  3DA6
8057  3DA7
8058  3DA8
8059  3DA9
8060  3DAA
8061  3DAB
8062  3DAC
8063  3DAD
8064  3DAE
8065  3DAF
8066  3DB0
8067  3DB1
8068  3DB2
8069  3DB3
8070  3DB4
8071  3DB5
8072  3DB6
8073  3DB7
8074  3DB8
8075  3DB9
8076  3DBA
8077  3DBB
8078  3DBC
8079  3DBD
8080  3DBE
8081  3DBF
8082  3DC0
8083  3DC1
8084  3DC2
8085  3DC3
8086  3DC4
8087  3DC5
8088  3DC6
8089  3DC7
8090  3DC8
8091  3DC9
8092  3DCA
8093  3DCB
8094  3DCC
8095  3DCD
8096  3DCE
8097  3DCF
8098  3DD0
8099  3DD1
8100  3DD2
8101  3DD3
8102  3DD4
8103  3DD5
8104  3DD6
8105  3DD7
8106  3DD8
8107  3DD9
8108  3DDA
8109  3DDB
8110  3DDC
8111  3DDD
8112  3DDE
8113  3DDF
8114  3DE0
8115  3DE1
8116  3DE2
8117  3DE3
8118  3DE4
8119  3DE5
8120  3DE6
8121  3DE7
8122  3DE8
8123  3DE9
8124  3DEA
8125  3DEB
8126  3DEC
8127  3DED
8128  3DEE
8129  3DEF
8130  3DF0
8131  3DF1
8132  3DF2
8133  3DF3
8134  3DF4
8135  3DF5
8136  3DF6
8137  3DF7
8138  3DF8
8139  3DF9
8140  3DFA
8141  3DFB
8142  3DFC
8143  3DFD
8144  3DFE
8145  3DFF
8146  3E00
8147  3E01
8148  3E02
8149  3E03
8150  3E04
8151  3E05
8152  3E06
8153  3E07
8154  3E08
8155  3E09
8156  3E0A
8157  3E0B
8158  3E0C
8159  3E0D
8160  3E0E
8161  3E0F
8162  3E10
8163  3E11
8164  3E12
8165  3E13
8166  3E14
8167  3E15
8168  3E16
8169  3E17
8170  3E18
8171  3E19
8172  3E1A
8173  3E1B
8174  3E1C
8175  3E1D
8176  3E1E
8177  3E1F
8178  3E20
8179  3E21
8180  3E22
8181  3E23
8182  3E24
8183  3E25
8184  3E26
8185  3E27
8186  3E28
8187  3E29
8188  3E2A
8189  3E2B
8190  3E2C
8191  3E2D
8192  3E2E
8193  3E2F
8194  3E30
8195  3E31
8196  3E32
8197  3E33
8198  3E34
8199  3E35
8200  3E36
8201  3E37
8202  3E38
8203  3E39
8204  3E3A
8205  3E3B
8206  3E3C
8207  3E3D
8208  3E3E
8209  3E3F
8210  3E40
8211  3E41
8212  3E42
8213  3E43
8214  3E44
8215  3E45
8216  3E46
8217  3E47
8218  3E48
8219  3E49
8220  3E4A
8221  3E4B
8222  3E4C
8223  3E4D
8224  3E4E
8225  3E4F
8226  3E50
8227  3E51
8228  3E52
8229  3E53
8230  3E54
8231  3E55
8232  3E56
8233  3E57
8234  3E58
8235  3E59
8236  3E5A
8237  3E5B
8238  3E5C
8239  3E5D
8240  3E5E
8241  3E5F
8242  3E60
8243  3E61
8244  3E62
8245  3E63
8246  3E64
8247  3E65
8248  3E66
8249  3E67
8250  3E68
8251  3E69
8252  3E6A
8253  3E6B
8254  3E6C
8255  3E6D
8256  3E6E
8257  3E6F
8258  3E70
8259  3E71
8260  3E72
8261  3E73
8262  3E74
8263  3E75
8264  3E76
8265  3E77
8266  3E78
8267  3E79
8268  3E7A
8269  3E7B
8270  3E7C
8271  3E7D
8272  3E7E
8273  3E7F
8274  3E80
8275  3E81
8276  3E82
8277  3E83
8278  3E84
8279  3E85
8280  3E86
8281  3E87
8282  3E88
8283  3E89
8284  3E8A
8285  3E8B
8286  3E8C
8287  3E8D
8288  3E8E
8289  3E8F
8290  3E90
8291  3E91
8292  3E92
8293  3E93
8294  3E94
8295  3E95
8296  3E96
8297  3E97
8298  3E98
8299  3E99
8300  3E9A
8301  3E9B
8302  3E9C
8303  3E9D
8304  3E9E
8305  3E9F
8306  3EA0
8307  3EA1
8308  3EA2
8309  3EA3
8310  3EA4
8311  3EA5
8312  3EA6
8313  3EA7
8314  3EA8
8315  3EA9
8316  3EAA
8317  3EAB
8318  3EAC
8319  3EAD
8320  3EAE
8321  3EAF
8322  3EB0
8323  3EB1
8324  3EB2
8325  3EB3
8326  3EB4
8327  3EB5
8328  3EB6
8329  3EB7
8330  3EB8
8331  3EB9
8332  3EBA
8333  3EBB
8334  3EBC
8335  3EBD
8336  3EBE
8337  3EBF
8338  3EC0
8339  3EC1
8340  3EC2
8341  3EC3
8342  3EC4
8343  3EC5
8344  3EC6
8345  3EC7
8346  3EC8
8347  3EC9
8348  3ECA
8349  3ECB
8350  3ECC
8351  3ECD
8352  3ECE
8353  3ECF
8354  3ED0
8355  3ED1
8356  3ED2
8357  3ED3
8358  3ED4
8359  3ED5
8360  3ED6
8361  3ED7
8362  3ED8
8363  3ED9
8364  3EDA
8365  3EDB
8366  3EDC
8367  3EDD
8368  3EDE
8369  3EDF
8370  3EE0
8371  3EE1
8372  3EE2
8373  3EE3
8374  3EE4
8375  3EE5
8376  3EE6
8377  3EE7
8378  3EE8
8379  3EE9
8380  3EEA
8381  3EEB
8382  3EEC
8383  3EED
8384  3EEE
8385  3EEF
8386  3EF0
8387  3EF1
8388  3EF2
8389  3EF3
8390  3EF4
8391  3EF5
8392  3EF6
8393  3EF7
8394  3EF8
8395  3EF9
8396  3EFA
8397  3EFB
8398  3EFC
8399  3EFD
8400  3EFE
8401  3EFF
8402  3F00
8403  3F01
8404  3F02
8405  3F03
8406  3F04
8407  3F05
8408  3F06
8409  3F07
8410  3F08
8411  3F09
8412  3F0A
8413  3F0B
8414  3F0C
8415  3F0D
8416  3F0E
8417  3F0F
8418  3F10
8419  3F11
8420  3F12
8421  3F13
8422  3F14
8423  3F15
8424  3F16
8425  3F17
8426  3F18
8427  3F19
8428  3F1A
8429  3F1B
8430  3F1C
8431  3F1D
8432  3F1E
8433  3F1F
8434  3F20
8435  3F21
8436  3F22
8437  3F23
8438  3F24
8439  3F25
8440  3F26
8441  3F27
8442  3F28
8443  3F29
8444  3F2A
8445  3F2B
8446  3F2C
8447  3F2D
8448  3F2E
8449  3F2F
8450  3F30
8451  3F31
8452  3F32
8453  3F33
8454  3F34
8455  3F35
8456  3F36
8457  3F37
8458  3F38
8459  3F39
8460  3F3A
8461  3F3B
8462  3F3C
8463  3F3D
8464  3F3E
8465  3F3F
8466  3F40
8467  3F41
8468  3F42
8469  3F43
8470  3F44
8471  3F45
8472  3F46
8473  3F47
8474  3F48
8475  3F49
8476  3F4A
8477  3F4B
8478  3F4C
8479  3F4D
8480  3F4E
8481  3F4F
8482  3F50
8483  3F51
8484  3F52
8485  3F53
8486  3F54
8487  3F55
8488  3F56
8489  3F57
8490  3F58
8491  3F59
8492  3F5A
8493  3F5B
8494  3F5C
8495  3F5D
8496  3F5E
8497  3F5F
8498  3F60
8499  3F61
8500  3F62
8501  3F63
8502  3F64
8503  3F65
8504  3F66
8505  3F67
8506  3F68
8507  3F69
8508  3F6A
8509  3F6B
8510  3F6C
8511  3F6D
8512  3F6E
8513  3F6F
8514  3F70
8515  3F71
8516  3F72
8517  3F73
8518  3F74
8519  3F75
8520  3F76
8521  3F77
8522  3F78
8523  3F79
8524  3F7A
8525  3F7B
8526  3F7C
8527  3F7D
8528  3F7E
8529  3F7F
8530  3F80
8531  3F81
8532  3F82
8533  3F83
8534  3F84
8535  3F85
8536  3F86
8537  3F87
8538  3F88
8539  3F89
8540  3F8A
8541  3F8B
8542  3F8C
8543  3F8D
8544  3F8E
8545  3F8F
8546  3F90
8547  3F91
8548  3F92
8549  3F93
8550  3F94
8551  3F95
8552  3F96
8553  3F97
8554  3F98
8555  3F99
8556  3F9A
8557  3F9B
8558  3F9C
8559  3F9D
8560  3F9E
8561  3F9F
8562  3FA0
8563  3FA1
8564  3FA2
8565  3FA3
8566  3FA4
8567  3FA5
8568  3FA6
8569  3FA7
8570  3FA8
8571  3FA9
8572  3FAA
8573  3FAB
8574  3FAC
8575  3FAD
8576  3FAE
8577  3FAF
8578  3FB0
8579  3FB1
8580  3FB2
8581  3FB3
8582  3FB4
8583  3FB5
8584  3FB6
8585  3FB7
8586  3FB8
8587  3FB9
8588  3FBA
8589  3FBB
8590  3FBC
8591  3FBD
8592  3FBE
8593  3FBF
8594  3FC0
8595  3FC1
8596  3FC2
8597  3FC3
8598  3FC4
8599  3FC5
8600  3FC6
8601  3FC7
8602  3FC8
8603  3FC9
8604  3FCA
8605  3FCB
8606  3FCC
8607  3FCD
8608  3FCE
8609  3FCF
8610  3FD0
8611  3FD1
8612  3FD2
8613  3FD3
8614  3FD4
8615  3FD5
8616  3FD6
8617  3FD7
8618  3FD8
8619  3FD9
8620  3FDA
8621  3FDB
8622  3FDC
8623  3FDD
8624  3FDE
8625  3FDF
8626  3FE0
8627  3FE1
8628  3FE2
8629  3FE3
8630  3FE4
8631  3FE5
8632  3FE6
8633  3FE7
8634  3FE8
8635  3FE9
8636  3FEA
8637  3FEB
8638  3FEC
8639  3FED
8640  3FEE
8641  3FEF
8642  3FF0
8643  3FF1
8644  3FF2
8645  3FF3
8646  3FF4
8647  3FF5
8648  3FF6
8649  3FF7
8650  3FF8
8651  3FF9
8652  3FFA
8653  3FFB
8654  3FFC
8655  3FFD
8656  3FFE
8657  3FFF
8658  4000
8659  4001
8660  4002
8661  4003
8662  4004
8663  4005
8664  4006
8665  4007
8666  4008
8667  4009
8668  400A
8669  400B
8670  400C
8671  400D
8672  400E
8673  400F
8674  4010
8675  4011
8676  4012
8677  4013
8678  4014
8679  4015
8680  4016
8681  4017
8682  4018
8683  4019
8684  401A
8685  401B
8686  401C
8687  401D
8688  401E
8689  401F
8690  4020
8691  4021
8692  4022
8693  4023
8694  4024
8695  4025
8696  4026
8697  4027
8698  4028
8699  4029
8700  402A
8701  402B
8702  402C
8703  402D
8704  402E
8705  402F
8706  4030
8707  4031
8708  4032
8709  4033
8710  4034
8711  4035
8712  4036
8713  4037
8714  4038
8715  4039
8716  403A
8717  403B
8718  403C
8719  403D
8720  403E
8721  403F
8722  4040
8723  4041
8724  4042
8725  4043
8726  4044
8727  4045
8728  4046
8729  4047
8730  4048
8731  4049
8732  404A
8733  404B
8734  404C
8735  404D
8736  404E
8737  404F
8738  4050
8739  4051
8740  4052
8741  4053
8742  4054
8743  4055
8744  4056
8745  4057
8746  4058
8747  4059
8748  405A
8749  405B
8750  405C
8751  405D
8752  405E
8753  405F
8754  4060
8755  4061
8756  4062
8757  4063
8758  4064
8759  4065
8760  4066
8761  4067
8762  4068
8763  4069
8764  406A
8765  406B
8766  406C
8767  406D
8768  406E
8769  406F
8770  4070
8771  4071
8772  4072
8773  4073
8774  4074
8775  4075
8776  4076
8777  4077
8778  4078
8779  4079
8780  407A
8781  407B
8782  407C
8783  407D
8784  407E
8785  407F
8786  4080
8787  4081
8788  4082
8789  4083
8790  4084
8791  4085
8792  4086
8793  4087
8794  4088
8795  4089
8796  408A
8797  408B
8798  408C
8799  408D
8800  408E
8801  408F
8802  4090
8803  4091
8804  4092
8805  4093
8806  4094
8807  4095
8808  4096
8809  4097
8810  4098
8811  4099
8812  409A
8813  409B
8814  409C
8815  409D
8816  409E
8817  409F
8818  40A0
8819  40A1
8820  40A2
8821  40A3
8822  40A4
8823  40A5
8824  40A6
8825  40A7
8826  40A8
8827  40A9
8828  40AA
8829  40AB
8830  40AC
8831  40AD
8832  40AE
8833  40AF
8834  40B0
8835  40B1
8836  40B2
8837  40B3
8838  40B4
8839  40B5
8840  40B6
8841  40B7
8842  40B8
8843  40B9
8844  40BA
8845  40BB
8846  40BC
8847  40BD
8848  40BE
8849  40BF
8850  40C0
8851  40C1
8852  40C2
8853  40C3
8854  40C4
8855  40C5
8856  40C6
8857  40C7
8858  40C8
8859  40C9
8860  40CA
8861  40CB
8862  40CC
8863  40CD
8864  40CE
8865  40CF
8866  40D0
8867  40D1
8868  40D2
8869  40D3
8870  40D4
8871  40D5
8872  40D6
8873  40D7
8874  40D8
8875  40D9
8876  40DA
8877  40DB
8878  40DC
8879  40DD
8880  40DE
8881  40DF
8882  40E0
8883  40E1
8884  40E2
8885  40E3
8886  40E4
8887  40E5
8888  40E6
8889  40E7
8890  40E8
8891  40E9
8892  40EA
8893  40EB
8894  40EC
8895  40ED
8896  40EE
8897  40EF
8898  40F0
8899  40F1
8900  40F2
8901  40F3
8902  40F4
8903  40F5
8904  40F6
8905  40F7
8906  40F8
8907  40F9
8908  40FA
8909  40FB
8910  40FC
8911  40FD
8912  40FE
8913  40FF
8914  4100
8915  4101
8916  4102
8917  4103
8918  4104
8919  4105
8920  4106
8921  4107
8922  4108
8923  4109
8924  410A
8925  410B
8926  410C
8927  410D
8928  410E
8929  410F
8930  4110
8931  4111
8932  4112
8933  4113
8934  4114
8935  4115
8936  4116
8937  4117
8938  4118
8939  4119
8940  411A
8941  411B
8942  411C
8943  411D
8944  411E
8945  411F
8946  4120
8947  4121
8948  4122
8949  4123
8950  4124
8951  4125
8952  4126
8953  4127
8954  4128
8955  4129
8956  412A
8957  412B
8958  412C
8959  412D
8960  412E
8961  412F
8962  4130
8963  4131
8964  4132
8965  4133
8966  4134
8967  4135
8968  4136
8969  4137
8970  4138
8971  4139
8972  413A
8973  413B
8974  413C
8975  413D
8976  413E
8977  413F
8978  4140
8979  4141
8980  4142
8981  4143
8982  4144
8983  4145
8984  4146
8985  4147
8986  4148
8987  4149
8988  414A
8989  414B
8990  414C
8991  414D
8992  414E
8993  414F
8994  4150
8995  4151
8996  4152
8997  4153
8998  4154
8999  4155
9000  4156
9001  4157
9002  4158
9003  4159
9004  415A
9005  415B
9006  415C
9007  415D
9008  415E
9009  415F
9010  4160
9011  4161
9012  4162
9013  4163
9014  4164
9015  4165
9016  4166
9017  4167
9018  4168
9019  4169
9020  416A
9021  416B
9022  416C
9023  416D
9024  416E
9025  416F
9026  4170
9027  4171
9028  4172
9029  4173
9030  4174
9031  4175
9032  4176
9033  4177
9034  4178
9035  4179
9036  417A
9037  417B
9038  417C
9039  417D
9040  417E
9041  417F
9042  4180
9043  4181
9044  4182
9045  4183
9046  4184
9047  4185
9048  4186
9049  4187
9050  4188
9051  4189
9052  418A
9053  418B
9054  418C
9055  418D
9056  418E
9057  418F
9058  4190
9059  4191
9060  4192
9061  4193
9062  4194
9063  4195
9064  4196
9065  4197
9066  4198
9067  4199
9068  419A
9069  419B
9070  419C
9071  419D
9072  419E
9073  419F
9074  41A0
9075  41A1
9076  41A2
9077  41A3
9078  41A4
9079  41A5
9080  41A6
9081  41A7
9082  41A8
9083  41A9
9084  41AA
9085  41AB
9086  41AC
9087  41AD
9088  41AE
9089  41AF
9090  41B0
9091  41B1
9092  41B2
9093  41B3
9094  41B4
9095  41B5
9096  41B6
9097  41B7
9098  41B8
9099  41B9
9100  41BA
9101  41BB
9102  41BC
9103  41BD
9104  41BE
9105  41BF
9106  41C0
9107  41C1
9108  41C2
9109  41C3
9110  41C4
9111  41C5
9112  41C6
9113  41C7
9114  41C8
9115  41C9
9116  41CA
9117  41CB
9118  41CC
9119  41CD
9120  41CE
9121  41CF
9122  41D0
9123  41D1
9124  41D2
9125  41D3
9126  41D4
9127  41D5
9128  41D6
9129  41D7
9130  41D8
9131  41D9
9132  41DA
9133  41DB
9134  41DC
9135  41DD
9136  41DE
9137  41DF
9138  41E0
9139  41E1
9140  41E2
9141  41E3
9142  41E4
9143  41E5
9144  41E6
9145  41E7
9146  41E8
9147  41E9
9148  41EA
9149  41EB
9150  41EC
9151  41ED
9152  41EE
9153  41EF
9154  41F0
9155  41F1
9156  41F2
9157  41F3
9158  41F4
9159  41F5
9160  41F6
9161  41F7
9162  41F8
9163  41F9
9164  41FA
9165  41FB
9166  41FC
9167  41FD
9168  41FE
9169  41FF
9170  4200
9171  4201
9172  4202
9173  4203
9174  4204
9175  4205
9176  4206
9177  4207
9178  4208
9179  4209
9180  420A
9181  420B
9182  420C
9183  420D
9184  420E
9185  420F
9186  4210
9187  4211
9188  4212
9189  4213
9190  4214
9191  4215
9192  4216
9193  4217
9194  4218
9195  4219
9196  421A
9197  421B
9198  421C
9199  421D
9200  421E
9201  421F
9202  4220
9203  4221
9204  4222
9205  4223
9206  4224
9207  4225
9208  4226
9209  4227
9210  4228
9211  4229
9212  422A
9213  422B
9214  422C
9215  422D
9216  422E
9217  422F
9218  4230
9219  4231
9220  4232
9221  4233
9222  4234
9223  4235
9224  4236
9225  4237
9226  4238
9227  4239
9228  423A
9229  423B
9230  423C
9231  423D
9232  423E
9233  423F
9234  4240
9235  4241
9236  4242
9237  4243
9238  4244
9239  4245
9240  4246
9241  4247
9242  4248
9243  4249
9244  424A
9245  424B
9246  424C
9247  424D
9248  424E
9249  424F
9250  4250
9251  4251
9252  4252
9253  4253
9254  4254
9255  4255
9256  4256
9257  4257
9258  4258
9259  4259
9260  425A
9261  425B
9262  425C
9263  425D
9264  425E
9265  425F
9266  4260
9267  4261
9268  4262
9269  4263
9270  4264
9271  4265
9272  4266
9273  4267
9274  4268
9275  4269
9276  426A
9277  426B
9278  426C
9279  426D
9280  426E
9281  426F
9282  4270
9283  4271
9284  4272
9285  4273
9286  4274
9287  4275
9288  4276
9289  4277
9290  4278
9291  4279
9292  427A
9293  427B
9294  427C
9295  427D
9296  427E
9297  427F
9298  4280
9299  4281
9300  4282
9301  4283
9302  4284
9303  4285
9304  4286
9305  4287
9306  4288
9307  4289
9308  428A
9309  428B
9310  428C
9311  428D
9312  428E
9313  428F
9314  4290
9315  4291
9316  4292
9317  4293
9318  4294
9319  4295
9320  4296
9321  4297
9322  4298
9323  4299
9324  429A
9325  429B
9326  429C
9327  429D
9328  429E
9329  429F
9330  42A0
9331  42A1
9332  42A2
9333  42A3
9334  42A4
9335  42A5
9336  42A6
9337  42A7
9338  42A8
9339  42A9
9340  42AA
9341  42AB
9342  42AC
9343  42AD
9344  42AE
9345  42AF
9346  42B0
9347  42B1
9348  42B2
9349  42B3
9350  42B4
9351  42B5
9352  42B6
9353  42B7
9354  42B8
9355  42B9
9356  42BA
9357  42BB
9358  42BC
9359  42BD
9360  42BE
9361  42BF
9362  42C0
9363  42C1
9364  42C2
9365  42C3
9366  42C4
9367  42C5
9368  42C6
9369  42C7
9370  42C8
9371  42C9
9372  42CA
9373  42CB
9374  42CC
9375  42CD
9376  42CE
9377  42CF
9378  42D0
9379  42D1
9380  42D2
9381  42D3
9382  42D4
9383  42D5
9384  42D6
9385  42D7
9386  42D8
9387  42D9
9388  42DA
9389  42DB
9390  42DC
9391  42DD
9392  42DE
9393  42DF
9394  42E0
9395  42E1
9396  42E2
9397  42E3
9398  42E4
9399  42E5
9400  42E6
9401  42E7
9402  42E8
9403  42E9
9404  42EA
9405  42EB
9406  42EC
9407  42ED
9408  42EE
9409  42EF
9410  42F0
9411  42F1
9412  42F2
9413  42F3
9414  42F4
9415  42F5
9416  42F6
9417  42F7
9418  42F8
9419  42F9
9420  42FA
9421  42FB
9422  42FC
9423  42FD
9424  42FE
9425  42FF
9426  4300
9427  4301
9428  4302
9429  4303
9430  4304
9431  4305
9432  4306
9433  4307
9434  4308
9435  4309
9436  430A
9437  430B
9438  430C
9439  430D
9440  430E
9441  430F
9442  4310
9443  4311
9444  4312
9445  4313
9446  4314
9447  4315
9448  4316
9449  4317
9450  4318
9451  4319
9452  431A
9453  431B
9454  431C
9455  431D
9456  431E
9457  431F
9458  4320
9459  4321
9460  4322
9461  4323
9462  4324
9463  4325
9464  4326
9465  4327
9466  4328
9467  4329
9468  432A
9469  432B
9470  432C
9471  432D
9472  432E
9473  432F
9474  4330
9475  4331
9476  4332
9477  4333
9478  4334
9479  4335
9480  4336
9481  4337
9482  4338
9483  4339
9484  433A
9485  433B
9486  433C
9487  433D
9488  433E
9489  433F
9490  4340
9491  4341
9492  4342
9493  4343
9494  4344
9495  4345
9496  4346
9497  4347
9498  4348
9499  4349
9500  434A
9501  434B
9502  434C
9503  434D
9504  434E
9505  434F
9506  4350
9507  4351
9508  4352
9509  4353
9510  4354
9511  4355
9512  4356
9513  4357
9514  4358
9515  4359
9516  435A
9517  435B
9518  435C
9519  435D
9520  435E
9521  435F
9522  4360
9523  4361
9524  4362
9525  4363
9526  4364
9527  4365
9528  4366
9529  4367
9530  4368
9531  4369
9532  436A
9533  436B
9534  436C
9535  436D
9536  436E
9537  436F
9538  4370
9539  4371
9540  4372
9541  4373
9542  4374
9543  4375
9544  4376
9545  4377
9546  4378
9547  4379
9548  437A
9549  437B
9550  437C
9551  437D
9552  437E
9553  437F
9554  4380
9555  4381
9556  4382
9557  4383
9558  4384
9559  4385
9560  4386
9561  4387
9562  4388
9563  4389
9564  438A
9565  438B
9566  438C
9567  438D
9568  438E
9569  438F
9570  4390
9571  4391
9572  4392
9573  4393
9574  4394
9575  4395
9576  4396
9577  4397
9578  4398
9579  4399
9580  439A
9581  439B
9582  439C
9583  439D
9584  439E
9585  439F
9586  43A0
9587  43A1
9588  43A2
9589  43A3
9590  43A4
9591  43A5
9592  43A6
9593  43A7
9594  43A8
9595  43A9
9596  43AA
9597  43AB
9598  43AC
9599  43AD
9600  43AE
9601  43AF
9602  43B0
9603  43B1
9604  43B2
9605  43B3
9606  43B4
9607  43B5
9608  43B6
9609  43B7
9610  43B8
9611  43B9
9612  43BA
9613  43BB
9614  43BC
9615  43BD
9616  43BE
9617  43BF
9618  43C0
9619  43C1
9620  43C2
9621  43C3
9622  43C4
9623  43C5
9624  43C6
9625  43C7
9626  43C8
9627  43C9
9628  43CA
9629  43CB
9630  43CC
9631  43CD
9632  43CE
9633  43CF
9634  43D0
9635  43D1
9636  43D2
9637  43D3
9638  43D4
9639  43D5
9640  43D6
9641  43D7
9642  43D8
9643  43D9
9644  43DA
9645  43DB
9646  43DC
9647  43DD
9648  43DE
9649  43DF
9650  43E0
9651  43E1
9652  43E2
9653  43E3
9654  43E4
9655  43E5
9656  43E6
9657  43E7
9658  43E8
9659  43E9
9660  43EA
9661  43EB
9662  43EC
9663  43ED
9664  43EE
9665  43EF
9666  43F0
9667  43F1
9668  43F2
9669  43F3
9670  43F4
9671  43F5
9672  43F6
9673  43F7
9674  43F8
9675  43F9
9676  43FA
9677  43FB
9678  43FC
9679  43FD
9680  43FE
9681  43FF
9682  4400
9683  4401
9684  4402
9685  4403
9686  4404
9687  4405
9688  4406
9689  4407
9690  4408
9691  4409
9692  440A
9693  440B
9694  440C
9695  440D
9696  440E
9697  440F
9698  4410
9699  4411
9700  4412
9701  4413
9702  4414
9703  4415
9704  4416
9705  4417
9706  4418
9707  4419
9708  441A
9709  441B
9710  441C
9711  441D
9712  441E
9713  441F
9714  4420
9715  4421
9716  4422
9717  4423
9718  4424
9719  4425
9720  4426
9721  4427
9722  4428
9723  4429
9724  442A
9725  442B
9726  442C
9727  442D
9728  442E
9729  442F
9730  4430
9731  4431
9732  4432
9733  4433
9734  4434
9735  4435
9736  4436
9737  4437
9738  4438
9739  4439
9740  443A
9741  443B
9742  443C
9743  443D
9744  443E
9745  443F
9746  4440
9747  4441
9748  4442
9749  4443
9750  4444
9751  4445
9752  4446
9753  4447
9754  4448
9755  4449
9756  444A
9757  444B
9758  444C
9759  444D
9760  444E
9761  444F
9762  4450
9763  4451
9764  4452
9765  4453
9766  4454
9767  4455
9768  4456
9769  4457
9770  4458
9771  4459
9772  445A
9773  445B
9774  445C
9775  445D
9776  445E
9777  445F
9778  4460
9779  4461
9780  4462
9781  4463
9782  4464
9783  4465
9784  4466
9785  4467
9786  4468
9787  4469
9788  446A
9789  446B
9790  446C
9791  446D
9792  446E
9793  446F
9794  4470
9795  4471
9796  4472
9797  4473
9798  4474
9799  4475
9800  4476
9801  4477
9802  4478
9803  4479
9804  447A
9805  447B
9806  447C
9807  447D
9808  447E
9809  447F
9810  4480
9811  4481
9812  4482
9813  4483
9814  4484
9815  4485
9816  4486
9817  4487
9818  4488
9819  4489
9820  448A
9821  448B
9822  448C
9823  448D
9824  448E
9825  448F
9826  4490
9827  4491
9828  4492
9829  4493
9830  4494
9831  4495
9832  4496
9833  4497
9834  4498
9835  4499
9836  449A
9837  449B
9838  449C
9839  449D
9840  449E
9841  449F
9842  44A0
9843  44A1
9844  44A2
9845  44A3
9846  44A4
9847  44A5
9848  44A6
9849  44A7
9850  44A8
9851  44A9
9852  44AA
9853  44AB
9854  44AC
9855  44AD
9856  44AE
9857  44AF
9858  44B0
9859  44B1
9860  44B2
9861  44B3
9862  44B4
9863  44B5
9864  44B6
9865  44B7
9866  44B8
9867  44B9
9868  44BA
9869  44BB
9870  44BC
9871  44BD
9872  44BE
9873  44BF
9874  44C0
9875  44C1
9876  44C2
9877  44C3
9878  44C4
9879  44C5
9880  44C6
9881  44C7
9882  44C8
9883  44C9
9884  44CA
9885  44CB
9886  44CC
9887  44CD
9888  44CE
9889  44CF
9890  44D0
9891  44D1
9892  44D2
9893  44D3
9894  44D4
9895  44D5
9896  44D6
9897  44D7
9898  44D8
9899  44D9
9900  44DA
9901  44DB
9902  44DC
9903  44DD
9904  44DE
9905  44DF
9906  44E0
9907  44E1
9908  44E2
9909  44E3
9910  44E4
9911  44E5
9912  44E6
9913  44E7
9914  44E8
9915  44E9
9916  44EA
9917  44EB
9918  44EC
9919  44ED
9920  44EE
9921  44EF
9922  44F0
9923  44F1
9924  44F2
9925  44F3
9926  44F4
9927  44F5
9928  44F6
9929  44F7
9930  44F8
9931  44F9
9932  44FA
9933  44FB
9934  44FC
9935  44FD
9936  44FE
9937  44FF
9938  4500
9939  4501
9940  4502
9941  4503
9942  4504
9943  4505
9944  4506
9945  4507
9946  4508
9947  4509
9948  450A
9949  450B
9950  450C
9951  450D
9952  450E
9953  450F
9954  4510
9955  4511
9956  4512
9957  4513
9958  4514
9959  4515
9960  4516
9961  4517
9962  4518
9963  4519
9964  451A
9965  451B
9966  451C
9967  451D
9968  451E
9969  451F
9970  4520
9971  4521
9972  4522
9973  4523
9974  4524
9975  4525
9976  4526
9977  4527
9978  4528
9979  4529
9980  452A
9981  452B
9982  452C
9983  452D
9984  452E
9985  452F
9986  4530
9987  4531
9988  4532
9989  4533
9990  4534
9991  4535
9992  4536
9993  4537
9994  4538
9995  4539
9996  453A
9997  453B
9998  453C
9999  453D
10000  453E
10001  453F
10002  4540
10003  4541
10004  4542
10005  4543
10006  4544
10007  4545
10008  4546
10009  4547
10010  4548
10011  4549
10012  454A
10013  454B
10014  454C
10015  454D
10016  454E
10017  454F
10018  4550
10019  4551
10020  4552
10021  4553
10022  4554
10023  4555
10024  4556
10025  4557
10026  4558
10027  4559
10028  455A
10029  455B
10030  455C
10031  455D
10032  455E
10033  455F
10034  4560
10035  4561
10036  4562
10037  4563
10038  4564
10039  4565
10040  4566
10041  4567
10042  4568
10043  4569
10044  456A
10045  456B
10046  456C
10047  456D
10048  456E
10049  456F
10050  4570
10051  4571
10052  4572
10053  4573
10054  4574
10055  4575
10056  4576
10057  4577
10058  4578
10059  4579
10060  457A
10061  457B
10062  457C
10063  457D
10064  457E
10065  457F
10066  4580
10067  4581
10068  4582
10069  4583
10070  4584
10071  4585
10072  4586
10073  4587
10074  4588
10075  4589
10076  458A
10077  458B
10078  458C
10079  458D
10080  458E
10081  458F
10082  4590
10083  4591
10084  4592
10085  4593
10086  4594
10087  4595
10088  4596
10089  4597
10090  4598
10091  4599
10092  459A
10093  459B
10094  459C
10095  459D
10096  459E
10097  459F
10098  45A0
10099  45A1
10100  45A2
10101  45A3
10102  45A4
10103  45A5
10104  45A6
10105  45A7
10106  45A8
10107  45A9
10108  45AA
10109  45AB
10110  45AC
10111  45AD
10112  45AE
10113  45AF
10114  45B0
10115  45B1
10116  45B2
10117  45B3
10118  45B4
10119  45B5
10120  45B6
10121  45B7
10122  45B8
10123  45B9
10124  45BA
10125  45BB
10126  45BC
10127  45BD
10128  45BE
10129  45BF
10130  45C0
10131  45C1
10132  45C2
10133  45C3
10134  45C4
10135  45C5
10136  45C6
10137  45C7
10138  45C8
10139  45C9
10140  45CA
10141  45CB
10142  45CC
10143  45CD
10144  45CE
10145  45CF
10146  45D0
10147  45D1
10148  45D2
10149  45D3
10150  45D4
10151  45D5
10152  45D6
10153  45D7
10154  45D8
10155  45D9
10156  45DA
10157  45DB
10158  45DC
10159  45DD
10160  45DE
10161  45DF
10162  45E0
10163  45E1
10164  45E2
10165  45E3
10166  45E4
10167  45E5
10168  45E6
10169  45E7
10170  45E8
10171  45E9
10172  45EA
10173  45EB
10174  45EC
10175  45ED
10176  45EE
10177  45EF
10178  45F0
10179  45F1
10180  45F2
10181  45F3
10182  45F4
10183  45F5
10184  45F6
10185  45F7
10186  45F8
10187  45F9
10188  45FA
10189  45FB
10190  45FC
10191  45FD
10192  45FE
10193  45FF
10194  4600
10195  4601
10196  4602
10197  4603
10198  4604
10199  4605
10200  4606
10201  4607
10202  4608
10203  4609
10204  460A
10205  460B
10206  460C
10207  460D
10208  460E
10209  460F
10210  4610
10211  4611
10212  4612
10213  4613
10214  4614
10215  4615
10216  4616
10217  4617
10218  4618
10219  4619
10220  461A
10221  461B
10222  461C
10223  461D
10224  461E
10225  461F
10226  4620
10227  4621
10228  4622
10229  4623
10230  4624
10231  4625
10232  4626
10233  4627
10234  4628
10235  4629
10236  462A
10237  462B
10238  462C
10239  462D
10240  462E
10241  462F
10242  4630
10243  4631
10244  4632
10245  4633
10246  4634
10247  4635
10248  4636
10249  4637
10250  4638
10251  4639
10252  463A
10253  463B
10254  463C
10255  463D
10256  463E
10257  463F
10258  4640
10259  4641
10260  4642
10261  4643
10262  4644
10263  4645
10264  4646
10265  4647
10266  4648
10267  4649
10268  464A
10269  464B
10270  464C
10271  464D
10272  464E
10273  464F
10274  4650
10275  4651
10276  4652
10277  4653
10278  4654
10279  4655
10280  4656
10281  4657
10282  4658
10283  4659
10284  465A
10285  465B
10286  465C
10287  465D
10288  465E
10289  465F
10290  4660
10291  4661
10292  4662
10293  4663
10294  4664
10295  4665
10296  4666
10297  4667
10298  4668
10299  4669
10300  466A
10301  466B
10302  466C
10303  466D
10304  466E
10305  466F
10306  4670
10307  4671
10308  4672
10309  4673
10310  4674
10311  4675
10312  4676
10313  4677
10314  4678
10315  4679
10316  467A
10317  467B
10318  467C
10319  467D
10320  467E
10321  467F
10322  4680
10323  4681
10324  4682
10325  4683
10326  4684
10327  4685
10328  4686
10329  4687
10330  4688
10331  4689
10332  468A
10333  468B
10334  468C
10335  468D
10336  468E
10337  468F
10338  4690
10339  4691
10340  4692
10341  4693
10342  4694
10343  4695
10344  4696
10345  4697
10346  4698
10347  4699
10348  469A
10349  469B
10350  469C
10351  469D
10352  469E
10353  469F
10354  46A0
10355  46A1
10356  46A2
10357  46A3
10358  46A4
10359  46A5
10360  46A6
10361  46A7
10362  46A8
10363  46A9
10364  46AA
10365  46AB
10366  46AC
10367  46AD
10368  46AE
10369  46AF
10370  46B0
10371  46B1
10372  46B2
10373  46B3
10374  46B4
10375  46B5
10376  46B6
10377  46B7
10378  46B8
10379  46B9
10380  46BA
10381  46BB
10382  46BC
10383  46BD
10384  46BE
10385  46BF
10386  46C0
10387  46C1
10388  46C2
10389  46C3
10390  46C4
10391  46C5
10392  46C6
10393  46C7
10394  46C8
10395  46C9
10396  46CA
10397  46CB
10398  46CC
10399  46CD
10400  46CE
10401  46CF
10402  46D0
10403  46D1
10404  46D2
10405  46D3
10406  46D4
10407  46D5
10408  46D6
10409  46D7
10410  46D8
10411  46D9
10412  46DA
10413  46DB
10414  46DC
10415  46DD
10416  46DE
10417  46DF
10418  46E0
10419  46E1
10420  46E2
10421  46E3
10422  46E4
10423  46E5
10424  46E6
10425  46E7
10426  46E8
10427  46E9
10428  46EA
10429  46EB
10430  46EC
10431  46ED
10432  46EE
10433  46EF
10434  46F0
10435  46F1
10436  46F2
10437  46F3
10438  46F4
10439  46F5
10440  46F6
10441  46F7
10442  46F8
10443  46F9
10444  46FA
10445  46FB
10446  46FC
10447  46FD
10448  46FE
10449  46FF
10450  4700
10451  4701
10452  4702
10453  4703
10454  4704
10455  4705
10456  4706
10457  4707
10458  4708
10459  4709
10460  470A
10461  470B
10462  470C
10463  470D
10464  470E
10465  470F
10466  4710
10467  4711
10468  4712
10469  4713
10470  4714
10471  4715
10472  4716
10473  4717
10474  4718
10475  4719
10476  471A
10477  471B
10478  471C
10479  471D
10480  471E
10481  471F
10482  4720
10483  4721
10484  4722
10485  4723
10486  4724
10487  4725
10488  4726
10489  4727
10490  4728
10491  4729
10492  472A
10493  472B
10494  472C
10495  472D
10496  472E
10497  472F
10498  4730
10499  4731
10500  4732
10501  4733
10502  4734
10503  4735
10504  4736
10505  4737
10506  4738
10507  4739
10508  473A
10509  473B
10510  473C
10511  473D
10512  473E
10513  473F
10514  4740
10515  4741
10516  4742
10517  4743
10518  4744
10519  4745
10520  4746
10521  4747
10522  4748
10523  4749
10524  474A
10525  474B
10526  474C
10527  474D
10528  474E
10529  474F
10530  4750
10531  4751
10532  4752
10533  4753
10534  4754
10535  4755
10536  4756
10537  4757
10538  4758
10539  4759
10540  475A
10541  475B
10542  475C
10543  475D
10544  475E
10545  475F
10546  4760
10547  4761
10548  4762
10549  4763
10550  4764
10551  4765
10552  4766
10553  4767
10554  4768
10555  4769
10556  476A
10557  476B
10558  476C
10559  476D
10560  476E
10561  476F
10562  4770
10563  4771
10564  4772
10565  4773
10566  4774
10567  4775
10568  4776
10569  4777
10570  4778
10571  4779
10572  477A
10573  477B
10574  477C
10575  477D
10576  477E
10577  477F
10578  4780
10579  4781
10580  4782
10581  4783
10582  4784
10583  4785
10584  4786
10585  4787
10586  4788
10587  4789
10588  478A
10589  478B
10590  478C
10591  478D
10592  478E
10593  478F
10594  4790
10595  4791
10596  4792
10597  4793
10598  4794
10599  4795
10600  4796
10601  4797
10602  4798
10603  4799
10604  479A
10605  479B
10606  479C
10607  479D
10608  479E
10609  479F
10610  47A0
10611  47A1
10612  47A2
10613  47A3
10614  47A4
10615  47A5
10616  47A6
10617  47A7
10618  47A8
10619  47A9
10620  47AA
10621  47AB
10622  47AC
10623  47AD
10624  47AE
10625  47AF
10626  47B0
10627  47B1
10628  47B2
10629  47B3
10630  47B4
10631  47B5
10632  47B6
10633  47B7
10634  47B8
10635  47B9
10636  47BA
10637  47BB
10638  47BC
10639  47BD
10640  47BE
10641  47BF
10642  47C0
10643  47C1
10644  47C2
10645  47C3
10646  47C4
10647  47C5
10648  47C6
10649  47C7
10650  47C8
10651  47C9
10652  47CA
10653  47CB
10654  47CC
10655  47CD
10656  47CE
10657  47CF
10658  47D0
10659  47D1
10660  47D2
10661  47D3
10662  47D4
10663  47D5
10664  47D6
10665  47D7
10666  47D8
10667  47D9
10668  47DA
10669  47DB
10670  47DC
10671  47DD
10672  47DE
10673  47DF
10674  47E0
10675  47E1
10676  47E2
10677  47E3
10678  47E4
10679  47E5
10680  47E6
10681  47E7
10682  47E8
10683  47E9
10684  47EA
10685  47EB
10686  47EC
10687  47ED
10688  47EE
10689  47EF
10690  47F0
10691  47F1
10692  47F2
10693  47F3
10694  47F4
10695  47F5
10696  47F6
10697  47F7
10698  47F8
10699  47F9
10700  47FA
10701  47FB
10702  47FC
10703  47FD
10704  47FE
10705  47FF
10706  4800
10707  4801
10708  4802
10709  4803
10710  4804
10711  4805
10712  4806
10713  4807
10714  4808
10715  4809
10716  480A
10717  480B
10718  480C
10719  480D
10720  480E
10721  480F
10722  4810
10723  4811
10724  4812
10725  4813
10726  4814
10727  4815
10728  4816
10729  4817
10730  4818
10731  4819
10732  481A
10733  481B
10734  481C
10735  481D
10736  481E
10737  481F
10738  4820
10739  4821
10740  4822
10741  4823
10742  4824
10743  4825
10744  4826
10745  4827
10746  4828
10747  4829
10748  482A
10749  482B
10750  482C
10751  482D
10752  482E
10753  482F
10754  4830
10755  4831
10756  4832
10757  4833
10758  4834
10759  4835
10760  4836
10761  4837
10762  4838
10763  4839
10764  483A
10765  483B
10766  483C
10767  483D
10768  483E
10769  483F
10770  4840
10771  4841
10772  4842
10773  4843
10774  4844
10775  4845
10776  4846
10777  4847
10778  4848
10779  4849
10780  484A
10781  484B
10782  484C
10783  484D
10784  484E
10785  484F
10786  4850
10787  4851
10788  4852
10789  4853
10790  4854
10791  4855
10792  4856
10793  4857
10794  4858
10795  4859
10796  485A
10797  485B
10798  485C
10799  485D
10800  485E
10801  485F
10802  4860
10803  4861
10804  4862
10805  4863
10806  4864
10807  4865
10808  4866
10809  4867
10810  4868
10811  4869
10812  486A
10813  486B
10814  486C
10815  486D
10816  486E
10817  486F
10818  4870
10819  4871
10820  4872
10821  4873
10822  4874
10823  4875
10824  4876
10825  4877
10826  4878
10827  4879
10828  487A
10829  487B
10830  487C
10831  487D
10832  487E
10833  487F
10834  4880
10835  4881
10836  4882
10837  4883
10838  4884
10839  4885
10840  4886
10841  4887
10842  4888
10843  4889
10844  488A
10845  488B
10846  488C
10847  488D
10848  488E
10849  488F
10850  4890
10851  4891
10852  4892
10853  4893
10854  4894
10855  4895
10856  4896
10857  4897
10858  4898
10859  4899
10860  489A
10861  489B
10862  489C
10863  489D
10864  489E
10865  489F
10866  48A0
10867  48A1
10868  48A2
10869  48A3
10870  48A4
10871  48A5
10872  48A6
10873  48A7
10874  48A8
10875  48A9
10876  48AA
10877  48AB
10878  48AC
10879  48AD
10880  48AE
10881  48AF
10882  48B0
10883  48B1
10884  48B2
10885  48B3
10886  48B4
10887  48B5
10888  48B6
10889  48B7
10890  48B8
10891  48B9
10892  48BA
10893  48BB
10894  48BC
10895  48BD
10896  48BE
10897  48BF
10898  48C0
10899  48C1
10900  48C2
10901  48C3
10902  48C4
10903  48C5
10904  48C6
10905  48C7
10906  48C8
10907  48C9
10908  48CA
10909  48CB
10910  48CC
10911  48CD
10912  48CE
10913  48CF
10914  48D0
10915  48D1
10916  48D2
10917  48D3
10918  48D4
10919  48D5
10920  48D6
10921  48D7
10922  48D8
10923  48D9
10924  48DA
10925  48DB
10926  48DC
10927  48DD
10928  48DE
10929  48DF
10930  48E0
10931  48E1
10932  48E2
10933  48E3
10934  48E4
10935  48E5
10936  48E6
10937  48E7
10938  48E8
10939  48E9
10940  48EA
10941  48EB
10942  48EC
10943  48ED
10944  48EE
10945  48EF
10946  48F0
10947  48F1
10948  48F2
10949  48F3
10950  48F4
10951  48F5
10952  48F6
10953  48F7
10954  48F8
10955  48F9
10956  48FA
10957  48FB
10958  48FC
10959  48FD
10960  48FE
10961  48FF
10962  4900
10963  4901
10964  4902
10965  4903
10966  4904
10967  4905
10968  4906
10969  4907
10970  4908
10971  4909
10972  490A
10973  490B
10974  490C
10975  490D
10976  490E
10977  490F
10978  4910
10979  4911
10980  4912
10981  4913
10982  4914
10983  4915
10984  4916
10985  4917
10986  4918
10987  4919
10988  491A
10989  491B
10990  491C
10991  491D
10992  491E
10993  491F
10994  4920
10995  4921
10996  4922
10997  4923
10998  4924
10999  4925
11000  4926
11001  4927
11002  4928
11003  4929
11004  492A
11005  492B
11006  492C
11007  492D
11008  492E
11009  492F
11010  4930
11011  4931
11012  4932
11013  4933
11014  4934
11015  4935
11016  4936
11017  4937
11018  4938
11019  4939
11020  493A
11021  493B
11022  493C
11023  493D
11024  493E
11025  493F
11026  4940
11027  4941
11028  4942
11029  4943
11030  4944
11031  4945
11032  4946
11033  4947
11034  4948
11035  4949
11036  494A
11037  494B
11038  494C
11039  494D
11040  494E
11041  494F
11042  4950
11043  4951
11044  4952
11045  4953
11046  4954
11047  4955
11048  4956
11049  4957
11050  4958
11051  4959
11052  495A
11053  495B
11054  495C
11055  495D
11056  495E
11057  495F
11058  4960
11059  4961
11060  4962
11061  4963
11062  4964
11063  4965
11064  4966
11065  4967
11066  4968
11067  4969
11068  496A
11069  496B
11070  496C
11071  496D
11072  496E
11073  496F
11074  4970
11075  4971
11076  4972
11077  4973
11078  4974
11079  4975
11080  4976
11081  4977
11082  4978
11083  4979
11084  497A
11085  497B
11086  497C
11087  497D
11088  497E
11089  497F
11090  4980
11091  4981
11092  4982
11093  4983
11094  4984
11095  4985
11096  4986
11097  4987
11098  4988
11099  4989
11100  498A
11101  498B
11102  498C
11103  498D
11104  498E
11105  498F
11106  4990
11107  4991
11108  4992
11109  4993
11110  4994
11111  4995
11112  4996
11113  4997
11114  4998
11115  4999
11116  499A
11117  499B
11118  499C
11119  499D
11120  499E
11121  499F
11122  49A0
11123  49A1
11124  49A2
11125  49A3
11126  49A4
11127  49A5
11128  49A6
11129  49A7
11130  49A8
11131  49A9
11132  49AA
11133  49AB
11134  49AC
11135  49AD
11136  49AE
11137  49AF
11138  49B0
11139  49B1
11140  49B2
11141  49B3
11142  49B4
11143  49B5
11144  49B6
11145  49B7
11146  49B8
11147  49B9
11148  49BA
11149  49BB
11150  49BC
11151  49BD
11152  49BE
11153  49BF
11154  49C0
11155  49C1
11156  49C2
11157  49C3
11158  49C4
11159  49C5
11160  49C6
11161  49C7
11162  49C8
11163  49C9
11164  49CA
11165  49CB
11166  49CC
11167  49CD
11168  49CE
11169  49CF
11170  49D0
11171  49D1
11172  49D2
11173  49D3
11174  49D4
11175  49D5
11176  49D6
11177  49D7
11178  49D8
11179  49D9
11180  49DA
11181  49DB
11182  49DC
11183  49DD
11184  49DE
11185  49DF
11186  49E0
11187  49E1
11188  49E2
11189  49E3
11190  49E4
11191  49E5
11192  49E6
11193  49E7
11194  49E8
11195  49E9
11196  49EA
11197  49EB
11198  49EC
11199  49ED
11200  49EE
11201  49EF
11202  49F0
11203  49F1
11204  49F2
11205  49F3
11206  49F4
11207  49F5
11208  49F6
11209  49F7
11210  49F8
11211  49F9
11212  49FA
11213  49FB
11214  49FC
11215  49FD
11216  49FE
11217  49FF
11218  4A00
11219  4A01
11220  4A02
11221  4A03
11222  4A04
11223  4A05
11224  4A06
11225  4A07
11226  4A08
11227  4A09
11228  4A0A
11229  4A0B
11230  4A0C
11231  4A0D
11232  4A0E
11233  4A0F
11234  4A10
11235  4A11
11236  4A12
11237  4A13
11238  4A14
11239  4A15
11240  4A16
11241  4A17
11242  4A18
11243  4A19
11244  4A1A
11245  4A1B
11246  4A1C
11247  4A1D
11248  4A1E
11249  4A1F
11250  4A20
11251  4A21
11252  4A22
11253  4A23
11254  4A24
11255  4A25
11256  4A26
11257  4A27
11258  4A28
11259  4A29
11260  4A2A
11261  4A2B
11262  4A2C
11263  4A2D
11264  4A2E
11265  4A2F
11266  4A30
11267  4A31
11268  4A32
11269  4A33
11270  4A34
11271  4A35
11272  4A36
11273  4A37
11274  4A38
11275  4A39
11276  4A3A
11277  4A3B
11278  4A3C
11279  4A3D
11280  4A3E
11281  4A3F
11282  4A40
11283  4A41
11284  4A42
11285  4A43
11286  4A44
11287  4A45
11288  4A46
11289  4A47
11290  4A48
11291  4A49
11292  4A4A
11293  4A4B
11294  4A4C
11295  4A4D
11296  4A4E
11297  4A4F
11298  4A50
11299  4A51
11300  4A52
11301  4A53
11302  4A54
11303  4A55
11304  4A56
11305  4A57
11306  4A58
11307  4A59
11308  4A5A
11309  4A5B
11310  4A5C
11311  4A5D
11312  4A5E
11313  4A5F
11314  4A60
11315  4A61
11316  4A62
11317  4A63
11318  4A64
11319  4A65
11320  4A66
11321  4A67
11322  4A68
11323  4A69
11324  4A6A
11325  4A6B
11326  4A6C
11327  4A6D
11328  4A6E
11329  4A6F
11330  4A70
11331  4A71
11332  4A72
11333  4A73
11334  4A74
11335  4A75
11336  4A76
11337  4A77
11338  4A78
11339  4A79
11340  4A7A
11341  4A7B
11342  4A7C
11343  4A7D
11344  4A7E
11345  4A7F
11346  4A80
11347  4A81
11348  4A82
11349  4A83
11350  4A84
11351  4A85
11352  4A86
11353  4A87
11354  4A88
11355  4A89
11356  4A8A
11357  4A8B
11358  4A8C
11359  4A8D
11360  4A8E
11361  4A8F
11362  4A90
11363  4A91
11364  4A92
11365  4A93
11366  4A94
11367  4A95
11368  4A96
11369  4A97
11370  4A98
11371  4A99
11372  4A9A
11373  4A9B
11374  4A9C
11375  4A9D
11376  4A9E
11377  4A9F
11378  4AA0
11379  4AA1
11380  4AA2
11381  4AA3
11382  4AA4
11383  4AA5
11384  4AA6
11385  4AA7
11386  4AA8
11387  4AA9
11388  4AAA
11389  4AAB
11390  4AAC
11391  4AAD
11392  4AAE
11393  4AAF
11394  4AB0
11395  4AB1
11396  4AB2
11397  4AB3
11398  4AB4
11399  4AB5
11400  4AB6
11401  4AB7
11402  4AB8
11403  4AB9
11404  4ABA
11405  4ABB
11406  4ABC
11407  4ABD
11408  4ABE
11409  4ABF
11410  4AC0
11411  4AC1
11412  4AC2
11413  4AC3
11414  4AC4
11415  4AC5
11416  4AC6
11417  4AC7
11418  4AC8
11419  4AC9
11420  4ACA
11421  4ACB
11422  4ACC
11423  4ACD
11424  4ACE
11425  4ACF
11426  4AD0
11427  4AD1
11428  4AD2
11429  4AD3
11430  4AD4
11431  4AD5
11432  4AD6
11433  4AD7
11434  4AD8
11435  4AD9
11436  4ADA
11437  4ADB
11438  4ADC
11439  4ADD
11440  4ADE
11441  4ADF
11442  4AE0
11443  4AE1
11444  4AE2
11445  4AE3
11446  4AE4
11447  4AE5
11448  4AE6
11449  4AE7
11450  4AE8
11451  4AE9
11452  4AEA
11453  4AEB
11454  4AEC
11455  4AED
11456  4AEE
11457  4AEF
11458  4AF0
11459  4AF1
11460  4AF2
11461  4AF3
11462  4AF4
11463  4AF5
11464  4AF6
11465  4AF7
11466  4AF8
11467  4AF9
11468  4AFA
11469  4AFB
11470  4AFC
11471  4AFD
11472  4AFE
11473  4AFF
11474  4B00
11475  4B01
11476  4B02
11477  4B03
11478  4B04
11479  4B05
11480  4B06
11481  4B07
11482  4B08
11483  4B09
11484  4B0A
11485  4B0B
11486  4B0C
11487  4B0D
11488  4B0E
11489  4B0F
11490  4B10
11491  4B11
11492  4B12
11493  4B13
11494  4B14
11495  4B15
11496  4B16
11497  4B17
11498  4B18
11499  4B19
11500  4B1A
11501  4B1B
11502  4B1C
11503  4B1D
11504  4B1E
11505  4B1F
11506  4B20
11507  4B21
11508  4B22
11509  4B23
11510  4B24
11511  4B25
11512  4B26
11513  4B27
11514  4B28
11515  4B29
11516  4B2A
11517  4B2B
11518  4B2C
11519  4B2D
11520  4B2E
11521  4B2F
11522  4B30
11523  4B31
11524  4B32
11525  4B33
11526  4B34
11527  4B35
11528  4B36
11529  4B37
11530  4B38
11531  4B39
11532  4B3A
11533  4B3B
11534  4B3C
11535  4B3D
11536  4B3E
11537  4B3F
11538  4B40
11539  4B41
11540  4B42
11541  4B43
11542  4B44
11543  4B45
11544  4B46
11545  4B47
11546  4B48
11547  4B49
11548  4B4A
11549  4B4B
11550  4B4C
11551  4B4D
11552  4B4E
11553  4B4F
11554  4B50
11555  4B51
11556  4B52
11557  4B53
11558  4B54
11559  4B55
11560  4B56
11561  4B57
11562  4B58
11563  4B59
11564  4B5A
11565  4B5B
11566  4B5C
11567  4B5D
11568  4B5E
11569  4B5F
11570  4B60
11571  4B61
11572  4B62
11573  4B63
11574  4B64
11575  4B65
11576  4B66
11577  4B67
11578  4B68
11579  4B69
11580  4B6A
11581  4B6B
11582  4B6C
11583  4B6D
11584  4B6E
11585  4B6F
11586  4B70
11587  4B71
11588  4B72
11589  4B73
11590  4B74
11591  4B75
11592  4B76
11593  4B77
11594  4B78
11595  4B79
11596  4B7A
11597  4B7B
11598  4B7C
11599  4B7D
11600  4B7E
11601  4B7F
11602  4B80
11603  4B81
11604  4B82
11605  4B83
11606  4B84
11607  4B85
11608  4B86
11609  4B87
11610  4B88
11611  4B89
11612  4B8A
11613  4B8B
11614  4B8C
11615  4B8D
11616  4B8E
11617  4B8F
11618  4B90
11619  4B91
11620  4B92
11621  4B93
11622  4B94
11623  4B95
11624  4B96
11625  4B97
11626  4B98
11627  4B99
11628  4B9A
11629  4B9B
11630  4B9C
11631  4B9D
11632  4B9E
11633  4B9F
11634  4BA0
11635  4BA1
11636  4BA2
11637  4BA3
11638  4BA4
11639  4BA5
11640  4BA6
11641  4BA7
11642  4BA8
11643  4BA9
11644  4BAA
11645  4BAB
11646  4BAC
11647  4BAD
11648  4BAE
11649  4BAF
11650  4BB0
11651  4BB1
11652  4BB2
11653  4BB3
11654  4BB4
11655  4BB5
11656  4BB6
11657  4BB7
11658  4BB8
11659  4BB9
11660  4BBA
11661  4BBB
11662  4BBC
11663  4BBD
11664  4BBE
11665  4BBF
11666  4BC0
11667  4BC1
11668  4BC2
11669  4BC3
11670  4BC4
11671  4BC5
11672  4BC6
11673  4BC7
11674  4BC8
11675  4BC9
11676  4BCA
11677  4BCB
11678  4BCC
11679  4BCD
11680  4BCE
11681  4BCF
11682  4BD0
11683  4BD1
11684  4BD2
11685  4BD3
11686  4BD4
11687  4BD5
11688  4BD6
11689  4BD7
11690  4BD8
11691  4BD9
11692  4BDA
11693  4BDB
11694  4BDC
11695  4BDD
11696  4BDE
11697  4BDF
11698  4BE0
11699  4BE1
11700  4BE2
11701  4BE3
11702  4BE4
11703  4BE5
11704  4BE6
11705  4BE7
11706  4BE8
11707  4BE9
11708  4BEA
11709  4BEB
11710  4BEC
11711  4BED
11712  4BEE
11713  4BEF
11714  4BF0
11715  4BF1
11716  4BF2
11717  4BF3
11718  4BF4
11719  4BF5
11720  4BF6
11721  4BF7
11722  4BF8
11723  4BF9
11724  4BFA
11725  4BFB
11726  4BFC
11727  4BFD
11728  4BFE
11729  4BFF
11730  4C00
11731  4C01
11732  4C02
11733  4C03
11734  4C04
11735  4C05
11736  4C06
11737  4C07
11738  4C08
11739  4C09
11740  4C0A
11741  4C0B
11742  4C0C
11743  4C0D
11744  4C0E
11745  4C0F
11746  4C10
11747  4C11
11748  4C12
11749  4C13
11750  4C14
11751  4C15
11752  4C16
11753  4C17
11754  4C18
11755  4C19
11756  4C1A
11757  4C1B
11758  4C1C
11759  4C1D
11760  4C1E
11761  4C1F
11762  4C20
11763  4C21
11764  4C22
11765  4C23
11766  4C24
11767  4C25
11768  4C26
11769  4C27
11770  4C28
11771  4C29
11772  4C2A
11773  4C2B
11774  4C2C
11775  4C2D
11776  4C2E
11777  4C2F
11778  4C30
11779  4C31
11780  4C32
11781  4C33
11782  4C34
11783  4C35
11784  4C36
11785  4C37
11786  4C38
11787  4C39
11788  4C3A
11789  4C3B
11790  4C3C
11791  4C3D
11792  4C3E
11793  4C3F
11794  4C40
11795  4C41
11796  4C42
11797  4C43
11798  4C44
11799  4C45
11800  4C46
11801  4C47
11802  4C48
11803  4C49
11804  4C4A
11805  4C4B
11806  4C4C
11807  4C4D
11808  4C4E
11809  4C4F
11810  4C50
11811  4C51
11812  4C52
11813  4C53
11814  4C54
11815  4C55
11816  4C56
11817  4C57
11818  4C58
11819  4C59
11820  4C5A
11821  4C5B
11822  4C5C
11823  4C5D
11824  4C5E
11825  4C5F
11826  4C60
11827  4C61
11828  4C62
11829  4C63
11830  4C64
11831  4C65
11832  4C66
11833  4C67
11834  4C68
11835  4C69
11836  4C6A
11837  4C6B
11838  4C6C
11839  4C6D
11840  4C6E
11841  4C6F
11842  4C70
11843  4C71
11844  4C72
11845  4C73
11846  4C74
11847  4C75
11848  4C76
11849  4C77
11850  4C78
11851  4C79
11852  4C7A
11853  4C7B
11854  4C7C
11855  4C7D
11856  4C7E
11857  4C7F
11858  4C80
11859  4C81
11860  4C82
11861  4C83
11862  4C84
11863  4C85
11864  4C86
11865  4C87
11866  4C88
11867  4C89
11868  4C8A
11869  4C8B
11870  4C8C
11871  4C8D
11872  4C8E
11873  4C8F
11874  4C90
11875  4C91
11876  4C92
11877  4C93
11878  4C94
11879  4C95
11880  4C96
11881  4C97
11882  4C98
11883  4C99
11884  4C9A
11885  4C9B
11886  4C9C
11887  4C9D
11888  4C9E
11889  4C9F
11890  4CA0
11891  4CA1
11892  4CA2
11893  4CA3
11894  4CA4
11895  4CA5
11896  4CA6
11897  4CA7
11898  4CA8
11899  4CA9
11900  4CAA
11901  4CAB
11902  4CAC
11903  4CAD
11904  4CAE
11905  4CAF
11906  4CB0
11907  4CB1
11908  4CB2
11909  4CB3
11910  4CB4
11911  4CB5
11912  4CB6
11913  4CB7
11914  4CB8
11915  4CB9
11916  4CBA
11917  4CBB
11918  4CBC
11919  4CBD
11920  4CBE
11921  4CBF
11922  4CC0
11923  4CC1
11924  4CC2
11925  4CC3
11926  4CC4
11927  4CC5
11928  4CC6
11929  4CC7
11930  4CC8
11931  4CC9
11932  4CCA
11933  4CCB
11934  4CCC
11935  4CCD
11936  4CCE
11937  4CCF
11938  4CD0
11939  4CD1
11940  4CD2
11941  4CD3
11942  4CD4
11943  4CD5
11944  4CD6
11945  4CD7
11946  4CD8
11947  4CD9
11948  4CDA
11949  4CDB
11950  4CDC
11951  4CDD
11952  4CDE
11953  4CDF
11954  4CE0
11955  4CE1
11956  4CE2
11957  4CE3
11958  4CE4
11959  4CE5
11960  4CE6
11961  4CE7
11962  4CE8
11963  4CE9
11964  4CEA
11965  4CEB
11966  4CEC
11967  4CED
11968  4CEE
11969  4CEF
11970  4CF0
11971  4CF1
11972  4CF2
11973  4CF3
11974  4CF4
11975  4CF5
11976  4CF6
11977  4CF7
11978  4CF8
11979  4CF9
11980  4CFA
11981  4CFB
11982  4CFC
11983  4CFD
11984  4CFE
11985  4CFF
11986  4D00
11987  4D01
11988  4D02
11989  4D03
11990  4D04
11991  4D05
11992  4D06
11993  4D07
11994  4D08
11995  4D09
11996  4D0A
11997  4D0B
11998  4D0C
11999  4D0D
12000  4D0E
12001  4D0F
12002  4D10
12003  4D11
12004  4D12
12005  4D13
12006  4D14
12007  4D15
12008  4D16
12009  4D17
12010  4D18
12011  4D19
12012  4D1A
12013  4D1B
12014  4D1C
12015  4D1D
12016  4D1E
12017  4D1F
12018  4D20
12019  4D21
12020  4D22
12021  4D23
12022  4D24
12023  4D25
12024  4D26
12025  4D27
12026  4D28
12027  4D29
12028  4D2A
12029  4D2B
12030  4D2C
12031  4D2D
12032  4D2E
12033  4D2F
12034  4D30
12035  4D31
12036  4D32
12037  4D33
12038  4D34
12039  4D35
12040  4D36
12041  4D37
12042  4D38
12043  4D39
12044  4D3A
12045  4D3B
12046  4D3C
12047  4D3D
12048  4D3E
12049  4D3F
12050  4D40
12051  4D41
12052  4D42
12053  4D43
12054  4D44
12055  4D45
12056  4D46
12057  4D47
12058  4D48
12059  4D49
12060  4D4A
12061  4D4B
12062  4D4C
12063  4D4D
12064  4D4E
12065  4D4F
12066  4D50
12067  4D51
12068  4D52
12069  4D53
12070  4D54
12071  4D55
12072  4D56
12073  4D57
12074  4D58
12075  4D59
12076  4D5A
12077  4D5B
12078  4D5C
12079  4D5D
12080  4D5E
12081  4D5F
12082  4D60
12083  4D61
12084  4D62
12085  4D63
12086  4D64
12087  4D65
12088  4D66
12089  4D67
12090  4D68
12091  4D69
12092  4D6A
12093  4D6B
12094  4D6C
12095  4D6D
12096  4D6E
12097  4D6F
12098  4D70
12099  4D71
12100  4D72
12101  4D73
12102  4D74
12103  4D75
12104  4D76
12105  4D77
12106  4D78
12107  4D79
12108  4D7A
12109  4D7B
12110  4D7C
12111  4D7D
12112  4D7E
12113  4D7F
12114  4D80
12115  4D81
12116  4D82
12117  4D83
12118  4D84
12119  4D85
12120  4D86
12121  4D87
12122  4D88
12123  4D89
12124  4D8A
12125  4D8B
12126  4D8C
12127  4D8D
12128  4D8E
12129  4D8F
12130  4D90
12131  4D91
12132  4D92
12133  4D93
12134  4D94
12135  4D95
12136  4D96
12137  4D97
12138  4D98
12139  4D99
12140  4D9A
12141  4D9B
12142  4D9C
12143  4D9D
12144  4D9E
12145  4D9F
12146  4DA0
12147  4DA1
12148  4DA2
12149  4DA3
12150  4DA4
12151  4DA5
12152  4DA6
12153  4DA7
12154  4DA8
12155  4DA9
12156  4DAA
12157  4DAB
12158  4DAC
12159  4DAD
12160  4DAE
12161  4DAF
12162  4DB0
12163  4DB1
12164  4DB2
12165  4DB3
12166  4DB4
12167  4DB5
12168  4DB6
12169  4DB7
12170  4DB8
12171  4DB9
12172  4DBA
12173  4DBB
12174  4DBC
12175  4DBD
12176  4DBE
12177  4DBF
12178  4DC0
12179  4DC1
12180  4DC2
12181  4DC3
12182  4DC4
12183  4DC5
12184  4DC6
12185  4DC7
12186  4DC8
12187  4DC9
12188  4DCA
12189  4DCB
12190  4DCC
12191  4DCD
12192  4DCE
12193  4DCF
12194  4DD0
12195  4DD1
12196  4DD2
12197  4DD3
12198  4DD4
12199  4DD5
12200  4DD6
12201  4DD7
12202  4DD8
12203  4DD9
12204  4DDA
12205  4DDB
12206  4DDC
12207  4DDD
12208  4DDE
12209  4DDF
12210  4DE0
12211  4DE1
12212  4DE2
12213  4DE3
12214  4DE4
12215  4DE5
12216  4DE6
12217  4DE7
12218  4DE8
12219  4DE9
12220  4DEA
12221  4DEB
12222  4DEC
12223  4DED
12224  4DEE
12225  4DEF
12226  4DF0
12227  4DF1
12228  4DF2
12229  4DF3
12230  4DF4
12231  4DF5
12232  4DF6
12233  4DF7
12234  4DF8
12235  4DF9
12236  4DFA
12237  4DFB
12238  4DFC
12239  4DFD
12240  4DFE
12241  4DFF
12242  4E00
12243  4E01
12244  4E02
12245  4E03
12246  4E04
12247  4E05
12248  4E06
12249  4E07
12250  4E08
12251  4E09
12252  4E0A
12253  4E0B
12254  4E0C
12255  4E0D
12256  4E0E
12257  4E0F
12258  4E10
12259  4E11
12260  4E12
12261  4E13
12262  4E14
12263  4E15
12264  4E16
12265  4E17
12266  4E18
12267  4E19
12268  4E1A
12269  4E1B
12270  4E1C
12271  4E1D
12272  4E1E
12273  4E1F
12274  4E20
12275  4E21
12276  4E22
12277  4E23
12278  4E24
12279  4E25
12280  4E26
12281  4E27
12282  4E28
12283  4E29
12284  4E2A
12285  4E2B
12286  4E2C
12287  4E2D
12288  4E2E
12289  4E2F
12290  4E30
12291  4E31
12292  4E32
12293  4E33
12294  4E34
12295  4E35
12296  4E36
12297  4E37
12298  4E38
12299  4E39
12300  4E3A
12301  4E3B
12302  4E3C
12303  4E3D
12304  4E3E
12305  4E3F
12306  4E40
12307  4E41
12308  4E42
12309  4E43
12310  4E44
12311  4E45
12312  4E46
12313  4E47
12314  4E48
12315  4E49
12316  4E4A
12317  4E4B
12318  4E4C
12319  4E4D
12320  4E4E
12321  4E4F
12322  4E50
12323  4E51
12324  4E52
12325  4E53
12326  4E54
12327  4E55
12328  4E56
12329  4E57
12330  4E58
12331  4E59
12332  4E5A
12333  4E5B
12334  4E5C
12335  4E5D
12336  4E5E
12337  4E5F
12338  4E60
12339  4E61
12340  4E62
12341  4E63
12342  4E64
12343  4E65
12344  4E66
12345  4E67
12346  4E68
12347  4E69
12348  4E6A
12349  4E6B
12350  4E6C
12351  4E6D
12352  4E6E
12353  4E6F
12354  4E70
12355  4E71
12356  4E72
12357  4E73
12358  4E74
12359  4E75
12360  4E76
12361  4E77
12362  4E78
12363  4E79
12364  4E7A
12365  4E7B
12366  4E7C
12367  4E7D
12368  4E7E
12369  4E7F
12370  4E80
12371  4E81
12372  4E82
12373  4E83
12374  4E84
12375  4E85
12376  4E86
12377  4E87
12378  4E88
12379  4E89
12380  4E8A
12381  4E8B
12382  4E8C
12383  4E8D
12384  4E8E
12385  4E8F
12386  4E90
12387  4E91
12388  4E92
12389  4E93
12390  4E94
12391  4E95
12392  4E96
12393  4E97
12394  4E98
12395  4E99
12396  4E9A
12397  4E9B
12398  4E9C
12399  4E9D
12400  4E9E
12401  4E9F
12402  4EA0
12403  4EA1
12404  4EA2
12405  4EA3
12406  4EA4
12407  4EA5
12408  4EA6
12409  4EA7
12410  4EA8
12411  4EA9
12412  4EAA
12413  4EAB
12414  4EAC
12415  4EAD
12416  4EAE
12417  4EAF
12418  4EB0
12419  4EB1
12420  4EB2
12421  4EB3
12422  4EB4
12423  4EB5
12424  4EB6
12425  4EB7
12426  4EB8
12427  4EB9
12428  4EBA
12429  4EBB
12430  4EBC
12431  4EBD
12432  4EBE
12433  4EBF
12434  4EC0
12435  4EC1
12436  4EC2
12437  4EC3
12438  4EC4
12439  4EC5
12440  4EC6
12441  4EC7
12442  4EC8
12443  4EC9
12444  4ECA
12445  4ECB
12446  4ECC
12447  4ECD
12448  4ECE
12449  4ECF
12450  4ED0
12451  4ED1
12452  4ED2
12453  4ED3
12454  4ED4
12455  4ED5
12456  4ED6
12457  4ED7
12458  4ED8
12459  4ED9
12460  4EDA
12461  4EDB
12462  4EDC
12463  4EDD
12464  4EDE
12465  4EDF
12466  4EE0
12467  4EE1
12468  4EE2
12469  4EE3
12470  4EE4
12471  4EE5
12472  4EE6
12473  4EE7
12474  4EE8
12475  4EE9
12476  4EEA
12477  4EEB
12478  4EEC
12479  4EED
12480  4EEE
12481  4EEF
12482  4EF0
12483  4EF1
12484  4EF2
12485  4EF3
12486  4EF4
12487  4EF5
12488  4EF6
12489  4EF7
12490  4EF8
12491  4EF9
12492  4EFA
12493  4EFB
12494  4EFC
12495  4EFD
12496  4EFE
12497  4EFF
12498  4F00
12499  4F01
12500  4F02
12501  4F03
12502  4F04
12503  4F05
12504  4F06
12505  4F07
12506  4F08
12507  4F09
12508  4F0A
12509  4F0B
12510  4F0C
12511  4F0D
12512  4F0E
12513  4F0F
12514  4F10
12515  4F11
12516  4F12
12517  4F13
12518  4F14
12519  4F15
12520  4F16
12521  4F17
12522  4F18
12523  4F19
12524  4F1A
12525  4F1B
12526  4F1C
12527  4F1D
12528  4F1E
12529  4F1F
12530  4F20
12531  4F21
12532  4F22
12533  4F23
12534  4F24
12535  4F25
12536  4F26
12537  4F27
12538  4F28
12539  4F29
12540  4F2A
12541  4F2B
12542  4F2C
12543  4F2D
12544  4F2E
12545  4F2F
12546  4F30
12547  4F31
12548  4F32
12549  4F33
12550  4F34
12551  4F35
12552  4F36
12553  4F37
12554  4F38
12555  4F39
12556  4F3A
12557  4F3B
12558  4F3C
12559  4F3D
12560  4F3E
12561  4F3F
12562  4F40
12563  4F41
12564  4F42
12565  4F43
12566  4F44
12567  4F45
12568  4F46
12569  4F47
12570  4F48
12571  4F49
12572  4F4A
12573  4F4B
12574  4F4C
12575  4F4D
12576  4F4E
12577  4F4F
12578  4F50
12579  4F51
12580  4F52
12581  4F53
12582  4F54
12583  4F55
12584  4F56
12585  4F57
12586  4F58
12587  4F59
12588  4F5A
12589  4F5B
12590  4F5C
12591  4F5D
12592  4F5E
12593  4F5F
12594  4F60
12595  4F61
12596  4F62
12597  4F63
12598  4F64
12599  4F65
12600  4F66
12601  4F67
12602  4F68
12603  4F69
12604  4F6A
12605  4F6B
12606  4F6C
12607  4F6D
12608  4F6E
12609  4F6F
12610  4F70
12611  4F71
12612  4F72
12613  4F73
12614  4F74
12615  4F75
12616  4F76
12617  4F77
12618  4F78
12619  4F79
12620  4F7A
12621  4F7B
12622  4F7C
12623  4F7D
12624  4F7E
12625  4F7F
12626  4F80
12627  4F81
12628  4F82
12629  4F83
12630  4F84
12631  4F85
12632  4F86
12633  4F87
12634  4F88
12635  4F89
12636  4F8A
12637  4F8B
12638  4F8C
12639  4F8D
12640  4F8E
12641  4F8F
12642  4F90
12643  4F91
12644  4F92
12645  4F93
12646  4F94
12647  4F95
12648  4F96
12649  4F97
12650  4F98
12651  4F99
12652  4F9A
12653  4F9B
12654  4F9C
12655  4F9D
12656  4F9E
12657  4F9F
12658  4FA0
12659  4FA1
12660  4FA2
12661  4FA3
12662  4FA4
12663  4FA5
12664  4FA6
12665  4FA7
12666  4FA8
12667  4FA9
12668  4FAA
12669  4FAB
12670  4FAC
12671  4FAD
12672  4FAE
12673  4FAF
12674  4FB0
12675  4FB1
12676  4FB2
12677  4FB3
12678  4FB4
12679  4FB5
12680  4FB6
12681  4FB7
12682  4FB8
12683  4FB9
12684  4FBA
12685  4FBB
12686  4FBC
12687  4FBD
12688  4FBE
12689  4FBF
12690  4FC0
12691  4FC1
12692  4FC2
12693  4FC3
12694  4FC4
12695  4FC5
12696  4FC6
12697  4FC7
12698  4FC8
12699  4FC9
12700  4FCA
12701  4FCB
12702  4FCC
12703  4FCD
12704  4FCE
12705  4FCF
12706  4FD0
12707  4FD1
12708  4FD2
12709  4FD3
12710  4FD4
12711  4FD5
12712  4FD6
12713  4FD7
12714  4FD8
12715  4FD9
12716  4FDA
12717  4FDB
12718  4FDC
12719  4FDD
12720  4FDE
12721  4FDF
12722  4FE0
12723  4FE1
12724  4FE2
12725  4FE3
12726  4FE4
12727  4FE5
12728  4FE6
12729  4FE7
12730  4FE8
12731  4FE9
12732  4FEA
12733  4FEB
12734  4FEC
12735  4FED
12736  4FEE
12737  4FEF
12738  4FF0
12739  4FF1
12740  4FF2
12741  4FF3
12742  4FF4
12743  4FF5
12744  4FF6
12745  4FF7
12746  4FF8
12747  4FF9
12748  4FFA
12749  4FFB
12750  4FFC
12751  4FFD
12752  4FFE
12753  4FFF
12754  5000
12755  5001
12756  5002
12757  5003
12758  5004
12759  5005
12760  5006
12761  5007
12762  5008
12763  5009
12764  500A
12765  500B
12766  500C
12767  500D
12768  500E
12769  500F
12770  5010
12771  5011
12772  5012
12773  5013
12774  5014
12775  5015
12776  5016
12777  5017
12778  5018
12779  5019
12780  501A
12781  501B
12782  501C
12783  501D
12784  501E
12785  501F
12786  5020
12787  5021
12788  5022
12789  5023
12790  5024
12791  5025
12792  5026
12793  5027
12794  5028
12795  5029
12796  502A
12797  502B
12798  502C
12799  502D
12800  502E
12801  502F
12802  5030
12803  5031
12804  5032
12805  5033
12806  5034
12807  5035
12808  5036
12809  5037
12810  5038
12811  5039
12812  503A
12813  503B
12814  503C
12815  503D
12816  503E
12817  503F
12818  5040
12819  5041
12820  5042
12821  5043
12822  5044
12823  5045
12824  5046
12825  5047
12826  5048
12827  5049
12828  504A
12829  504B
12830  504C
12831  504D
12832  504E
12833  504F
12834  5050
12835  5051
12836  5052
12837  5053
12838  5054
12839  5055
12840  5056
12841  5057
12842  5058
12843  5059
12844  505A
12845  505B
12846  505C
12847  505D
12848  505E
12849  505F
12850  5060
12851  5061
12852  5062
12853  5063
12854  5064
12855  5065
12856  5066
12857  5067
12858  5068
12859  5069
12860  506A
12861  506B
12862  506C
12863  506D
12864  506E
12865  506F
12866  5070
12867  5071
12868  5072
12869  5073
12870  5074
12871  5075
12872  5076
12873  5077
12874  5078
12875  5079
12876  507A
12877  507B
12878  507C
12879  507D
12880  507E
12881  507F
12882  5080
12883  5081
12884  5082
12885  5083
12886  5084
12887  5085
12888  5086
12889  5087
12890  5088
12891  5089
12892  508A
12893  508B
12894  508C
12895  508D
12896  508E
12897  508F
12898  5090
12899  5091
12900  5092
12901  5093
12902  5094
12903  5095
12904  5096
12905  5097
12906  5098
12907  5099
12908  509A
12909  509B
12910  509C
12911  509D
12912  509E
12913  509F
12914  50A0
12915  50A1
12916  50A2
12917  50A3
12918  50A4
12919  50A5
12920  50A6
12921  50A7
12922  50A8
12923  50A9
12924  50AA
12925  50AB
12926  50AC
12927  50AD
12928  50AE
12929  50AF
12930  50B0
12931  50B1
12932  50B2
12933  50B3
12934  50B4
12935  50B5
12936  50B6
12937  50B7
12938  50B8
12939  50B9
12940  50BA
12941  50BB
12942  50BC
12943  50BD
12944  50BE
12945  50BF
12946  50C0
12947  50C1
12948  50C2
12949  50C3
12950  50C4
12951  50C5
12952  50C6
12953  50C7
12954  50C8
12955  50C9
12956  50CA
12957  50CB
12958  50CC
12959  50CD
12960  50CE
12961  50CF
12962  50D0
12963  50D1
12964  50D2
12965  50D3
12966  50D4
12967  50D5
12968  50D6
12969  50D7
12970  50D8
12971  50D9
12972  50DA
12973  50DB
12974  50DC
12975  50DD
12976  50DE
12977  50DF
12978  50E0
12979  50E1
12980  50E2
12981  50E3
12982  50E4
12983  50E5
12984  50E6
12985  50E7
12986  50E8
12987  50E9
12988  50EA
12989  50EB
12990  50EC
12991  50ED
12992  50EE
12993  50EF
12994  50F0
12995  50F1
12996  50F2
12997  50F3
12998  50F4
12999  50F5
13000  50F6
13001  50F7
13002  50F8
13003  50F9
13004  50FA
13005  50FB
13006  50FC
13007  50FD
13008  50FE
13009  50FF
13010  5100
13011  5101
13012  5102
13013  5103
13014  5104
13015  5105
13016  5106
13017  5107
13018  5108
13019  5109
13020  510A
13021  510B
13022  510C
13023  510D
13024  510E
13025  510F
13026  5110
13027  5111
13028  5112
13029  5113
13030  5114
13031  5115
13032  5116
13033  5117
13034  5118
13035  5119
13036  511A
13037  511B
13038  511C
13039  511D
13040  511E
13041  511F
13042  5120
13043  5121
13044  5122
13045  5123
13046  5124
13047  5125
13048  5126
13049  5127
13050  5128
13051  5129
13052  512A
13053  512B
13054  512C
13055  512D
13056  512E
13057  512F
13058  5130
13059  5131
13060  5132
13061  5133
13062  5134
13063  5135
13064  5136
13065  5137
13066  5138
13067  5139
13068  513A
13069  513B
13070  513C
13071  513D
13072  513E
13073  513F
13074  5140
13075  5141
13076  5142
13077  5143
13078  5144
13079  5145
13080  5146
13081  5147
13082  5148
13083  5149
13084  514A
13085  514B
13086  514C
13087  514D
13088  514E
13089  514F
13090  5150
13091  5151
13092  5152
13093  5153
13094  5154
13095  5155
13096  5156
13097  5157
13098  5158
13099  5159
13100  515A
13101  515B
13102  515C
13103  515D
13104  515E
13105  515F
13106  5160
13107  5161
13108  5162
13109  5163
13110  5164
13111  5165
13112  5166
13113  5167
13114  5168
13115  5169
13116  516A
13117  516B
13118  516C
13119  516D
13120  516E
13121  516F
13122  5170
13123  5171
13124  5172
13125  5173
13126  5174
13127  5175
13128  5176
13129  5177
13130  5178
13131  5179
13132  517A
13133  517B
13134  517C
13135  517D
13136  517E
13137  517F
13138  5180
13139  5181
13140  5182
13141  5183
13142  5184
13143  5185
13144  5186
13145  5187
13146  5188
13147  5189
13148  518A
13149  518B
13150  518C
13151  518D
13152  518E
13153  518F
13154  5190
13155  5191
13156  5192
13157  5193
13158  5194
13159  5195
13160  5196
13161  5197
13162  5198
13163  5199
13164  519A
13165  519B
13166  519C
13167  519D
13168  519E
13169  519F
13170  51A0
13171  51A1
13172  51A2
13173  51A3
13174  51A4
13175  51A5
13176  51A6
13177  51A7
13178  51A8
13179  51A9
13180  51AA
13181  51AB
13182  51AC
13183  51AD
13184  51AE
13185  51AF
13186  51B0
13187  51B1
13188  51B2
13189  51B3
13190  51B4
13191  51B5
13192  51B6
13193  51B7
13194  51B8
13195  51B9
13196  51BA
13197  51BB
13198  51BC
13199  51BD
13200  51BE
13201  51BF
13202  51C0
13203  51C1
13204  51C2
13205  51C3
13206  51C4
13207  51C5
13208  51C6
13209  51C7
13210  51C8
13211  51C9
13212  51CA
13213  51CB
13214  51CC
13215  51CD
13216  51CE
13217  51CF
13218  51D0
13219  51D1
13220  51D2
13221  51D3
13222  51D4
13223  51D5
13224  51D6
13225  51D7
13226  51D8
13227  51D9
13228  51DA
13229  51DB
13230  51DC
13231  51DD
13232  51DE
13233  51DF
13234  51E0
13235  51E1
13236  51E2
13237  51E3
13238  51E4
13239  51E5
13240  51E6
13241  51E7
13242  51E8
13243  51E9
13244  51EA
13245  51EB
13246  51EC
13247  51ED
13248  51EE
13249  51EF
13250  51F0
13251  51F1
13252  51F2
13253  51F3
13254  51F4
13255  51F5
13256  51F6
13257  51F7
13258  51F8
13259  51F9
13260  51FA
13261  51FB
13262  51FC
13263  51FD
13264  51FE
13265  51FF
13266  5200
13267  5201
13268  5202
13269  5203
13270  5204
13271  5205
13272  5206
13273  5207
13274  5208
13275  5209
13276  520A
13277  520B
13278  520C
13279  520D
13280  520E
13281  520F
13282  5210
13283  5211
13284  5212
13285  5213
13286  5214
13287  5215
13288  5216
13289  5217
13290  5218
13291  5219
13292  521A
13293  521B
13294  521C
13295  521D
13296  521E
13297  521F
13298  5220
13299  5221
13300  5222
13301  5223
13302  5224
13303  5225
13304  5226
13305  5227
13306  5228
13307  5229
13308  522A
13309  522B
13310  522C
13311  522D
13312  522E
13313  522F
13314  5230
13315  5231
13316  5232
13317  5233
13318  5234
13319  5235
13320  5236
13321  5237
13322  5238
13323  5239
13324  523A
13325  523B
13326  523C
13327  523D
13328  523E
13329  523F
13330  5240
13331  5241
13332  5242
13333  5243
13334  5244
13335  5245
13336  5246
13337  5247
13338  5248
13339  5249
13340  524A
13341  524B
13342  524C
13343  524D
13344  524E
13345  524F
13346  5250
13347  5251
13348  5252
13349  5253
13350  5254
13351  5255
13352  5256
13353  5257
13354  5258
13355  5259
13356  525A
13357  525B
13358  525C
13359  525D
13360  525E
13361  525F
13362  5260
13363  5261
13364  5262
13365  5263
13366  5264
13367  5265
13368  5266
13369  5267
13370  5268
13371  5269
13372  526A
13373  526B
13374  526C
13375  526D
13376  526E
13377  526F
13378  5270
13379  5271
13380  5272
13381  5273
13382  5274
13383  5275
13384  5276
13385  5277
13386  5278
13387  5279
13388  527A
13389  527B
13390  527C
13391  527D
13392  527E
13393  527F
13394  5280
13395  5281
13396  5282
13397  5283
13398  5284
13399  5285
13400  5286
13401  5287
13402  5288
13403  5289
13404  528A
13405  528B
13406  528C
13407  528D
13408  528E
13409  528F
13410  5290
13411  5291
13412  5292
13413  5293
13414  5294
13415  5295
13416  5296
13417  5297
13418  5298
13419  5299
13420  529A
13421  529B
13422  529C
13423  529D
13424  529E
13425  529F
13426  52A0
13427  52A1
13428  52A2
13429  52A3
13430  52A4
13431  52A5
13432  52A6
13433  52A7
13434  52A8
13435  52A9
13436  52AA
13437  52AB
13438  52AC
13439  52AD
13440  52AE
13441  52AF
13442  52B0
13443  52B1
13444  52B2
13445  52B3
13446  52B4
13447  52B5
13448  52B6
13449  52B7
13450  52B8
13451  52B9
13452  52BA
13453  52BB
13454  52BC
13455  52BD
13456  52BE
13457  52BF
13458  52C0
13459  52C1
13460  52C2
13461  52C3
13462  52C4
13463  52C5
13464  52C6
13465  52C7
13466  52C8
13467  52C9
13468  52CA
13469  52CB
13470  52CC
13471  52CD
13472  52CE
13473  52CF
13474  52D0
13475  52D1
13476  52D2
13477  52D3
13478  52D4
13479  52D5
13480  52D6
13481  52D7
13482  52D8
13483  52D9
13484  52DA
13485  52DB
13486  52DC
13487  52DD
13488  52DE
13489  52DF
13490  52E0
13491  52E1
13492  52E2
13493  52E3
13494  52E4
13495  52E5
13496  52E6
13497  52E7
13498  52E8
13499  52E9
13500  52EA
13501  52EB
13502  52EC
13503  52ED
13504  52EE
13505  52EF
13506  52F0
13507  52F1
13508  52F2
13509  52F3
13510  52F4
13511  52F5
13512  52F6
13513  52F7
13514  52F8
13515  52F9
13516  52FA
13517  52FB
13518  52FC
13519  52FD
13520  52FE
13521  52FF
13522  5300
13523  5301
13524  5302
13525  5303
13526  5304
13527  5305
13528  5306
13529  5307
13530  5308
13531  5309
13532  530A
13533  530B
13534  530C
13535  530D
13536  530E
13537  530F
13538  5310
13539  5311
13540  5312
13541  5313
13542  5314
13543  5315
13544  5316
13545  5317
13546  5318
13547  5319
13548  531A
13549  531B
13550  531C
13551  531D
13552  531E
13553  531F
13554  5320
13555  5321
13556  5322
13557  5323
13558  5324
13559  5325
13560  5326
13561  5327
13562  5328
13563  5329
13564  532A
13565  532B
13566  532C
13567  532D
13568  532E
13569  532F
13570  5330
13571  5331
13572  5332
13573  5333
13574  5334
13575  5335
13576  5336
13577  5337
13578  5338
13579  5339
13580  533A
13581  533B
13582  533C
13583  533D
13584  533E
13585  533F
13586  5340
13587  5341
13588  5342
13589  5343
13590  5344
13591  5345
13592  5346
13593  5347
13594  5348
13595  5349
13596  534A
13597  534B
13598  534C
13599  534D
13600  534E
13601  534F
13602  5350
13603  5351
13604  5352
13605  5353
13606  5354
13607  5355
13608  5356
13609  5357
13610  5358
13611  5359
13612  535A
13613  535B
13614  535C
13615  535D
13616  535E
13617  535F
13618  5360
13619  5361
13620  5362
13621  5363
13622  5364
13623  5365
13624  5366
13625  5367
13626  5368
13627  5369
13628  536A
13629  536B
13630  536C
13631  536D
13632  536E
13633  536F
13634  5370
13635  5371
13636  5372
13637  5373
13638  5374
13639  5375
13640  5376
13641  5377
13642  5378
13643  5379
13644  537A
13645  537B
13646  537C
13647  537D
13648  537E
13649  537F
13650  5380
13651  5381
13652  5382
13653  5383
13654  5384
13655  5385
13656  5386
13657  5387
13658  5388
13659  5389
13660  538A
13661  538B
13662  538C
13663  538D
13664  538E
13665  538F
13666  5390
13667  5391
13668  5392
13669  5393
13670  5394
13671  5395
13672  5396
13673  5397
13674  5398
13675  5399
13676  539A
13677  539B
13678  539C
13679  539D
13680  539E
13681  539F
13682  53A0
13683  53A1
13684  53A2
13685  53A3
13686  53A4
13687  53A5
13688  53A6
13689  53A7
13690  53A8
13691  53A9
13692  53AA
13693  53AB
13694  53AC
13695  53AD
13696  53AE
13697  53AF
13698  53B0
13699  53B1
13700  53B2
13701  53B3
13702  53B4
13703  53B5
13704  53B6
13705  53B7
13706  53B8
13707  53B9
13708  53BA
13709  53BB
13710  53BC
13711  53BD
13712  53BE
13713  53BF
13714  53C0
13715  53C1
13716  53C2
13717  53C3
13718  53C4
13719  53C5
13720  53C6
13721  53C7
13722  53C8
13723  53C9
13724  53CA
13725  53CB
13726  53CC
13727  53CD
13728  53CE
13729  53CF
13730  53D0
13731  53D1
13732  53D2
13733  53D3
13734  53D4
13735  53D5
13736  53D6
13737  53D7
13738  53D8
13739  53D9
13740  53DA
13741  53DB
13742  53DC
13743  53DD
13744  53DE
13745  53DF
13746  53E0
13747  53E1
13748  53E2
13749  53E3
13750  53E4
13751  53E5
13752  53E6
13753  53E7
13754  53E8
13755  53E9
13756  53EA
13757  53EB
13758  53EC
13759  53ED
13760  53EE
13761  53EF
13762  53F0
13763  53F1
13764  53F2
13765  53F3
13766  53F4
13767  53F5
13768  53F6
13769  53F7
13770  53F8
13771  53F9
13772  53FA
13773  53FB
13774  53FC
13775  53FD
13776  53FE
13777  53FF
13778  5400
13779  5401
13780  5402
13781  5403
13782  5404
13783  5405
13784  5406
13785  5407
13786  5408
13787  5409
13788  540A
13789  540B
13790  540C
13791  540D
13792  540E
13793  540F
13794  5410
13795  5411
13796  5412
13797  5413
13798  5414
13799  5415
13800  5416
13801  5417
13802  5418
13803  5419
13804  541A
13805  541B
13806  541C
13807  541D
13808  541E
13809  541F
13810  5420
13811  5421
13812  5422
13813  5423
13814  5424
13815  5425
13816  5426
13817  5427
13818  5428
13819  5429
13820  542A
13821  542B
13822  542C
13823  542D
13824  542E
13825  542F
13826  5430
13827  5431
13828  5432
13829  5433
13830  5434
13831  5435
13832  5436
13833  5437
13834  5438
13835  5439
13836  543A
13837  543B
13838  543C
13839  543D
13840  543E
13841  543F
13842  5440
13843  5441
13844  5442
13845  5443
13846  5444
13847  5445
13848  5446
13849  5447
13850  5448
13851  5449
13852  544A
13853  544B
13854  544C
13855  544D
13856  544E
13857  544F
13858  5450
13859  5451
13860  5452
13861  5453
13862  5454
13863  5455
13864  5456
13865  5457
13866  5458
13867  5459
13868  545A
13869  545B
13870  545C
13871  545D
13872  545E
13873  545F
13874  5460
13875  5461
13876  5462
13877  5463
13878  5464
13879  5465
13880  5466
13881  5467
13882  5468
13883  5469
13884  546A
13885  546B
13886  546C
13887  546D
13888  546E
13889  546F
13890  5470
13891  5471
13892  5472
13893  5473
13894  5474
13895  5475
13896  5476
13897  5477
13898  5478
13899  5479
13900  547A
13901  547B
13902  547C
13903  547D
13904  547E
13905  547F
13906  5480
13907  5481
13908  5482
13909  5483
13910  5484
13911  5485
13912  5486
13913  5487
13914  5488
13915  5489
13916  548A
13917  548B
13918  548C
13919  548D
13920  548E
13921  548F
13922  5490
13923  5491
13924  5492
13925  5493
13926  5494
13927  5495
13928  5496
13929  5497
13930  5498
13931  5499
13932  549A
13933  549B
13934  549C
13935  549D
13936  549E
13937  549F
13938  54A0
13939  54A1
13940  54A2
13941  54A3
13942  54A4
13943  54A5
13944  54A6
13945  54A7
13946  54A8
13947  54A9
13948  54AA
13949  54AB
13950  54AC
13951  54AD
13952  54AE
13953  54AF
13954  54B0
13955  54B1
13956  54B2
13957  54B3
13958  54B4
13959  54B5
13960  54B6
13961  54B7
13962  54B8
13963  54B9
13964  54BA
13965  54BB
13966  54BC
13967  54BD
13968  54BE
13969  54BF
13970  54C0
13971  54C1
13972  54C2
13973  54C3
13974  54C4
13975  54C5
13976  54C6
13977  54C7
13978  54C8
13979  54C9
13980  54CA
13981  54CB
13982  54CC
13983  54CD
13984  54CE
13985  54CF
13986  54D0
13987  54D1
13988  54D2
13989  54D3
13990  54D4
13991  54D5
13992  54D6
13993  54D7
13994  54D8
13995  54D9
13996  54DA
13997  54DB
13998  54DC
13999  54DD
14000  54DE
14001  54DF
14002  54E0
14003  54E1
14004  54E2
14005  54E3
14006  54E4
14007  54E5
14008  54E6
14009  54E7
14010  54E8
14011  54E9
14012  54EA
14013  54EB
14014  54EC
14015  54ED
14016  54EE
14017  54EF
14018  54F0
14019  54F1
14020  54F2
14021  54F3
14022  54F4
14023  54F5
14024  54F6
14025  54F7
14026  54F8
14027  54F9
14028  54FA
14029  54FB
14030  54FC
14031  54FD
14032  54FE
14033  54FF
14034  5500
14035  5501
14036  5502
14037  5503
14038  5504
14039  5505
14040  5506
14041  5507
14042  5508
14043  5509
14044  550A
14045  550B
14046  550C
14047  550D
14048  550E
14049  550F
14050  5510
14051  5511
14052  5512
14053  5513
14054  5514
14055  5515
14056  5516
14057  5517
14058  5518
14059  5519
14060  551A
14061  551B
14062  551C
14063  551D
14064  551E
14065  551F
14066  5520
14067  5521
14068  5522
14069  5523
14070  5524
14071  5525
14072  5526
14073  5527
14074  5528
14075  5529
14076  552A
14077  552B
14078  552C
14079  552D
14080  552E
14081  552F
14082  5530
14083  5531
14084  5532
14085  5533
14086  5534
14087  5535
14088  5536
14089  5537
14090  5538
14091  5539
14092  553A
14093  553B
14094  553C
14095  553D
14096  553E
14097  553F
14098  5540
14099  5541
14100  5542
14101  5543
14102  5544
14103  5545
14104  5546
14105  5547
14106  5548
14107  5549
14108  554A
14109  554B
14110  554C
14111  554D
14112  554E
14113  554F
14114  5550
14115  5551
14116  5552
14117  5553
14118  5554
14119  5555
14120  5556
14121  5557
14122  5558
14123  5559
14124  555A
14125  555B
14126  555C
14127  555D
14128  555E
14129  555F
14130  5560
14131  5561
14132  5562
14133  5563
14134  5564
14135  5565
14136  5566
14137  5567
14138  5568
14139  5569
14140  556A
14141  556B
14142  556C
14143  556D
14144  556E
14145  556F
14146  5570
14147  5571
14148  5572
14149  5573
14150  5574
14151  5575
14152  5576
14153  5577
14154  5578
14155  5579
14156  557A
14157  557B
14158  557C
14159  557D
14160  557E
14161  557F
14162  5580
14163  5581
14164  5582
14165  5583
14166  5584
14167  5585
14168  5586
14169  5587
14170  5588
14171  5589
14172  558A
14173  558B
14174  558C
14175  558D
14176  558E
14177  558F
14178  5590
14179  5591
14180  5592
14181  5593
14182  5594
14183  5595
14184  5596
14185  5597
14186  5598
14187  5599
14188  559A
14189  559B
14190  559C
14191  559D
14192  559E
14193  559F
14194  55A0
14195  55A1
14196  55A2
14197  55A3
14198  55A4
14199  55A5
14200  55A6
14201  55A7
14202  55A8
14203  55A9
14204  55AA
14205  55AB
14206  55AC
14207  55AD
14208  55AE
14209  55AF
14210  55B0
14211  55B1
14212  55B2
14213  55B3
14214  55B4
14215  55B5
14216  55B6
14217  55B7
14218  55B8
14219  55B9
14220  55BA
14221  55BB
14222  55BC
14223  55BD
14224  55BE
14225  55BF
14226  55C0
14227  55C1
14228  55C2
14229  55C3
14230  55C4
14231  55C5
14232  55C6
14233  55C7
14234  55C8
14235  55C9
14236  55CA
14237  55CB
14238  55CC
14239  55CD
14240  55CE
14241  55CF
14242  55D0
14243  55D1
14244  55D2
14245  55D3
14246  55D4
14247  55D5
14248  55D6
14249  55D7
14250  55D8
14251  55D9
14252  55DA
14253  55DB
14254  55DC
14255  55DD
14256  55DE
14257  55DF
14258  55E0
14259  55E1
14260  55E2
14261  55E3
14262  55E4
14263  55E5
14264  55E6
14265  55E7
14266  55E8
14267  55E9
14268  55EA
14269  55EB
14270  55EC
14271  55ED
14272  55EE
14273  55EF
14274  55F0
14275  55F1
14276  55F2
14277  55F3
14278  55F4
14279  55F5
14280  55F6
14281  55F7
14282  55F8
14283  55F9
14284  55FA
14285  55FB
14286  55FC
14287  55FD
14288  55FE
14289  55FF
14290  5600
14291  5601
14292  5602
14293  5603
14294  5604
14295  5605
14296  5606
14297  5607
14298  5608
14299  5609
14300  560A
14301  560B
14302  560C
14303  560D
14304  560E
14305  560F
14306  5610
14307  5611
14308  5612
14309  5613
14310  5614
14311  5615
14312  5616
14313  5617
14314  5618
14315  5619
14316  561A
14317  561B
14318  561C
14319  561D
14320  561E
14321  561F
14322  5620
14323  5621
14324  5622
14325  5623
14326  5624
14327  5625
14328  5626
14329  5627
14330  5628
14331  5629
14332  562A
14333  562B
14334  562C
14335  562D
14336  562E
14337  562F
14338  5630
14339  5631
14340  5632
14341  5633
14342  5634
14343  5635
14344  5636
14345  5637
14346  5638
14347  5639
14348  563A
14349  563B
14350  563C
14351  563D
14352  563E
14353  563F
14354  5640
14355  5641
14356  5642
14357  5643
14358  5644
14359  5645
14360  5646
14361  5647
14362  5648
14363  5649
14364  564A
14365  564B
14366  564C
14367  564D
14368  564E
14369  564F
14370  5650
14371  5651
14372  5652
14373  5653
14374  5654
14375  5655
14376  5656
14377  5657
14378  5658
14379  5659
14380  565A
14381  565B
14382  565C
14383  565D
14384  565E
14385  565F
14386  5660
14387  5661
14388  5662
14389  5663
14390  5664
14391  5665
14392  5666
14393  5667
14394  5668
14395  5669
14396  566A
14397  566B
14398  566C
14399  566D
14400  566E
14401  566F
14402  5670
14403  5671
14404  5672
14405  5673
14406  5674
14407  5675
14408  5676
14409  5677
14410  5678
14411  5679
14412  567A
14413  567B
14414  567C
14415  567D
14416  567E
14417  567F
14418  5680
14419  5681
14420  5682
14421  5683
14422  5684
14423  5685
14424  5686
14425  5687
14426  5688
14427  5689
14428  568A
14429  568B
14430  568C
14431  568D
14432  568E
14433  568F
14434  5690
14435  5691
14436  5692
14437  5693
14438  5694
14439  5695
14440  5696
14441  5697
14442  5698
14443  5699
14444  569A
14445  569B
14446  569C
14447  569D
14448  569E
14449  569F
14450  56A0
14451  56A1
14452  56A2
14453  56A3
14454  56A4
14455  56A5
14456  56A6
14457  56A7
14458  56A8
14459  56A9
14460  56AA
14461  56AB
14462  56AC
14463  56AD
14464  56AE
14465  56AF
14466  56B0
14467  56B1
14468  56B2
14469  56B3
14470  56B4
14471  56B5
14472  56B6
14473  56B7
14474  56B8
14475  56B9
14476  56BA
14477  56BB
14478  56BC
14479  56BD
14480  56BE
14481  56BF
14482  56C0
14483  56C1
14484  56C2
14485  56C3
14486  56C4
14487  56C5
14488  56C6
14489  56C7
14490  56C8
14491  56C9
14492  56CA
14493  56CB
14494  56CC
14495  56CD
14496  56CE
14497  56CF
14498  56D0
14499  56D1
14500  56D2
14501  56D3
14502  56D4
14503  56D5
14504  56D6
14505  56D7
14506  56D8
14507  56D9
14508  56DA
14509  56DB
14510  56DC
14511  56DD
14512  56DE
14513  56DF
14514  56E0
14515  56E1
14516  56E2
14517  56E3
14518  56E4
14519  56E5
14520  56E6
14521  56E7
14522  56E8
14523  56E9
14524  56EA
14525  56EB
14526  56EC
14527  56ED
14528  56EE
14529  56EF
14530  56F0
14531  56F1
14532  56F2
14533  56F3
14534  56F4
14535  56F5
14536  56F6
14537  56F7
14538  56F8
14539  56F9
14540  56FA
14541  56FB
14542  56FC
14543  56FD
14544  56FE
14545  56FF
14546  5700
14547  5701
14548  5702
14549  5703
14550  5704
14551  5705
14552  5706
14553  5707
14554  5708
14555  5709
14556  570A
14557  570B
14558  570C
14559  570D
14560  570E
14561  570F
14562  5710
14563  5711
14564  5712
14565  5713
14566  5714
14567  5715
14568  5716
14569  5717
14570  5718
14571  5719
14572  571A
14573  571B
14574  571C
14575  571D
14576  571E
14577  571F
14578  5720
14579  5721
14580  5722
14581  5723
14582  5724
14583  5725
14584  5726
14585  5727
14586  5728
14587  5729
14588  572A
14589  572B
14590  572C
14591  572D
14592  572E
14593  572F
14594  5730
14595  5731
14596  5732
14597  5733
14598  5734
14599  5735
14600  5736
14601  5737
14602  5738
14603  5739
14604  573A
14605  573B
14606  573C
14607  573D
14608  573E
14609  573F
14610  5740
14611  5741
14612  5742
14613  5743
14614  5744
14615  5745
14616  5746
14617  5747
14618  5748
14619  5749
14620  574A
14621  574B
14622  574C
14623  574D
14624  574E
14625  574F
14626  5750
14627  5751
14628  5752
14629  5753
14630  5754
14631  5755
14632  5756
14633  5757
14634  5758
14635  5759
14636  575A
14637  575B
14638  575C
14639  575D
14640  575E
14641  575F
14642  5760
14643  5761
14644  5762
14645  5763
14646  5764
14647  5765
14648  5766
14649  5767
14650  5768
14651  5769
14652  576A
14653  576B
14654  576C
14655  576D
14656  576E
14657  576F
14658  5770
14659  5771
14660  5772
14661  5773
14662  5774
14663  5775
14664  5776
14665  5777
14666  5778
14667  5779
14668  577A
14669  577B
14670  577C
14671  577D
14672  577E
14673  577F
14674  5780
14675  5781
14676  5782
14677  5783
14678  5784
14679  5785
14680  5786
14681  5787
14682  5788
14683  5789
14684  578A
14685  578B
14686  578C
14687  578D
14688  578E
14689  578F
14690  5790
14691  5791
14692  5792
14693  5793
14694  5794
14695  5795
14696  5796
14697  5797
14698  5798
14699  5799
14700  579A
14701  579B
14702  579C
14703  579D
14704  579E
14705  579F
14706  57A0
14707  57A1
14708  57A2
14709  57A3
14710  57A4
14711  57A5
14712  57A6
14713  57A7
14714  57A8
14715  57A9
14716  57AA
14717  57AB
14718  57AC
14719  57AD
14720  57AE
14721  57AF
14722  57B0
14723  57B1
14724  57B2
14725  57B3
14726  57B4
14727  57B5
14728  57B6
14729  57B7
14730  57B8
14731  57B9
14732  57BA
14733  57BB
14734  57BC
14735  57BD
14736  57BE
14737  57BF
14738  57C0
14739  57C1
14740  57C2
14741  57C3
14742  57C4
14743  57C5
14744  57C6
14745  57C7
14746  57C8
14747  57C9
14748  57CA
14749  57CB
14750  57CC
14751  57CD
14752  57CE
14753  57CF
14754  57D0
14755  57D1
14756  57D2
14757  57D3
14758  57D4
14759  57D5
14760  57D6
14761  57D7
14762  57D8
14763  57D9
14764  57DA
14765  57DB
14766  57DC
14767  57DD
14768  57DE
14769  57DF
14770  57E0
14771  57E1
14772  57E2
14773  57E3
14774  57E4
14775  57E5
14776  57E6
14777  57E7
14778  57E8
14779  57E9
14780  57EA
14781  57EB
14782  57EC
14783  57ED
14784  57EE
14785  57EF
14786  57F0
14787  57F1
14788  57F2
14789  57F3
14790  57F4
14791  57F5
14792  57F6
14793  57F7
14794  57F8
14795  57F9
14796  57FA
14797  57FB
14798  57FC
14799  57FD
14800  57FE
14801  57FF
14802  5800
14803  5801
14804  5802
14805  5803
14806  5804
14807  5805
14808  5806
14809  5807
14810  5808
14811  5809
14812  580A
14813  580B
14814  580C
14815  580D
14816  580E
14817  580F
14818  5810
14819  5811
14820  5812
14821  5813
14822  5814
14823  5815
14824  5816
14825  5817
14826  5818
14827  5819
14828  581A
14829  581B
14830  581C
14831  581D
14832  581E
14833  581F
14834  5820
14835  5821
14836  5822
14837  5823
14838  5824
14839  5825
14840  5826
14841  5827
14842  5828
14843  5829
14844  582A
14845  582B
14846  582C
14847  582D
14848  582E
14849  582F
14850  5830
14851  5831
14852  5832
14853  5833
14854  5834
14855  5835
14856  5836
14857  5837
14858  5838
14859  5839
14860  583A
14861  583B
14862  583C
14863  583D
14864  583E
14865  583F
14866  5840
14867  5841
14868  5842
14869  5843
14870  5844
14871  5845
14872  5846
14873  5847
14874  5848
14875  5849
14876  584A
14877  584B
14878  584C
14879  584D
14880  584E
14881  584F
14882  5850
14883  5851
14884  5852
14885  5853
14886  5854
14887  5855
14888  5856
14889  5857
14890  5858
14891  5859
14892  585A
14893  585B
14894  585C
14895  585D
14896  585E
14897  585F
14898  5860
14899  5861
14900  5862
14901  5863
14902  5864
14903  5865
14904  5866
14905  5867
14906  5868
14907  5869
14908  586A
14909  586B
14910  586C
14911  586D
14912  586E
14913  586F
14914  5870
14915  5871
14916  5872
14917  5873
14918  5874
14919  5875
14920  5876
14921  5877
14922  5878
14923  5879
14924  587A
14925  587B
14926  587C
14927  587D
14928  587E
14929  587F
14930  5880
14931  5881
14932  5882
14933  5883
14934  5884
14935  5885
14936  5886
14937  5887
14938  5888
14939  5889
14940  588A
14941  588B
14942  588C
14943  588D
14944  588E
14945  588F
14946  5890
14947  5891
14948  5892
14949  5893
14950  5894
14951  5895
14952  5896
14953  5897
14954  5898
14955  5899
14956  589A
14957  589B
14958  589C
14959  589D
14960  589E
14961  589F
14962  58A0
14963  58A1
14964  58A2
14965  58A3
14966  58A4
14967  58A5
14968  58A6
14969  58A7
14970  58A8
14971  58A9
14972  58AA
14973  58AB
14974  58AC
14975  58AD
14976  58AE
14977  58AF
14978  58B0
14979  58B1
14980  58B2
14981  58B3
14982  58B4
14983  58B5
14984  58B6
14985  58B7
14986  58B8
14987  58B9
14988  58BA
14989  58BB
14990  58BC
14991  58BD
14992  58BE
14993  58BF
14994  58C0
14995  58C1
14996  58C2
14997  58C3
14998  58C4
14999  58C5
15000  58C6
15001  58C7
15002  58C8
15003  58C9
15004  58CA
15005  58CB
15006  58CC
15007  58CD
15008  58CE
15009  58CF
15010  58D0
15011  58D1
15012  58D2
15013  58D3
15014  58D4
15015  58D5
15016  58D6
15017  58D7
15018  58D8
15019  58D9
15020  58DA
15021  58DB
15022  58DC
15023  58DD
15024  58DE
15025  58DF
15026  58E0
15027  58E1
15028  58E2
15029  58E3
15030  58E4
15031  58E5
15032  58E6
15033  58E7
15034  58E8
15035  58E9
15036  58EA
15037  58EB
15038  58EC
15039  58ED
15040  58EE
15041  58EF
15042  58F0
15043  58F1
15044  58F2
15045  58F3
15046  58F4
15047  58F5
15048  58F6
15049  58F7
15050  58F8
15051  58F9
15052  58FA
15053  58FB
15054  58FC
15055  58FD
15056  58FE
15057  58FF
15058  5900
15059  5901
15060  5902
15061  5903
15062  5904
15063  5905
15064  5906
15065  5907
15066  5908
15067  5909
15068  590A
15069  590B
15070  590C
15071  590D
15072  590E
15073  590F
15074  5910
15075  5911
15076  5912
15077  5913
15078  5914
15079  5915
15080  5916
15081  5917
15082  5918
15083  5919
15084  591A
15085  591B
15086  591C
15087  591D
15088  591E
15089  591F
15090  5920
15091  5921
15092  5922
15093  5923
15094  5924
15095  5925
15096  5926
15097  5927
15098  5928
15099  5929
15100  592A
15101  592B
15102  592C
15103  592D
15104  592E
15105  592F
15106  5930
15107  5931
15108  5932
15109  5933
15110  5934
15111  5935
15112  5936
15113  5937
15114  5938
15115  5939
15116  593A
15117  593B
15118  593C
15119  593D
15120  593E
15121  593F
15122  5940
15123  5941
15124  5942
15125  5943
15126  5944
15127  5945
15128  5946
15129  5947
15130  5948
15131  5949
15132  594A
15133  594B
15134  594C
15135  594D
15136  594E
15137  594F
15138  5950
15139  5951
15140  5952
15141  5953
15142  5954
15143  5955
15144  5956
15145  5957
15146  5958
15147  5959
15148  595A
15149  595B
15150  595C
15151  595D
15152  595E
15153  595F
15154  5960
15155  5961
15156  5962
15157  5963
15158  5964
15159  5965
15160  5966
15161  5967
15162  5968
15163  5969
15164  596A
15165  596B
15166  596C
15167  596D
15168  596E
15169  596F
15170  5970
15171  5971
15172  5972
15173  5973
15174  5974
15175  5975
15176  5976
15177  5977
15178  5978
15179  5979
15180  597A
15181  597B
15182  597C
15183  597D
15184  597E
15185  597F
15186  5980
15187  5981
15188  5982
15189  5983
15190  5984
15191  5985
15192  5986
15193  5987
15194  5988
15195  5989
15196  598A
15197  598B
15198  598C
15199  598D
15200  598E
15201  598F
15202  5990
15203  5991
15204  5992
15205  5993
15206  5994
15207  5995
15208  5996
15209  5997
15210  5998
15211  5999
15212  599A
15213  599B
15214  599C
15215  599D
15216  599E
15217  599F
15218  59A0
15219  59A1
15220  59A2
15221  59A3
15222  59A4
15223  59A5
15224  59A6
15225  59A7
15226  59A8
15227  59A9
15228  59AA
15229  59AB
15230  59AC
15231  59AD
15232  59AE
15233  59AF
15234  59B0
15235  59B1
15236  59B2
15237  59B3
15238  59B4
15239  59B5
15240  59B6
15241  59B7
15242  59B8
15243  59B9
15244  59BA
15245  59BB
15246  59BC
15247  59BD
15248  59BE
15249  59BF
15250  59C0
15251  59C1
15252  59C2
15253  59C3
15254  59C4
15255  59C5
15256  59C6
15257  59C7
15258  59C8
15259  59C9
15260  59CA
15261  59CB
15262  59CC
15263  59CD
15264  59CE
15265  59CF
15266  59D0
15267  59D1
15268  59D2
15269  59D3
15270  59D4
15271  59D5
15272  59D6
15273  59D7
15274  59D8
15275  59D9
15276  59DA
15277  59DB
15278  59DC
15279  59DD
15280  59DE
15281  59DF
15282  59E0
15283  59E1
15284  59E2
15285  59E3
15286  59E4
15287  59E5
15288  59E6
15289  59E7
15290  59E8
15291  59E9
15292  59EA
15293  59EB
15294  59EC
15295  59ED
15296  59EE
15297  59EF
15298  59F0
15299  59F1
15300  59F2
15301  59F3
15302  59F4
15303  59F5
15304  59F6
15305  59F7
15306  59F8
15307  59F9
15308  59FA
15309  59FB
15310  59FC
15311  59FD
15312  59FE
15313  59FF
15314  5A00
15315  5A01
15316  5A02
15317  5A03
15318  5A04
15319  5A05
15320  5A06
15321  5A07
15322  5A08
15323  5A09
15324  5A0A
15325  5A0B
15326  5A0C
15327  5A0D
15328  5A0E
15329  5A0F
15330  5A10
15331  5A11
15332  5A12
15333  5A13
15334  5A14
15335  5A15
15336  5A16
15337  5A17
15338  5A18
15339  5A19
15340  5A1A
15341  5A1B
15342  5A1C
15343  5A1D
15344  5A1E
15345  5A1F
15346  5A20
15347  5A21
15348  5A22
15349  5A23
15350  5A24
15351  5A25
15352  5A26
15353  5A27
15354  5A28
15355  5A29
15356  5A2A
15357  5A2B
15358  5A2C
15359  5A2D
15360  5A2E
15361  5A2F
15362  5A30
15363  5A31
15364  5A32
15365  5A33
15366  5A34
15367  5A35
15368  5A36
15369  5A37
15370  5A38
15371  5A39
15372  5A3A
15373  5A3B
15374  5A3C
15375  5A3D
15376  5A3E
15377  5A3F
15378  5A40
15379  5A41
15380  5A42
15381  5A43
15382  5A44
15383  5A45
15384  5A46
15385  5A47
15386  5A48
15387  5A49
15388  5A4A
15389  5A4B
15390  5A4C
15391  5A4D
15392  5A4E
15393  5A4F
15394  5A50
15395  5A51
15396  5A52
15397  5A53
15398  5A54
15399  5A55
15400  5A56
15401  5A57
15402  5A58
15403  5A59
15404  5A5A
15405  5A5B
15406  5A5C
15407  5A5D
15408  5A5E
15409  5A5F
15410  5A60
15411  5A61
15412  5A62
15413  5A63
15414  5A64
15415  5A65
15416  5A66
15417  5A67
15418  5A68
15419  5A69
15420  5A6A
15421  5A6B
15422  5A6C
15423  5A6D
15424  5A6E
15425  5A6F
15426  5A70
15427  5A71
15428  5A72
15429  5A73
15430  5A74
15431  5A75
15432  5A76
15433  5A77
15434  5A78
15435  5A79
15436  5A7A
15437  5A7B
15438  5A7C
15439  5A7D
15440  5A7E
15441  5A7F
15442  5A80
15443  5A81
15444  5A82
15445  5A83
15446  5A84
15447  5A85
15448  5A86
15449  5A87
15450  5A88
15451  5A89
15452  5A8A
15453  5A8B
15454  5A8C
15455  5A8D
15456  5A8E
15457  5A8F
15458  5A90
15459  5A91
15460  5A92
15461  5A93
15462  5A94
15463  5A95
15464  5A96
15465  5A97
15466  5A98
15467  5A99
15468  5A9A
15469  5A9B
15470  5A9C
15471  5A9D
15472  5A9E
15473  5A9F
15474  5AA0
15475  5AA1
15476  5AA2
15477  5AA3
15478  5AA4
15479  5AA5
15480  5AA6
15481  5AA7
15482  5AA8
15483  5AA9
15484  5AAA
15485  5AAB
15486  5AAC
15487  5AAD
15488  5AAE
15489  5AAF
15490  5AB0
15491  5AB1
15492  5AB2
15493  5AB3
15494  5AB4
15495  5AB5
15496  5AB6
15497  5AB7
15498  5AB8
15499  5AB9
15500  5ABA
15501  5ABB
15502  5ABC
15503  5ABD
15504  5ABE
15505  5ABF
15506  5AC0
15507  5AC1
15508  5AC2
15509  5AC3
15510  5AC4
15511  5AC5
15512  5AC6
15513  5AC7
15514  5AC8
15515  5AC9
15516  5ACA
15517  5ACB
15518  5ACC
15519  5ACD
15520  5ACE
15521  5ACF
15522  5AD0
15523  5AD1
15524  5AD2
15525  5AD3
15526  5AD4
15527  5AD5
15528  5AD6
15529  5AD7
15530  5AD8
15531  5AD9
15532  5ADA
15533  5ADB
15534  5ADC
15535  5ADD
15536  5ADE
15537  5ADF
15538  5AE0
15539  5AE1
15540  5AE2
15541  5AE3
15542  5AE4
15543  5AE5
15544  5AE6
15545  5AE7
15546  5AE8
15547  5AE9
15548  5AEA
15549  5AEB
15550  5AEC
15551  5AED
15552  5AEE
15553  5AEF
15554  5AF0
15555  5AF1
15556  5AF2
15557  5AF3
15558  5AF4
15559  5AF5
15560  5AF6
15561  5AF7
15562  5AF8
15563  5AF9
15564  5AFA
15565  5AFB
15566  5AFC
15567  5AFD
15568  5AFE
15569  5AFF
15570  5B00
15571  5B01
15572  5B02
15573  5B03
15574  5B04
15575  5B05
15576  5B06
15577  5B07
15578  5B08
15579  5B09
15580  5B0A
15581  5B0B
15582  5B0C
15583  5B0D
15584  5B0E
15585  5B0F
15586  5B10
15587  5B11
15588  5B12
15589  5B13
15590  5B14
15591  5B15
15592  5B16
15593  5B17
15594  5B18
15595  5B19
15596  5B1A
15597  5B1B
15598  5B1C
15599  5B1D
15600  5B1E
15601  5B1F
15602  5B20
15603  5B21
15604  5B22
15605  5B23
15606  5B24
15607  5B25
15608  5B26
15609  5B27
15610  5B28
15611  5B29
15612  5B2A
15613  5B2B
15614  5B2C
15615  5B2D
15616  5B2E
15617  5B2F
15618  5B30
15619  5B31
15620  5B32
15621  5B33
15622  5B34
15623  5B35
15624  5B36
15625  5B37
15626  5B38
15627  5B39
15628  5B3A
15629  5B3B
15630  5B3C
15631  5B3D
15632  5B3E
15633  5B3F
15634  5B40
15635  5B41
15636  5B42
15637  5B43
15638  5B44
15639  5B45
15640  5B46
15641  5B47
15642  5B48
15643  5B49
15644  5B4A
15645  5B4B
15646  5B4C
15647  5B4D
15648  5B4E
15649  5B4F
15650  5B50
15651  5B51
15652  5B52
15653  5B53
15654  5B54
15655  5B55
15656  5B56
15657  5B57
15658  5B58
15659  5B59
15660  5B5A
15661  5B5B
15662  5B5C
15663  5B5D
15664  5B5E
15665  5B5F
15666  5B60
15667  5B61
15668  5B62
15669  5B63
15670  5B64
15671  5B65
15672  5B66
15673  5B67
15674  5B68
15675  5B69
15676  5B6A
15677  5B6B
15678  5B6C
15679  5B6D
15680  5B6E
15681  5B6F
15682  5B70
15683  5B71
15684  5B72
15685  5B73
15686  5B74
15687  5B75
15688  5B76
15689  5B77
15690  5B78
15691  5B79
15692  5B7A
15693  5B7B
15694  5B7C
15695  5B7D
15696  5B7E
15697  5B7F
15698  5B80
15699  5B81
15700  5B82
15701  5B83
15702  5B84
15703  5B85
15704  5B86
15705  5B87
15706  5B88
15707  5B89
15708  5B8A
15709  5B8B
15710  5B8C
15711  5B8D
15712  5B8E
15713  5B8F
15714  5B90
15715  5B91
15716  5B92
15717  5B93
15718  5B94
15719  5B95
15720  5B96
15721  5B97
15722  5B98
15723  5B99
15724  5B9A
15725  5B9B
15726  5B9C
15727  5B9D
15728  5B9E
15729  5B9F
15730  5BA0
15731  5BA1
15732  5BA2
15733  5BA3
15734  5BA4
15735  5BA5
15736  5BA6
15737  5BA7
15738  5BA8
15739  5BA9
15740  5BAA
15741  5BAB
15742  5BAC
15743  5BAD
15744  5BAE
15745  5BAF
15746  5BB0
15747  5BB1
15748  5BB2
15749  5BB3
15750  5BB4
15751  5BB5
15752  5BB6
15753  5BB7
15754  5BB8
15755  5BB9
15756  5BBA
15757  5BBB
15758  5BBC
15759  5BBD
15760  5BBE
15761  5BBF
15762  5BC0
15763  5BC1
15764  5BC2
15765  5BC3
15766  5BC4
15767  5BC5
15768  5BC6
15769  5BC7
15770  5BC8
15771  5BC9
15772  5BCA
15773  5BCB
15774  5BCC
15775  5BCD
15776  5BCE
15777  5BCF
15778  5BD0
15779  5BD1
15780  5BD2
15781  5BD3
15782  5BD4
15783  5BD5
15784  5BD6
15785  5BD7
15786  5BD8
15787  5BD9
15788  5BDA
15789  5BDB
15790  5BDC
15791  5BDD
15792  5BDE
15793  5BDF
15794  5BE0
15795  5BE1
15796  5BE2
15797  5BE3
15798  5BE4
15799  5BE5
15800  5BE6
15801  5BE7
15802  5BE8
15803  5BE9
15804  5BEA
15805  5BEB
15806  5BEC
15807  5BED
15808  5BEE
15809  5BEF
15810  5BF0
15811  5BF1
15812  5BF2
15813  5BF3
15814  5BF4
15815  5BF5
15816  5BF6
15817  5BF7
15818  5BF8
15819  5BF9
15820  5BFA
15821  5BFB
15822  5BFC
15823  5BFD
15824  5BFE
15825  5BFF
15826  5C00
15827  5C01
15828  5C02
15829  5C03
15830  5C04
15831  5C05
15832  5C06
15833  5C07
15834  5C08
15835  5C09
15836  5C0A
15837  5C0B
15838  5C0C
15839  5C0D
15840  5C0E
15841  5C0F
15842  5C10
15843  5C11
15844  5C12
15845  5C13
15846  5C14
15847  5C15
15848  5C16
15849  5C17
15850  5C18
15851  5C19
15852  5C1A
15853  5C1B
15854  5C1C
15855  5C1D
15856  5C1E
15857  5C1F
15858  5C20
15859  5C21
15860  5C22
15861  5C23
15862  5C24
15863  5C25
15864  5C26
15865  5C27
15866  5C28
15867  5C29
15868  5C2A
15869  5C2B
15870  5C2C
15871  5C2D
15872  5C2E
15873  5C2F
15874  5C30
15875  5C31
15876  5C32
15877  5C33
15878  5C34
15879  5C35
15880  5C36
15881  5C37
15882  5C38
15883  5C39
15884  5C3A
15885  5C3B
15886  5C3C
15887  5C3D
15888  5C3E
15889  5C3F
15890  5C40
15891  5C41
15892  5C42
15893  5C43
15894  5C44
15895  5C45
15896  5C46
15897  5C47
15898  5C48
15899  5C49
15900  5C4A
15901  5C4B
15902  5C4C
15903  5C4D
15904  5C4E
15905  5C4F
15906  5C50
15907  5C51
15908  5C52
15909  5C53
15910  5C54
15911  5C55
15912  5C56
15913  5C57
15914  5C58
15915  5C59
15916  5C5A
15917  5C5B
15918  5C5C
15919  5C5D
15920  5C5E
15921  5C5F
15922  5C60
15923  5C61
15924  5C62
15925  5C63
15926  5C64
15927  5C65
15928  5C66
15929  5C67
15930  5C68
15931  5C69
15932  5C6A
15933  5C6B
15934  5C6C
15935  5C6D
15936  5C6E
15937  5C6F
15938  5C70
15939  5C71
15940  5C72
15941  5C73
15942  5C74
15943  5C75
15944  5C76
15945  5C77
15946  5C78
15947  5C79
15948  5C7A
15949  5C7B
15950  5C7C
15951  5C7D
15952  5C7E
15953  5C7F
15954  5C80
15955  5C81
15956  5C82
15957  5C83
15958  5C84
15959  5C85
15960  5C86
15961  5C87
15962  5C88
15963  5C89
15964  5C8A
15965  5C8B
15966  5C8C
15967  5C8D
15968  5C8E
15969  5C8F
15970  5C90
15971  5C91
15972  5C92
15973  5C93
15974  5C94
15975  5C95
15976  5C96
15977  5C97
15978  5C98
15979  5C99
15980  5C9A
15981  5C9B
15982  5C9C
15983  5C9D
15984  5C9E
15985  5C9F
15986  5CA0
15987  5CA1
15988  5CA2
15989  5CA3
15990  5CA4
15991  5CA5
15992  5CA6
15993  5CA7
15994  5CA8
15995  5CA9
15996  5CAA
15997  5CAB
15998  5CAC
15999  5CAD
16000  5CAE
16001  5CAF
16002  5CB0
16003  5CB1
16004  5CB2
16005  5CB3
16006  5CB4
16007  5CB5
16008  5CB6
16009  5CB7
16010  5CB8
16011  5CB9
16012  5CBA
16013  5CBB
16014  5CBC
16015  5CBD
16016  5CBE
16017  5CBF
16018  5CC0
16019  5CC1
16020  5CC2
16021  5CC3
16022  5CC4
16023  5CC5
16024  5CC6
16025  5CC7
16026  5CC8
16027  5CC9
16028  5CCA
16029  5CCB
16030  5CCC
16031  5CCD
16032  5CCE
16033  5CCF
16034  5CD0
16035  5CD1
16036  5CD2
16037  5CD3
16038  5CD4
16039  5CD5
16040  5CD6
16041  5CD7
16042  5CD8
16043  5CD9
16044  5CDA
16045  5CDB
16046  5CDC
16047  5CDD
16048  5CDE
16049  5CDF
16050  5CE0
16051  5CE1
16052  5CE2
16053  5CE3
16054  5CE4
16055  5CE5
16056  5CE6
16057  5CE7
16058  5CE8
16059  5CE9
16060  5CEA
16061  5CEB
16062  5CEC
16063  5CED
16064  5CEE
16065  5CEF
16066  5CF0
16067  5CF1
16068  5CF2
16069  5CF3
16070  5CF4
16071  5CF5
16072  5CF6
16073  5CF7
16074  5CF8
16075  5CF9
16076  5CFA
16077  5CFB
16078  5CFC
16079  5CFD
16080  5CFE
16081  5CFF
16082  5D00
16083  5D01
16084  5D02
16085  5D03
16086  5D04
16087  5D05
16088  5D06
16089  5D07
16090  5D08
16091  5D09
16092  5D0A
16093  5D0B
16094  5D0C
16095  5D0D
16096  5D0E
16097  5D0F
16098  5D10
16099  5D11
16100  5D12
16101  5D13
16102  5D14
16103  5D15
16104  5D16
16105  5D17
16106  5D18
16107  5D19
16108  5D1A
16109  5D1B
16110  5D1C
16111  5D1D
16112  5D1E
16113  5D1F
16114  5D20
16115  5D21
16116  5D22
16117  5D23
16118  5D24
16119  5D25
16120  5D26
16121  5D27
16122  5D28
16123  5D29
16124  5D2A
16125  5D2B
16126  5D2C
16127  5D2D
16128  5D2E
16129  5D2F
16130  5D30
16131  5D31
16132  5D32
16133  5D33
16134  5D34
16135  5D35
16136  5D36
16137  5D37
16138  5D38
16139  5D39
16140  5D3A
16141  5D3B
16142  5D3C
16143  5D3D
16144  5D3E
16145  5D3F
16146  5D40
16147  5D41
16148  5D42
16149  5D43
16150  5D44
16151  5D45
16152  5D46
16153  5D47
16154  5D48
16155  5D49
16156  5D4A
16157  5D4B
16158  5D4C
16159  5D4D
16160  5D4E
16161  5D4F
16162  5D50
16163  5D51
16164  5D52
16165  5D53
16166  5D54
16167  5D55
16168  5D56
16169  5D57
16170  5D58
16171  5D59
16172  5D5A
16173  5D5B
16174  5D5C
16175  5D5D
16176  5D5E
16177  5D5F
16178  5D60
16179  5D61
16180  5D62
16181  5D63
16182  5D64
16183  5D65
16184  5D66
16185  5D67
16186  5D68
16187  5D69
16188  5D6A
16189  5D6B
16190  5D6C
16191  5D6D
16192  5D6E
16193  5D6F
16194  5D70
16195  5D71
16196  5D72
16197  5D73
16198  5D74
16199  5D75
16200  5D76
16201  5D77
16202  5D78
16203  5D79
16204  5D7A
16205  5D7B
16206  5D7C
16207  5D7D
16208  5D7E
16209  5D7F
16210  5D80
16211  5D81
16212  5D82
16213  5D83
16214  5D84
16215  5D85
16216  5D86
16217  5D87
16218  5D88
16219  5D89
16220  5D8A
16221  5D8B
16222  5D8C
16223  5D8D
16224  5D8E
16225  5D8F
16226  5D90
16227  5D91
16228  5D92
16229  5D93
16230  5D94
16231  5D95
16232  5D96
16233  5D97
16234  5D98
16235  5D99
16236  5D9A
16237  5D9B
16238  5D9C
16239  5D9D
16240  5D9E
16241  5D9F
16242  5DA0
16243  5DA1
16244  5DA2
16245  5DA3
16246  5DA4
16247  5DA5
16248  5DA6
16249  5DA7
16250  5DA8
16251  5DA9
16252  5DAA
16253  5DAB
16254  5DAC
16255  5DAD
16256  5DAE
16257  5DAF
16258  5DB0
16259  5DB1
16260  5DB2
16261  5DB3
16262  5DB4
16263  5DB5
16264  5DB6
16265  5DB7
16266  5DB8
16267  5DB9
16268  5DBA
16269  5DBB
16270  5DBC
16271  5DBD
16272  5DBE
16273  5DBF
16274  5DC0
16275  5DC1
16276  5DC2
16277  5DC3
16278  5DC4
16279  5DC5
16280  5DC6
16281  5DC7
16282  5DC8
16283  5DC9
16284  5DCA
16285  5DCB
16286  5DCC
16287  5DCD
16288  5DCE
16289  5DCF
16290  5DD0
16291  5DD1
16292  5DD2
16293  5DD3
16294  5DD4
16295  5DD5
16296  5DD6
16297  5DD7
16298  5DD8
16299  5DD9
16300  5DDA
16301  5DDB
16302  5DDC
16303  5DDD
16304  5DDE
16305  5DDF
16306  5DE0
16307  5DE1
16308  5DE2
16309  5DE3
16310  5DE4
16311  5DE5
16312  5DE6
16313  5DE7
16314  5DE8
16315  5DE9
16316  5DEA
16317  5DEB
16318  5DEC
16319  5DED
16320  5DEE
16321  5DEF
16322  5DF0
16323  5DF1
16324  5DF2
16325  5DF3
16326  5DF4
16327  5DF5
16328  5DF6
16329  5DF7
16330  5DF8
16331  5DF9
16332  5DFA
16333  5DFB
16334  5DFC
16335  5DFD
16336  5DFE
16337  5DFF
16338  5E00
16339  5E01
16340  5E02
16341  5E03
16342  5E04
16343  5E05
16344  5E06
16345  5E07
16346  5E08
16347  5E09
16348  5E0A
16349  5E0B
16350  5E0C
16351  5E0D
16352  5E0E
16353  5E0F
16354  5E10
16355  5E11
16356  5E12
16357  5E13
16358  5E14
16359  5E15
16360  5E16
16361  5E17
16362  5E18
16363  5E19
16364  5E1A
16365  5E1B
16366  5E1C
16367  5E1D
16368  5E1E
16369  5E1F
16370  5E20
16371  5E21
16372  5E22
16373  5E23
16374  5E24
16375  5E25
16376  5E26
16377  5E27
16378  5E28
16379  5E29
16380  5E2A
16381  5E2B
16382  5E2C
16383  5E2D
16384  5E2E
16385  5E2F
16386  5E30
16387  5E31
16388  5E32
16389  5E33
16390  5E34
16391  5E35
16392  5E36
16393  5E37
16394  5E38
16395  5E39
16396  5E3A
16397  5E3B
16398  5E3C
16399  5E3D
16400  5E3E
16401  5E3F
16402  5E40
16403  5E41
16404  5E42
16405  5E43
16406  5E44
16407  5E45
16408  5E46
16409  5E47
16410  5E48
16411  5E49
16412  5E4A
16413  5E4B
16414  5E4C
16415  5E4D
16416  5E4E
16417  5E4F
16418  5E50
16419  5E51
16420  5E52
16421  5E53
16422  5E54
16423  5E55
16424  5E56
16425  5E57
16426  5E58
16427  5E59
16428  5E5A
16429  5E5B
16430  5E5C
16431  5E5D
16432  5E5E
16433  5E5F
16434  5E60
16435  5E61
16436  5E62
16437  5E63
16438  5E64
16439  5E65
16440  5E66
16441  5E67
16442  5E68
16443  5E69
16444  5E6A
16445  5E6B
16446  5E6C
16447  5E6D
16448  5E6E
16449  5E6F
16450  5E70
16451  5E71
16452  5E72
16453  5E73
16454  5E74
16455  5E75
16456  5E76
16457  5E77
16458  5E78
16459  5E79
16460  5E7A
16461  5E7B
16462  5E7C
16463  5E7D
16464  5E7E
16465  5E7F
16466  5E80
16467  5E81
16468  5E82
16469  5E83
16470  5E84
16471  5E85
16472  5E86
16473  5E87
16474  5E88
16475  5E89
16476  5E8A
16477  5E8B
16478  5E8C
16479  5E8D
16480  5E8E
16481  5E8F
16482  5E90
16483  5E91
16484  5E92
16485  5E93
16486  5E94
16487  5E95
16488  5E96
16489  5E97
16490  5E98
16491  5E99
16492  5E9A
16493  5E9B
16494  5E9C
16495  5E9D
16496  5E9E
16497  5E9F
16498  5EA0
16499  5EA1
16500  5EA2
16501  5EA3
16502  5EA4
16503  5EA5
16504  5EA6
16505  5EA7
16506  5EA8
16507  5EA9
16508  5EAA
16509  5EAB
16510  5EAC
16511  5EAD
16512  5EAE
16513  5EAF
16514  5EB0
16515  5EB1
16516  5EB2
16517  5EB3
16518  5EB4
16519  5EB5
16520  5EB6
16521  5EB7
16522  5EB8
16523  5EB9
16524  5EBA
16525  5EBB
16526  5EBC
16527  5EBD
16528  5EBE
16529  5EBF
16530  5EC0
16531  5EC1
16532  5EC2
16533  5EC3
16534  5EC4
16535  5EC5
16536  5EC6
16537  5EC7
16538  5EC8
16539  5EC9
16540  5ECA
16541  5ECB
16542  5ECC
16543  5ECD
16544  5ECE
16545  5ECF
16546  5ED0
16547  5ED1
16548  5ED2
16549  5ED3
16550  5ED4
16551  5ED5
16552  5ED6
16553  5ED7
16554  5ED8
16555  5ED9
16556  5EDA
16557  5EDB
16558  5EDC
16559  5EDD
16560  5EDE
16561  5EDF
16562  5EE0
16563  5EE1
16564  5EE2
16565  5EE3
16566  5EE4
16567  5EE5
16568  5EE6
16569  5EE7
16570  5EE8
16571  5EE9
16572  5EEA
16573  5EEB
16574  5EEC
16575  5EED
16576  5EEE
16577  5EEF
16578  5EF0
16579  5EF1
16580  5EF2
16581  5EF3
16582  5EF4
16583  5EF5
16584  5EF6
16585  5EF7
16586  5EF8
16587  5EF9
16588  5EFA
16589  5EFB
16590  5EFC
16591  5EFD
16592  5EFE
16593  5EFF
16594  5F00
16595  5F01
16596  5F02
16597  5F03
16598  5F04
16599  5F05
16600  5F06
16601  5F07
16602  5F08
16603  5F09
16604  5F0A
16605  5F0B
16606  5F0C
16607  5F0D
16608  5F0E
16609  5F0F
16610  5F10
16611  5F11
16612  5F12
16613  5F13
16614  5F14
16615  5F15
16616  5F16
16617  5F17
16618  5F18
16619  5F19
16620  5F1A
16621  5F1B
16622  5F1C
16623  5F1D
16624  5F1E
16625  5F1F
16626  5F20
16627  5F21
16628  5F22
16629  5F23
16630  5F24
16631  5F25
16632  5F26
16633  5F27
16634  5F28
16635  5F29
16636  5F2A
16637  5F2B
16638  5F2C
16639  5F2D
16640  5F2E
16641  5F2F
16642  5F30
16643  5F31
16644  5F32
16645  5F33
16646  5F34
16647  5F35
16648  5F36
16649  5F37
16650  5F38
16651  5F39
16652  5F3A
16653  5F3B
16654  5F3C
16655  5F3D
16656  5F3E
16657  5F3F
16658  5F40
16659  5F41
16660  5F42
16661  5F43
16662  5F44
16663  5F45
16664  5F46
16665  5F47
16666  5F48
16667  5F49
16668  5F4A
16669  5F4B
16670  5F4C
16671  5F4D
16672  5F4E
16673  5F4F
16674  5F50
16675  5F51
16676  5F52
16677  5F53
16678  5F54
16679  5F55
16680  5F56
16681  5F57
16682  5F58
16683  5F59
16684  5F5A
16685  5F5B
16686  5F5C
16687  5F5D
16688  5F5E
16689  5F5F
16690  5F60
16691  5F61
16692  5F62
16693  5F63
16694  5F64
16695  5F65
16696  5F66
16697  5F67
16698  5F68
16699  5F69
16700  5F6A
16701  5F6B
16702  5F6C
16703  5F6D
16704  5F6E
16705  5F6F
16706  5F70
16707  5F71
16708  5F72
16709  5F73
16710  5F74
16711  5F75
16712  5F76
16713  5F77
16714  5F78
16715  5F79
16716  5F7A
16717  5F7B
16718  5F7C
16719  5F7D
16720  5F7E
16721  5F7F
16722  5F80
16723  5F81
16724  5F82
16725  5F83
16726  5F84
16727  5F85
16728  5F86
16729  5F87
16730  5F88
16731  5F89
16732  5F8A
16733  5F8B
16734  5F8C
16735  5F8D
16736  5F8E
16737  5F8F
16738  5F90
16739  5F91
16740  5F92
16741  5F93
16742  5F94
16743  5F95
16744  5F96
16745  5F97
16746  5F98
16747  5F99
16748  5F9A
16749  5F9B
16750  5F9C
16751  5F9D
16752  5F9E
16753  5F9F
16754  5FA0
16755  5FA1
16756  5FA2
16757  5FA3
16758  5FA4
16759  5FA5
16760  5FA6
16761  5FA7
16762  5FA8
16763  5FA9
16764  5FAA
16765  5FAB
16766  5FAC
16767  5FAD
16768  5FAE
16769  5FAF
16770  5FB0
16771  5FB1
16772  5FB2
16773  5FB3
16774  5FB4
16775  5FB5
16776  5FB6
16777  5FB7
16778  5FB8
16779  5FB9
16780  5FBA
16781  5FBB
16782  5FBC
16783  5FBD
16784  5FBE
16785  5FBF
16786  5FC0
16787  5FC1
16788  5FC2
16789  5FC3
16790  5FC4
16791  5FC5
16792  5FC6
16793  5FC7
16794  5FC8
16795  5FC9
16796  5FCA
16797  5FCB
16798  5FCC
16799  5FCD
16800  5FCE
16801  5FCF
16802  5FD0
16803  5FD1
16804  5FD2
16805  5FD3
16806  5FD4
16807  5FD5
16808  5FD6
16809  5FD7
16810  5FD8
16811  5FD9
16812  5FDA
16813  5FDB
16814  5FDC
16815  5FDD
16816  5FDE
16817  5FDF
16818  5FE0
16819  5FE1
16820  5FE2
16821  5FE3
16822  5FE4
16823  5FE5
16824  5FE6
16825  5FE7
16826  5FE8
16827  5FE9
16828  5FEA
16829  5FEB
16830  5FEC
16831  5FED
16832  5FEE
16833  5FEF
16834  5FF0
16835  5FF1
16836  5FF2
16837  5FF3
16838  5FF4
16839  5FF5
16840  5FF6
16841  5FF7
16842  5FF8
16843  5FF9
16844  5FFA
16845  5FFB
16846  5FFC
16847  5FFD
16848  5FFE
16849  5FFF
16850  6000
16851  6001
16852  6002
16853  6003
16854  6004
16855  6005
16856  6006
16857  6007
16858  6008
16859  6009
16860  600A
16861  600B
16862  600C
16863  600D
16864  600E
16865  600F
16866  6010
16867  6011
16868  6012
16869  6013
16870  6014
16871  6015
16872  6016
16873  6017
16874  6018
16875  6019
16876  601A
16877  601B
16878  601C
16879  601D
16880  601E
16881  601F
16882  6020
16883  6021
16884  6022
16885  6023
16886  6024
16887  6025
16888  6026
16889  6027
16890  6028
16891  6029
16892  602A
16893  602B
16894  602C
16895  602D
16896  602E
16897  602F
16898  6030
16899  6031
16900  6032
16901  6033
16902  6034
16903  6035
16904  6036
16905  6037
16906  6038
16907  6039
16908  603A
16909  603B
16910  603C
16911  603D
16912  603E
16913  603F
16914  6040
16915  6041
16916  6042
16917  6043
16918  6044
16919  6045
16920  6046
16921  6047
16922  6048
16923  6049
16924  604A
16925  604B
16926  604C
16927  604D
16928  604E
16929  604F
16930  6050
16931  6051
16932  6052
16933  6053
16934  6054
16935  6055
16936  6056
16937  6057
16938  6058
16939  6059
16940  605A
16941  605B
16942  605C
16943  605D
16944  605E
16945  605F
16946  6060
16947  6061
16948  6062
16949  6063
16950  6064
16951  6065
16952  6066
16953  6067
16954  6068
16955  6069
16956  606A
16957  606B
16958  606C
16959  606D
16960  606E
16961  606F
16962  6070
16963  6071
16964  6072
16965  6073
16966  6074
16967  6075
16968  6076
16969  6077
16970  6078
16971  6079
16972  607A
16973  607B
16974  607C
16975  607D
16976  607E
16977  607F
16978  6080
16979  6081
16980  6082
16981  6083
16982  6084
16983  6085
16984  6086
16985  6087
16986  6088
16987  6089
16988  608A
16989  608B
16990  608C
16991  608D
16992  608E
16993  608F
16994  6090
16995  6091
16996  6092
16997  6093
16998  6094
16999  6095
17000  6096
17001  6097
17002  6098
17003  6099
17004  609A
17005  609B
17006  609C
17007  609D
17008  609E
17009  609F
17010  60A0
17011  60A1
17012  60A2
17013  60A3
17014  60A4
17015  60A5
17016  60A6
17017  60A7
17018  60A8
17019  60A9
17020  60AA
17021  60AB
17022  60AC
17023  60AD
17024  60AE
17025  60AF
17026  60B0
17027  60B1
17028  60B2
17029  60B3
17030  60B4
17031  60B5
17032  60B6
17033  60B7
17034  60B8
17035  60B9
17036  60BA
17037  60BB
17038  60BC
17039  60BD
17040  60BE
17041  60BF
17042  60C0
17043  60C1
17044  60C2
17045  60C3
17046  60C4
17047  60C5
17048  60C6
17049  60C7
17050  60C8
17051  60C9
17052  60CA
17053  60CB
17054  60CC
17055  60CD
17056  60CE
17057  60CF
17058  60D0
17059  60D1
17060  60D2
17061  60D3
17062  60D4
17063  60D5
17064  60D6
17065  60D7
17066  60D8
17067  60D9
17068  60DA
17069  60DB
17070  60DC
17071  60DD
17072  60DE
17073  60DF
17074  60E0
17075  60E1
17076  60E2
17077  60E3
17078  60E4
17079  60E5
17080  60E6
17081  60E7
17082  60E8
17083  60E9
17084  60EA
17085  60EB
17086  60EC
17087  60ED
17088  60EE
17089  60EF
17090  60F0
17091  60F1
17092  60F2
17093  60F3
17094  60F4
17095  60F5
17096  60F6
17097  60F7
17098  60F8
17099  60F9
17100  60FA
17101  60FB
17102  60FC
17103  60FD
17104  60FE
17105  60FF
17106  6100
17107  6101
17108  6102
17109  6103
17110  6104
17111  6105
17112  6106
17113  6107
17114  6108
17115  6109
17116  610A
17117  610B
17118  610C
17119  610D
17120  610E
17121  610F
17122  6110
17123  6111
17124  6112
17125  6113
17126  6114
17127  6115
17128  6116
17129  6117
17130  6118
17131  6119
17132  611A
17133  611B
17134  611C
17135  611D
17136  611E
17137  611F
17138  6120
17139  6121
17140  6122
17141  6123
17142  6124
17143  6125
17144  6126
17145  6127
17146  6128
17147  6129
17148  612A
17149  612B
17150  612C
17151  612D
17152  612E
17153  612F
17154  6130
17155  6131
17156  6132
17157  6133
17158  6134
17159  6135
17160  6136
17161  6137
17162  6138
17163  6139
17164  613A
17165  613B
17166  613C
17167  613D
17168  613E
17169  613F
17170  6140
17171  6141
17172  6142
17173  6143
17174  6144
17175  6145
17176  6146
17177  6147
17178  6148
17179  6149
17180  614A
17181  614B
17182  614C
17183  614D
17184  614E
17185  614F
17186  6150
17187  6151
17188  6152
17189  6153
17190  6154
17191  6155
17192  6156
17193  6157
17194  6158
17195  6159
17196  615A
17197  615B
17198  615C
17199  615D
17200  615E
17201  615F
17202  6160
17203  6161
17204  6162
17205  6163
17206  6164
17207  6165
17208  6166
17209  6167
17210  6168
17211  6169
17212  616A
17213  616B
17214  616C
17215  616D
17216  616E
17217  616F
17218  6170
17219  6171
17220  6172
17221  6173
17222  6174
17223  6175
17224  6176
17225  6177
17226  6178
17227  6179
17228  617A
17229  617B
17230  617C
17231  617D
17232  617E
17233  617F
17234  6180
17235  6181
17236  6182
17237  6183
17238  6184
17239  6185
17240  6186
17241  6187
17242  6188
17243  6189
17244  618A
17245  618B
17246  618C
17247  618D
17248  618E
17249  618F
17250  6190
17251  6191
17252  6192
17253  6193
17254  6194
17255  6195
17256  6196
17257  6197
17258  6198
17259  6199
17260  619A
17261  619B
17262  619C
17263  619D
17264  619E
17265  619F
17266  61A0
17267  61A1
17268  61A2
17269  61A3
17270  61A4
17271  61A5
17272  61A6
17273  61A7
17274  61A8
17275  61A9
17276  61AA
17277  61AB
17278  61AC
17279  61AD
17280  61AE
17281  61AF
17282  61B0
17283  61B1
17284  61B2
17285  61B3
17286  61B4
17287  61B5
17288  61B6
17289  61B7
17290  61B8
17291  61B9
17292  61BA
17293  61BB
17294  61BC
17295  61BD
17296  61BE
17297  61BF
17298  61C0
17299  61C1
17300  61C2
17301  61C3
17302  61C4
17303  61C5
17304  61C6
17305  61C7
17306  61C8
17307  61C9
17308  61CA
17309  61CB
17310  61CC
17311  61CD
17312  61CE
17313  61CF
17314  61D0
17315  61D1
17316  61D2
17317  61D3
17318  61D4
17319  61D5
17320  61D6
17321  61D7
17322  61D8
17323  61D9
17324  61DA
17325  61DB
17326  61DC
17327  61DD
17328  61DE
17329  61DF
17330  61E0
17331  61E1
17332  61E2
17333  61E3
17334  61E4
17335  61E5
17336  61E6
17337  61E7
17338  61E8
17339  61E9
17340  61EA
17341  61EB
17342  61EC
17343  61ED
17344  61EE
17345  61EF
17346  61F0
17347  61F1
17348  61F2
17349  61F3
17350  61F4
17351  61F5
17352  61F6
17353  61F7
17354  61F8
17355  61F9
17356  61FA
17357  61FB
17358  61FC
17359  61FD
17360  61FE
17361  61FF
17362  6200
17363  6201
17364  6202
17365  6203
17366  6204
17367  6205
17368  6206
17369  6207
17370  6208
17371  6209
17372  620A
17373  620B
17374  620C
17375  620D
17376  620E
17377  620F
17378  6210
17379  6211
17380  6212
17381  6213
17382  6214
17383  6215
17384  6216
17385  6217
17386  6218
17387  6219
17388  621A
17389  621B
17390  621C
17391  621D
17392  621E
17393  621F
17394  6220
17395  6221
17396  6222
17397  6223
17398  6224
17399  6225
17400  6226
17401  6227
17402  6228
17403  6229
17404  622A
17405  622B
17406  622C
17407  622D
17408  622E
17409  622F
17410  6230
17411  6231
17412  6232
17413  6233
17414  6234
17415  6235
17416  6236
17417  6237
17418  6238
17419  6239
17420  623A
17421  623B
17422  623C
17423  623D
17424  623E
17425  623F
17426  6240
17427  6241
17428  6242
17429  6243
17430  6244
17431  6245
17432  6246
17433  6247
17434  6248
17435  6249
17436  624A
17437  624B
17438  624C
17439  624D
17440  624E
17441  624F
17442  6250
17443  6251
17444  6252
17445  6253
17446  6254
17447  6255
17448  6256
17449  6257
17450  6258
17451  6259
17452  625A
17453  625B
17454  625C
17455  625D
17456  625E
17457  625F
17458  6260
17459  6261
17460  6262
17461  6263
17462  6264
17463  6265
17464  6266
17465  6267
17466  6268
17467  6269
17468  626A
17469  626B
17470  626C
17471  626D
17472  626E
17473  626F
17474  6270
17475  6271
17476  6272
17477  6273
17478  6274
17479  6275
17480  6276
17481  6277
17482  6278
17483  6279
17484  627A
17485  627B
17486  627C
17487  627D
17488  627E
17489  627F
17490  6280
17491  6281
17492  6282
17493  6283
17494  6284
17495  6285
17496  6286
17497  6287
17498  6288
17499  6289
17500  628A
17501  628B
17502  628C
17503  628D
17504  628E
17505  628F
17506  6290
17507  6291
17508  6292
17509  6293
17510  6294
17511  6295
17512  6296
17513  6297
17514  6298
17515  6299
17516  629A
17517  629B
17518  629C
17519  629D
17520  629E
17521  629F
17522  62A0
17523  62A1
17524  62A2
17525  62A3
17526  62A4
17527  62A5
17528  62A6
17529  62A7
17530  62A8
17531  62A9
17532  62AA
17533  62AB
17534  62AC
17535  62AD
17536  62AE
17537  62AF
17538  62B0
17539  62B1
17540  62B2
17541  62B3
17542  62B4
17543  62B5
17544  62B6
17545  62B7
17546  62B8
17547  62B9
17548  62BA
17549  62BB
17550  62BC
17551  62BD
17552  62BE
17553  62BF
17554  62C0
17555  62C1
17556  62C2
17557  62C3
17558  62C4
17559  62C5
17560  62C6
17561  62C7
17562  62C8
17563  62C9
17564  62CA
17565  62CB
17566  62CC
17567  62CD
17568  62CE
17569  62CF
17570  62D0
17571  62D1
17572  62D2
17573  62D3
17574  62D4
17575  62D5
17576  62D6
17577  62D7
17578  62D8
17579  62D9
17580  62DA
17581  62DB
17582  62DC
17583  62DD
17584  62DE
17585  62DF
17586  62E0
17587  62E1
17588  62E2
17589  62E3
17590  62E4
17591  62E5
17592  62E6
17593  62E7
17594  62E8
17595  62E9
17596  62EA
17597  62EB
17598  62EC
17599  62ED
17600  62EE
17601  62EF
17602  62F0
17603  62F1
17604  62F2
17605  62F3
17606  62F4
17607  62F5
17608  62F6
17609  62F7
17610  62F8
17611  62F9
17612  62FA
17613  62FB
17614  62FC
17615  62FD
17616  62FE
17617  62FF
17618  6300
17619  6301
17620  6302
17621  6303
17622  6304
17623  6305
17624  6306
17625  6307
17626  6308
17627  6309
17628  630A
17629  630B
17630  630C
17631  630D
17632  630E
17633  630F
17634  6310
17635  6311
17636  6312
17637  6313
17638  6314
17639  6315
17640  6316
17641  6317
17642  6318
17643  6319
17644  631A
17645  631B
17646  631C
17647  631D
17648  631E
17649  631F
17650  6320
17651  6321
17652  6322
17653  6323
17654  6324
17655  6325
17656  6326
17657  6327
17658  6328
17659  6329
17660  632A
17661  632B
17662  632C
17663  632D
17664  632E
17665  632F
17666  6330
17667  6331
17668  6332
17669  6333
17670  6334
17671  6335
17672  6336
17673  6337
17674  6338
17675  6339
17676  633A
17677  633B
17678  633C
17679  633D
17680  633E
17681  633F
17682  6340
17683  6341
17684  6342
17685  6343
17686  6344
17687  6345
17688  6346
17689  6347
17690  6348
17691  6349
17692  634A
17693  634B
17694  634C
17695  634D
17696  634E
17697  634F
17698  6350
17699  6351
17700  6352
17701  6353
17702  6354
17703  6355
17704  6356
17705  6357
17706  6358
17707  6359
17708  635A
17709  635B
17710  635C
17711  635D
17712  635E
17713  635F
17714  6360
17715  6361
17716  6362
17717  6363
17718  6364
17719  6365
17720  6366
17721  6367
17722  6368
17723  6369
17724  636A
17725  636B
17726  636C
17727  636D
17728  636E
17729  636F
17730  6370
17731  6371
17732  6372
17733  6373
17734  6374
17735  6375
17736  6376
17737  6377
17738  6378
17739  6379
17740  637A
17741  637B
17742  637C
17743  637D
17744  637E
17745  637F
17746  6380
17747  6381
17748  6382
17749  6383
17750  6384
17751  6385
17752  6386
17753  6387
17754  6388
17755  6389
17756  638A
17757  638B
17758  638C
17759  638D
17760  638E
17761  638F
17762  6390
17763  6391
17764  6392
17765  6393
17766  6394
17767  6395
17768  6396
17769  6397
17770  6398
17771  6399
17772  639A
17773  639B
17774  639C
17775  639D
17776  639E
17777  639F
17778  63A0
17779  63A1
17780  63A2
17781  63A3
17782  63A4
17783  63A5
17784  63A6
17785  63A7
17786  63A8
17787  63A9
17788  63AA
17789  63AB
17790  63AC
17791  63AD
17792  63AE
17793  63AF
17794  63B0
17795  63B1
17796  63B2
17797  63B3
17798  63B4
17799  63B5
17800  63B6
17801  63B7
17802  63B8
17803  63B9
17804  63BA
17805  63BB
17806  63BC
17807  63BD
17808  63BE
17809  63BF
17810  63C0
17811  63C1
17812  63C2
17813  63C3
17814  63C4
17815  63C5
17816  63C6
17817  63C7
17818  63C8
17819  63C9
17820  63CA
17821  63CB
17822  63CC
17823  63CD
17824  63CE
17825  63CF
17826  63D0
17827  63D1
17828  63D2
17829  63D3
17830  63D4
17831  63D5
17832  63D6
17833  63D7
17834  63D8
17835  63D9
17836  63DA
17837  63DB
17838  63DC
17839  63DD
17840  63DE
17841  63DF
17842  63E0
17843  63E1
17844  63E2
17845  63E3
17846  63E4
17847  63E5
17848  63E6
17849  63E7
17850  63E8
17851  63E9
17852  63EA
17853  63EB
17854  63EC
17855  63ED
17856  63EE
17857  63EF
17858  63F0
17859  63F1
17860  63F2
17861  63F3
17862  63F4
17863  63F5
17864  63F6
17865  63F7
17866  63F8
17867  63F9
17868  63FA
17869  63FB
17870  63FC
17871  63FD
17872  63FE
17873  63FF
17874  6400
17875  6401
17876  6402
17877  6403
17878  6404
17879  6405
17880  6406
17881  6407
17882  6408
17883  6409
17884  640A
17885  640B
17886  640C
17887  640D
17888  640E
17889  640F
17890  6410
17891  6411
17892  6412
17893  6413
17894  6414
17895  6415
17896  6416
17897  6417
17898  6418
17899  6419
17900  641A
17901  641B
17902  641C
17903  641D
17904  641E
17905  641F
17906  6420
17907  6421
17908  6422
17909  6423
17910  6424
17911  6425
17912  6426
17913  6427
17914  6428
17915  6429
17916  642A
17917  642B
17918  642C
17919  642D
17920  642E
17921  642F
17922  6430
17923  6431
17924  6432
17925  6433
17926  6434
17927  6435
17928  6436
17929  6437
17930  6438
17931  6439
17932  643A
17933  643B
17934  643C
17935  643D
17936  643E
17937  643F
17938  6440
17939  6441
17940  6442
17941  6443
17942  6444
17943  6445
17944  6446
17945  6447
17946  6448
17947  6449
17948  644A
17949  644B
17950  644C
17951  644D
17952  644E
17953  644F
17954  6450
17955  6451
17956  6452
17957  6453
17958  6454
17959  6455
17960  6456
17961  6457
17962  6458
17963  6459
17964  645A
17965  645B
17966  645C
17967  645D
17968  645E
17969  645F
17970  6460
17971  6461
17972  6462
17973  6463
17974  6464
17975  6465
17976  6466
17977  6467
17978  6468
17979  6469
17980  646A
17981  646B
17982  646C
17983  646D
17984  646E
17985  646F
17986  6470
17987  6471
17988  6472
17989  6473
17990  6474
17991  6475
17992  6476
17993  6477
17994  6478
17995  6479
17996  647A
17997  647B
17998  647C
17999  647D
18000  647E
18001  647F
18002  6480
18003  6481
18004  6482
18005  6483
18006  6484
18007  6485
18008  6486
18009  6487
18010  6488
18011  6489
18012  648A
18013  648B
18014  648C
18015  648D
18016  648E
18017  648F
18018  6490
18019  6491
18020  6492
18021  6493
18022  6494
18023  6495
18024  6496
18025  6497
18026  6498
18027  6499
18028  649A
18029  649B
18030  649C
18031  649D
18032  649E
18033  649F
18034  64A0
18035  64A1
18036  64A2
18037  64A3
18038  64A4
18039  64A5
18040  64A6
18041  64A7
18042  64A8
18043  64A9
18044  64AA
18045  64AB
18046  64AC
18047  64AD
18048  64AE
18049  64AF
18050  64B0
18051  64B1
18052  64B2
18053  64B3
18054  64B4
18055  64B5
18056  64B6
18057  64B7
18058  64B8
18059  64B9
18060  64BA
18061  64BB
18062  64BC
18063  64BD
18064  64BE
18065  64BF
18066  64C0
18067  64C1
18068  64C2
18069  64C3
18070  64C4
18071  64C5
18072  64C6
18073  64C7
18074  64C8
18075  64C9
18076  64CA
18077  64CB
18078  64CC
18079  64CD
18080  64CE
18081  64CF
18082  64D0
18083  64D1
18084  64D2
18085  64D3
18086  64D4
18087  64D5
18088  64D6
18089  64D7
18090  64D8
18091  64D9
18092  64DA
18093  64DB
18094  64DC
18095  64DD
18096  64DE
18097  64DF
18098  64E0
18099  64E1
18100  64E2
18101  64E3
18102  64E4
18103  64E5
18104  64E6
18105  64E7
18106  64E8
18107  64E9
18108  64EA
18109  64EB
18110  64EC
18111  64ED
18112  64EE
18113  64EF
18114  64F0
18115  64F1
18116  64F2
18117  64F3
18118  64F4
18119  64F5
18120  64F6
18121  64F7
18122  64F8
18123  64F9
18124  64FA
18125  64FB
18126  64FC
18127  64FD
18128  64FE
18129  64FF
18130  6500
18131  6501
18132  6502
18133  6503
18134  6504
18135  6505
18136  6506
18137  6507
18138  6508
18139  6509
18140  650A
18141  650B
18142  650C
18143  650D
18144  650E
18145  650F
18146  6510
18147  6511
18148  6512
18149  6513
18150  6514
18151  6515
18152  6516
18153  6517
18154  6518
18155  6519
18156  651A
18157  651B
18158  651C
18159  651D
18160  651E
18161  651F
18162  6520
18163  6521
18164  6522
18165  6523
18166  6524
18167  6525
18168  6526
18169  6527
18170  6528
18171  6529
18172  652A
18173  652B
18174  652C
18175  652D
18176  652E
18177  652F
18178  6530
18179  6531
18180  6532
18181  6533
18182  6534
18183  6535
18184  6536
18185  6537
18186  6538
18187  6539
18188  653A
18189  653B
18190  653C
18191  653D
18192  653E
18193  653F
18194  6540
18195  6541
18196  6542
18197  6543
18198  6544
18199  6545
18200  6546
18201  6547
18202  6548
18203  6549
18204  654A
18205  654B
18206  654C
18207  654D
18208  654E
18209  654F
18210  6550
18211  6551
18212  6552
18213  6553
18214  6554
18215  6555
18216  6556
18217  6557
18218  6558
18219  6559
18220  655A
18221  655B
18222  655C
18223  655D
18224  655E
18225  655F
18226  6560
18227  6561
18228  6562
18229  6563
18230  6564
18231  6565
18232  6566
18233  6567
18234  6568
18235  6569
18236  656A
18237  656B
18238  656C
18239  656D
18240  656E
18241  656F
18242  6570
18243  6571
18244  6572
18245  6573
18246  6574
18247  6575
18248  6576
18249  6577
18250  6578
18251  6579
18252  657A
18253  657B
18254  657C
18255  657D
18256  657E
18257  657F
18258  6580
18259  6581
18260  6582
18261  6583
18262  6584
18263  6585
18264  6586
18265  6587
18266  6588
18267  6589
18268  658A
18269  658B
18270  658C
18271  658D
18272  658E
18273  658F
18274  6590
18275  6591
18276  6592
18277  6593
18278  6594
18279  6595
18280  6596
18281  6597
18282  6598
18283  6599
18284  659A
18285  659B
18286  659C
18287  659D
18288  659E
18289  659F
18290  65A0
18291  65A1
18292  65A2
18293  65A3
18294  65A4
18295  65A5
18296  65A6
18297  65A7
18298  65A8
18299  65A9
18300  65AA
18301  65AB
18302  65AC
18303  65AD
18304  65AE
18305  65AF
18306  65B0
18307  65B1
18308  65B2
18309  65B3
18310  65B4
18311  65B5
18312  65B6
18313  65B7
18314  65B8
18315  65B9
18316  65BA
18317  65BB
18318  65BC
18319  65BD
18320  65BE
18321  65BF
18322  65C0
18323  65C1
18324  65C2
18325  65C3
18326  65C4
18327  65C5
18328  65C6
18329  65C7
18330  65C8
18331  65C9
18332  65CA
18333  65CB
18334  65CC
18335  65CD
18336  65CE
18337  65CF
18338  65D0
18339  65D1
18340  65D2
18341  65D3
18342  65D4
18343  65D5
18344  65D6
18345  65D7
18346  65D8
18347  65D9
18348  65DA
18349  65DB
18350  65DC
18351  65DD
18352  65DE
18353  65DF
18354  65E0
18355  65E1
18356  65E2
18357  65E3
18358  65E4
18359  65E5
18360  65E6
18361  65E7
18362  65E8
18363  65E9
18364  65EA
18365  65EB
18366  65EC
18367  65ED
18368  65EE
18369  65EF
18370  65F0
18371  65F1
18372  65F2
18373  65F3
18374  65F4
18375  65F5
18376  65F6
18377  65F7
18378  65F8
18379  65F9
18380  65FA
18381  65FB
18382  65FC
18383  65FD
18384  65FE
18385  65FF
18386  6600
18387  6601
18388  6602
18389  6603
18390  6604
18391  6605
18392  6606
18393  6607
18394  6608
18395  6609
18396  660A
18397  660B
18398  660C
18399  660D
18400  660E
18401  660F
18402  6610
18403  6611
18404  6612
18405  6613
18406  6614
18407  6615
18408  6616
18409  6617
18410  6618
18411  6619
18412  661A
18413  661B
18414  661C
18415  661D
18416  661E
18417  661F
18418  6620
18419  6621
18420  6622
18421  6623
18422  6624
18423  6625
18424  6626
18425  6627
18426  6628
18427  6629
18428  662A
18429  662B
18430  662C
18431  662D
18432  662E
18433  662F
18434  6630
18435  6631
18436  6632
18437  6633
18438  6634
18439  6635
18440  6636
18441  6637
18442  6638
18443  6639
18444  663A
18445  663B
18446  663C
18447  663D
18448  663E
18449  663F
18450  6640
18451  6641
18452  6642
18453  6643
18454  6644
18455  6645
18456  6646
18457  6647
18458  6648
18459  6649
18460  664A
18461  664B
18462  664C
18463  664D
18464  664E
18465  664F
18466  6650
18467  6651
18468  6652
18469  6653
18470  6654
18471  6655
18472  6656
18473  6657
18474  6658
18475  6659
18476  665A
18477  665B
18478  665C
18479  665D
18480  665E
18481  665F
18482  6660
18483  6661
18484  6662
18485  6663
18486  6664
18487  6665
18488  6666
18489  6667
18490  6668
18491  6669
18492  666A
18493  666B
18494  666C
18495  666D
18496  666E
18497  666F
18498  6670
18499  6671
18500  6672
18501  6673
18502  6674
18503  6675
18504  6676
18505  6677
18506  6678
18507  6679
18508  667A
18509  667B
18510  667C
18511  667D
18512  667E
18513  667F
18514  6680
18515  6681
18516  6682
18517  6683
18518  6684
18519  6685
18520  6686
18521  6687
18522  6688
18523  6689
18524  668A
18525  668B
18526  668C
18527  668D
18528  668E
18529  668F
18530  6690
18531  6691
18532  6692
18533  6693
18534  6694
18535  6695
18536  6696
18537  6697
18538  6698
18539  6699
18540  669A
18541  669B
18542  669C
18543  669D
18544  669E
18545  669F
18546  66A0
18547  66A1
18548  66A2
18549  66A3
18550  66A4
18551  66A5
18552  66A6
18553  66A7
18554  66A8
18555  66A9
18556  66AA
18557  66AB
18558  66AC
18559  66AD
18560  66AE
18561  66AF
18562  66B0
18563  66B1
18564  66B2
18565  66B3
18566  66B4
18567  66B5
18568  66B6
18569  66B7
18570  66B8
18571  66B9
18572  66BA
18573  66BB
18574  66BC
18575  66BD
18576  66BE
18577  66BF
18578  66C0
18579  66C1
18580  66C2
18581  66C3
18582  66C4
18583  66C5
18584  66C6
18585  66C7
18586  66C8
18587  66C9
18588  66CA
18589  66CB
18590  66CC
18591  66CD
18592  66CE
18593  66CF
18594  66D0
18595  66D1
18596  66D2
18597  66D3
18598  66D4
18599  66D5
18600  66D6
18601  66D7
18602  66D8
18603  66D9
18604  66DA
18605  66DB
18606  66DC
18607  66DD
18608  66DE
18609  66DF
18610  66E0
18611  66E1
18612  66E2
18613  66E3
18614  66E4
18615  66E5
18616  66E6
18617  66E7
18618  66E8
18619  66E9
18620  66EA
18621  66EB
18622  66EC
18623  66ED
18624  66EE
18625  66EF
18626  66F0
18627  66F1
18628  66F2
18629  66F3
18630  66F4
18631  66F5
18632  66F6
18633  66F7
18634  66F8
18635  66F9
18636  66FA
18637  66FB
18638  66FC
18639  66FD
18640  66FE
18641  66FF
18642  6700
18643  6701
18644  6702
18645  6703
18646  6704
18647  6705
18648  6706
18649  6707
18650  6708
18651  6709
18652  670A
18653  670B
18654  670C
18655  670D
18656  670E
18657  670F
18658  6710
18659  6711
18660  6712
18661  6713
18662  6714
18663  6715
18664  6716
18665  6717
18666  6718
18667  6719
18668  671A
18669  671B
18670  671C
18671  671D
18672  671E
18673  671F
18674  6720
18675  6721
18676  6722
18677  6723
18678  6724
18679  6725
18680  6726
18681  6727
18682  6728
18683  6729
18684  672A
18685  672B
18686  672C
18687  672D
18688  672E
18689  672F
18690  6730
18691  6731
18692  6732
18693  6733
18694  6734
18695  6735
18696  6736
18697  6737
18698  6738
18699  6739
18700  673A
18701  673B
18702  673C
18703  673D
18704  673E
18705  673F
18706  6740
18707  6741
18708  6742
18709  6743
18710  6744
18711  6745
18712  6746
18713  6747
18714  6748
18715  6749
18716  674A
18717  674B
18718  674C
18719  674D
18720  674E
18721  674F
18722  6750
18723  6751
18724  6752
18725  6753
18726  6754
18727  6755
18728  6756
18729  6757
18730  6758
18731  6759
18732  675A
18733  675B
18734  675C
18735  675D
18736  675E
18737  675F
18738  6760
18739  6761
18740  6762
18741  6763
18742  6764
18743  6765
18744  6766
18745  6767
18746  6768
18747  6769
18748  676A
18749  676B
18750  676C
18751  676D
18752  676E
18753  676F
18754  6770
18755  6771
18756  6772
18757  6773
18758  6774
18759  6775
18760  6776
18761  6777
18762  6778
18763  6779
18764  677A
18765  677B
18766  677C
18767  677D
18768  677E
18769  677F
18770  6780
18771  6781
18772  6782
18773  6783
18774  6784
18775  6785
18776  6786
18777  6787
18778  6788
18779  6789
18780  678A
18781  678B
18782  678C
18783  678D
18784  678E
18785  678F
18786  6790
18787  6791
18788  6792
18789  6793
18790  6794
18791  6795
18792  6796
18793  6797
18794  6798
18795  6799
18796  679A
18797  679B
18798  679C
18799  679D
18800  679E
18801  679F
18802  67A0
18803  67A1
18804  67A2
18805  67A3
18806  67A4
18807  67A5
18808  67A6
18809  67A7
18810  67A8
18811  67A9
18812  67AA
18813  67AB
18814  67AC
18815  67AD
18816  67AE
18817  67AF
18818  67B0
18819  67B1
18820  67B2
18821  67B3
18822  67B4
18823  67B5
18824  67B6
18825  67B7
18826  67B8
18827  67B9
18828  67BA
18829  67BB
18830  67BC
18831  67BD
18832  67BE
18833  67BF
18834  67C0
18835  67C1
18836  67C2
18837  67C3
18838  67C4
18839  67C5
18840  67C6
18841  67C7
18842  67C8
18843  67C9
18844  67CA
18845  67CB
18846  67CC
18847  67CD
18848  67CE
18849  67CF
18850  67D0
18851  67D1
18852  67D2
18853  67D3
18854  67D4
18855  67D5
18856  67D6
18857  67D7
18858  67D8
18859  67D9
18860  67DA
18861  67DB
18862  67DC
18863  67DD
18864  67DE
18865  67DF
18866  67E0
18867  67E1
18868  67E2
18869  67E3
18870  67E4
18871  67E5
18872  67E6
18873  67E7
18874  67E8
18875  67E9
18876  67EA
18877  67EB
18878  67EC
18879  67ED
18880  67EE
18881  67EF
18882  67F0
18883  67F1
18884  67F2
18885  67F3
18886  67F4
18887  67F5
18888  67F6
18889  67F7
18890  67F8
18891  67F9
18892  67FA
18893  67FB
18894  67FC
18895  67FD
18896  67FE
18897  67FF
18898  6800
18899  6801
18900  6802
18901  6803
18902  6804
18903  6805
18904  6806
18905  6807
18906  6808
18907  6809
18908  680A
18909  680B
18910  680C
18911  680D
18912  680E
18913  680F
18914  6810
18915  6811
18916  6812
18917  6813
18918  6814
18919  6815
18920  6816
18921  6817
18922  6818
18923  6819
18924  681A
18925  681B
18926  681C
18927  681D
18928  681E
18929  681F
18930  6820
18931  6821
18932  6822
18933  6823
18934  6824
18935  6825
18936  6826
18937  6827
18938  6828
18939  6829
18940  682A
18941  682B
18942  682C
18943  682D
18944  682E
18945  682F
18946  6830
18947  6831
18948  6832
18949  6833
18950  6834
18951  6835
18952  6836
18953  6837
18954  6838
18955  6839
18956  683A
18957  683B
18958  683C
18959  683D
18960  683E
18961  683F
18962  6840
18963  6841
18964  6842
18965  6843
18966  6844
18967  6845
18968  6846
18969  6847
18970  6848
18971  6849
18972  684A
18973  684B
18974  684C
18975  684D
18976  684E
18977  684F
18978  6850
18979  6851
18980  6852
18981  6853
18982  6854
18983  6855
18984  6856
18985  6857
18986  6858
18987  6859
18988  685A
18989  685B
18990  685C
18991  685D
18992  685E
18993  685F
18994  6860
18995  6861
18996  6862
18997  6863
18998  6864
18999  6865
19000  6866
19001  6867
19002  6868
19003  6869
19004  686A
19005  686B
19006  686C
19007  686D
19008  686E
19009  686F
19010  6870
19011  6871
19012  6872
19013  6873
19014  6874
19015  6875
19016  6876
19017  6877
19018  6878
19019  6879
19020  687A
19021  687B
19022  687C
19023  687D
19024  687E
19025  687F
19026  6880
19027  6881
19028  6882
19029  6883
19030  6884
19031  6885
19032  6886
19033  6887
19034  6888
19035  6889
19036  688A
19037  688B
19038  688C
19039  688D
19040  688E
19041  688F
19042  6890
19043  6891
19044  6892
19045  6893
19046  6894
19047  6895
19048  6896
19049  6897
19050  6898
19051  6899
19052  689A
19053  689B
19054  689C
19055  689D
19056  689E
19057  689F
19058  68A0
19059  68A1
19060  68A2
19061  68A3
19062  68A4
19063  68A5
19064  68A6
19065  68A7
19066  68A8
19067  68A9
19068  68AA
19069  68AB
19070  68AC
19071  68AD
19072  68AE
19073  68AF
19074  68B0
19075  68B1
19076  68B2
19077  68B3
19078  68B4
19079  68B5
19080  68B6
19081  68B7
19082  68B8
19083  68B9
19084  68BA
19085  68BB
19086  68BC
19087  68BD
19088  68BE
19089  68BF
19090  68C0
19091  68C1
19092  68C2
19093  68C3
19094  68C4
19095  68C5
19096  68C6
19097  68C7
19098  68C8
19099  68C9
19100  68CA
19101  68CB
19102  68CC
19103  68CD
19104  68CE
19105  68CF
19106  68D0
19107  68D1
19108  68D2
19109  68D3
19110  68D4
19111  68D5
19112  68D6
19113  68D7
19114  68D8
19115  68D9
19116  68DA
19117  68DB
19118  68DC
19119  68DD
19120  68DE
19121  68DF
19122  68E0
19123  68E1
19124  68E2
19125  68E3
19126  68E4
19127  68E5
19128  68E6
19129  68E7
19130  68E8
19131  68E9
19132  68EA
19133  68EB
19134  68EC
19135  68ED
19136  68EE
19137  68EF
19138  68F0
19139  68F1
19140  68F2
19141  68F3
19142  68F4
19143  68F5
19144  68F6
19145  68F7
19146  68F8
19147  68F9
19148  68FA
19149  68FB
19150  68FC
19151  68FD
19152  68FE
19153  68FF
19154  6900
19155  6901
19156  6902
19157  6903
19158  6904
19159  6905
19160  6906
19161  6907
19162  6908
19163  6909
19164  690A
19165  690B
19166  690C
19167  690D
19168  690E
19169  690F
19170  6910
19171  6911
19172  6912
19173  6913
19174  6914
19175  6915
19176  6916
19177  6917
19178  6918
19179  6919
19180  691A
19181  691B
19182  691C
19183  691D
19184  691E
19185  691F
19186  6920
19187  6921
19188  6922
19189  6923
19190  6924
19191  6925
19192  6926
19193  6927
19194  6928
19195  6929
19196  692A
19197  692B
19198  692C
19199  692D
19200  692E
19201  692F
19202  6930
19203  6931
19204  6932
19205  6933
19206  6934
19207  6935
19208  6936
19209  6937
19210  6938
19211  6939
19212  693A
19213  693B
19214  693C
19215  693D
19216  693E
19217  693F
19218  6940
19219  6941
19220  6942
19221  6943
19222  6944
19223  6945
19224  6946
19225  6947
19226  6948
19227  6949
019228  000692        
019229  000693  var hFonts[56] ;
019230  000694  var stringsCV[56] := [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], hstrings ;
19231  3518
19232  3519
19233  351A
19234  351B
19235  351C
19236  351D
19237  351E
19238  351F
19239  3520
19240  3521
19241  3522
19242  3523
19243  3524
19244  3525
19245  3526
19246  3527
19247  3528
19248  3529
19249  352A
19250  352B
19251  352C
19252  352D
19253  352E
19254  352F
19255  3530
19256  3531
19257  3532
19258  3533
19259  3534
19260  3535
19261  3536
19262  3537
19263  3538
19264  3539
19265  353A
19266  353B
19267  353C
19268  353D
19269  353E
19270  353F
19271  3540
19272  3541
19273  3542
19274  3543
19275  3544
19276  3545
19277  3546
19278  3547
19279  3548
19280  3549
19281  354A
19282  354B
19283  354C
19284  354D
19285  354E
19286  354F
19287  3550
19288  3551
19289  3552
19290  3553
19291  3554
19292  3555
19293  3556
19294  3557
19295  3558
19296  3559
19297  355A
19298  355B
19299  355C
19300  355D
19301  355E
19302  355F
19303  3560
19304  3561
19305  3562
19306  3563
19307  3564
19308  3565
19309  3566
19310  3567
19311  3568
19312  3569
19313  356A
19314  356B
19315  356C
19316  356D
19317  356E
19318  356F
19319  3570
19320  3571
19321  3572
19322  3573
19323  3574
19324  3575
19325  3576
19326  3577
19327  3578
19328  3579
19329  357A
19330  357B
19331  357C
19332  357D
19333  357E
19334  357F
19335  3580
19336  3581
19337  3582
19338  3583
19339  3584
19340  3585
19341  3586
19342  3587
019343  000695  // Start P2.inc
019344  000696  var oObjects[MaxTotObjects+1] ;                 // address of objects
019345  000697  var CurrentForm ;
019346  000698  var TouchXpos, TouchYpos ;
019347  000699  var InputType, TouchState, CurInputData, pInputIndex ;
019348  000700  var comRX[40], cmd[CMDLenMAX] ;
019349  000701        
019350  000702  var InputCS, OutputCS ;
019351  000703        
019352  000704        
019353  000705        
019354  000706  func seroutCS(var op)
019355  000707      serout(op) ;
019356  000708      OutputCS ^= op ;
019357  000709  endfunc
019358  000710        
019359  000711  func nak0()
019360  000712      serout(NAK) ;
019361  000713      InputCS := 0 ;
019362  000714  endfunc
019363  000715        
019364  000716  func seroutOcs()
019365  000717      serout(OutputCS) ;
019366  000718      OutputCS := 0 ;
019367  000719  endfunc
019368  000720        
019369  000721  func SendReport(var id, var objt, var objn, var val)
019370  000722      seroutCS(id) ;
019371  000723      seroutCS(objt) ;
019372  000724      seroutCS(objn) ;
019373  000725      seroutCS(val >> 8) ; // first 8 bits
019374  000726      seroutCS(val) ;
019375  000727      seroutOcs() ;
019376  000728  endfunc
019377  000729        
019378  000730        
019379  000731  func ReadObject(var ObjectType, var ObjectIdx)
019380  000732      var j, k, Objects ;
019381  000733      Objects := *(oObjects+ObjectType) ;
019382  000734        
019383  000735      j := 2 + ObjectIdx * 2 + Objects ;
019384  000736       if (ObjectType == tForm)
019385  000737          k := CurrentForm ;
019386  000738      else if (ObjectType == tStrings)
019387  000739          k := stringsCV[ObjectIdx];
019388  000740          else
019389  000741          k := img_GetWord(hndl, *j, IMAGE_INDEX);
019390  000742          if (((ObjectType == tWinButton) || (ObjectType == tAniButton) || (ObjectType == tUserButton) || (ObjectType == t4Dbutton)) && (k)) k := 1 ; // this is not correct for blocked buttons and cannot be fixed as we cannot
019391  000743                                                                                                                                                      // determine if button is momentary or not which is needed for correct answer.
019392  000744      endif
019393  000745      SendReport(REPORT_OBJ, ObjectType, ObjectIdx, k) ;
019394  000746  endfunc
019395  000747        
019396  000748        
019397  000749  func WriteObject(var ObjectType, var ObjectIdx, var NewVal)
019398  000750      var i, j, k, Objects ;
019399  000751      ObjectType &= 0x3f ;
019400  000752      if (ObjectType == tForm)
019401  000753          ActivateForm(ObjectIdx) ;
019402  000754      else
019403  000755          Objects := *(oObjects+ObjectType)+ObjectIdx*2+2 ;
019404  000756          i := *(Objects) ;
019405  000757          switch (ObjectType)
019406  000758              case tUserButton :
019407  000759                  j := InputControls[oUserButtons[ObjectIdx+1]] ;
019408  000760                  break ;
019409  000761              default : j := -1 ;
019410  000762          endswitch
019411  000763          if (j != -1)
019412  000764              k := img_GetWord(hndl, i , IMAGE_INDEX) ;
019413  000765              NewVal := NewVal << 1 ;
019414  000766              if (OVF())      // button group index change
019415  000767                  if (*(j+InputData+Ofs_IPD_P1))
019416  000768                      k &= 1 ;    // mask off old group index for momentary
019417  000769                  else
019418  000770                      k &= 3 ;    // mask off old group index for toggle
019419  000771                  endif
019420  000772              else            // normal set
019421  000773                  if (*(j+InputData+Ofs_IPD_P2) != -1) TurnOffButtons(*(j+InputData+Ofs_IPD_P2)) ;
019422  000774                  k &= 0xfffc ;    // retain only group index for state set
019423  000775              endif
019424  000776              NewVal |= k ;
019425  000777          endif
019426  000778           if (ObjectType == tStrings)
019427  000779              PrintStrings(ObjectIdx, NewVal, 0);
019428  000780          else
019429  000781              img_SetWord(hndl, i , IMAGE_INDEX, NewVal); // where state is 0 to 2
019430  000782              img_Show(hndl, i) ; // will only display if form is current
019431  000783          endif
019432  000784      endif
019433  000785  endfunc
019434  000786        
019435  000787  func TurnOffButtons(var group)
019436  000788      var j, k, l;
019437  000789      for (j := 0; j < nInputs; j++)
019438  000790          k := j*IPDatasize ;
019439  000791          if (*(InputData+k+Ofs_IPD_P2) == group)
019440  000792              l := -1 ;
019441  000793               if (*(InputData+k) == tUserButton)
019442  000794                  l := oUserButtons[*(InputData+k+Ofs_IPD_OBJVIDX)/2] ;
019443  000795                  img_SetWord(hndl, l, IMAGE_INDEX, img_GetWord(hndl, l, IMAGE_INDEX) & 0xfffc );
019444  000796                  img_Show(hndl, l);      // only shows on current form
019445  000797              endif
019446  000798          endif
019447  000799      next
019448  000800  endfunc
019449  000801        
019450  000802        
019451  000803        
019452  000804        
019453  000805  func ActivateForm(var newform)
019454  000806      var i, j, *p ;
019455  000807        
019456  000808      if (CurrentForm != -1) // deactivate old form, by disabling all inputs
019457  000809          for (i := FormStartIndex[CurrentForm]; i <= FormEndIndex[CurrentForm]; i++)
019458  000810              if (img_GetWord(hndl, i, IMAGE_TAG))
019459  000811                  img_Disable(hndl,i) ;
019460  000812              endif
019461  000813          next
019462  000814      endif
019463  000815      CurrentForm := newform ;
019464  000816      // display newform image or clear to image color
019465  000817      if (FormBGcolors[CurrentForm] != ColorBGimage)
019466  000818          gfx_Set(BACKGROUND_COLOUR,FormBGcolors[CurrentForm]);
019467  000819          gfx_Cls() ;
019468  000820          DoGFXObjects() ;                                    // display GFX 'widgets'
019469  000821      endif
019470  000822        
019471  000823      // enable inputs
019472  000824      for (i := FormStartIndex[CurrentForm]; i < FormEndIndex[CurrentForm]; i++)
019473  000825          j := img_GetWord(hndl, i, IMAGE_TAG) ;
019474  000826          if (j)
019475  000827              j-- ;
019476  000828              img_SetAttributes(hndl, i, I_STAYONTOP+I_ENABLED);        // make sure this is on top of form, if applicable
019477  000829              //if (j != tKeyboard)
019478  000830              if ((j <= tWinButton) || (j >= t4Dbutton) )               // enable inputs
019479  000831                  img_ClearAttributes(hndl, i, I_TOUCH_DISABLE);        // ensure touch is enabled
019480  000832              endif
019481  000833              img_Show(hndl,i) ; // show initialy, if required
019482  000834              if (j == tForm)
019483  000835                  DoGFXObjects() ;                                    // display GFX 'widgets' for image backgruobds
019484  000836              endif
019485  000837          endif
019486  000838      next
019487  000839      for (i := 0; i < nStrings; i++)
019488  000840          if (stringsCV[i] != -1)
019489  000841              WriteObject(tStrings, i, stringsCV[i]) ;
019490  000842          endif
019491  000843      next
019492  000844        
019493  000845  endfunc
019494  000846        
019495  000847  func UpdateObjects(var newval)
019496  000848      var IPidx, otherOBJ ;
019497  000849      if ( ( img_GetWord(hndl, *(pInputIndex), IMAGE_INDEX) != newval) || (TouchState == Ofs_IPD_RELEASE) ) // only bother if values changed, or release
019498  000850        
019499  000851          img_SetWord(hndl, *(pInputIndex), IMAGE_INDEX, newval);
019500  000852              img_Show(hndl, *(pInputIndex));      // only shows on current form
019501  000853          if ((InputType == t4Dbutton) || (InputType == tUserButton) || (InputType == tWinButton))
019502  000854              if (*(CurInputData+Ofs_IPD_P1))
019503  000855                  newval &= 1;
019504  000856              else
019505  000857                  newval &= 3;
019506  000858              endif
019507  000859              if (newval > 1) newval := 1;
019508  000860          endif
019509  000861          IPidx := *(CurInputData+TouchState) ;
019510  000862          while(IPidx != 0)
019511  000863              otherOBJ := IPidx + InputData;
019512  000864              if (*(otherOBJ) == OT_REPORT)
019513  000865          SendReport(REPORT_EVENT, InputType, *(otherOBJ+Ofs_IPD_OBJVIDX), newval) ;
019514  000866              else if (*(otherOBJ) == OT_MAGIC)
019515  000867                  IPidx := *(otherOBJ+Ofs_IPD_P5) ;
019516  000868                  IPidx(newval) ;
019517  000869              else if (TouchState == *(otherOBJ+Ofs_IPD_P4))
019518  000870                  if (*(otherOBJ) == OT_ACTIVATE)
019519  000871                      ActivateForm(*(otherOBJ+Ofs_IPD_P2) ) ;
019520  000872                      InputType := tForm ;
019521  000873                  else if (*(otherOBJ) == OT_SETCONST)
019522  000874                      newval := *(otherOBJ+Ofs_IPD_P3) ;
019523  000875                      WriteObject(*(otherOBJ+Ofs_IPD_P1), *(otherOBJ+Ofs_IPD_P2), newval) ;
019524  000876                  else if (*(otherOBJ) == OT_SETANOTHER)
019525  000877                      WriteObject(*(otherOBJ+Ofs_IPD_P1), *(otherOBJ+Ofs_IPD_P2), newval) ;
019526  000878                  else if (*(otherOBJ) == OT_PREVFRAME)
019527  000879                      if (img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX))
019528  000880                          WriteObject(*(otherOBJ+Ofs_IPD_P5),*(otherOBJ+Ofs_IPD_P2),img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX)-1) ;
019529  000881                      endif
019530  000882                      newval := img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX) ;
019531  000883                  else if (*(otherOBJ) == OT_NEXTFRAME)
019532  000884                      if (img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX) < *(otherOBJ+Ofs_IPD_P3))
019533  000885                          WriteObject(*(otherOBJ+Ofs_IPD_P5),*(otherOBJ+Ofs_IPD_P2),img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX)+1) ;
019534  000886                      endif
019535  000887                      newval := img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX) ;
019536  000888                  else if (*(otherOBJ) == OT_PREVSTRING)
019537  000889                      if (stringsCV[*(otherOBJ+Ofs_IPD_P2)])
019538  000890                          WriteObject(tStrings,*(otherOBJ+Ofs_IPD_P2),stringsCV[*(otherOBJ+Ofs_IPD_P2)]-1) ;
019539  000891                      endif
019540  000892                  else if (*(otherOBJ) == OT_NEXTSTRING)
019541  000893                      if (stringsCV[*(otherOBJ+Ofs_IPD_P2)] < *(otherOBJ+Ofs_IPD_P3)) // fix IPD_P2 not filled in yet
019542  000894                          WriteObject(tStrings,*(otherOBJ+Ofs_IPD_P2),stringsCV[*(otherOBJ+Ofs_IPD_P2)]+1) ;
019543  000895                      endif
019544  000896                  endif
019545  000897              endif
019546  000898              IPidx := *(otherOBJ+TouchState) ;
019547  000899          wend
019548  000900      endif
019549  000901  endfunc
019550  000902        
019551  000903  // End P2.inc
019552  000904  func DoGFXObjects()
019553  000905  endfunc
019554  000906        
019555  000907  // Start P3.inc
019556  000908  func main()
019557  000909      var comTX[50], cmdi, i, j, ImageTouched, TouchStatus, oldn ;
019558  000910        
019559  000911        
019560  000912      gfx_ScreenMode(LANDSCAPE) ;
019561  000913        
019562  000914      putstr("Mounting...\n");
019563  000915      if (!(file_Mount()))
019564  000916          while(!(file_Mount()))
019565  000917              putstr("Drive not mounted...");
019566  000918              pause(200);
019567  000919              gfx_Cls();
019568  000920              pause(200);
019569  000921          wend
019570  000922      endif
019571  000923  //    gfx_MoveTo(0, 0);
019572  000924  //    print(mem_Heap()," ") ;
019573  000925  //    gfx_TransparentColour(0x0020);
019574  000926  //    gfx_Transparency(ON);
019575  000927        
019576  000928      // open image control
019577  000929      hndl := file_LoadImageControl("BCN3D_~1.dat", "BCN3D_~1.gci", 1);
019578  000930        
019579  000931      // init 'constants'
019580  000932  // End P3.inc
019581  000933        
019582  000934      oObjects[tDipSwitch] := oDipSwitchs ;
019583  000935      oObjects[tKnob] := oKnobs ;
019584  000936      oObjects[tRockerSwitch] := oRockerSwitchs ;
019585  000937      oObjects[tRotarySwitch] := oRotarySwitchs ;
019586  000938      oObjects[tGSlider] := oGSliders ;
019587  000939      oObjects[tTrackbar] := oTrackbars ;
019588  000940      oObjects[tWinButton] := oWinButtons ;
019589  000941      oObjects[tAngularmeter] := oAngularmeters ;
019590  000942      oObjects[tCoolgauge] := oCoolgauges ;
019591  000943      oObjects[tCustomdigits] := oCustomdigitss ;
019592  000944      oObjects[tForm] := oForms ;
019593  000945      oObjects[tGauge] := oGauges ;
019594  000946      oObjects[tImage] := oImages ;
019595  000947      oObjects[tKeyboard] := oKeyboards ;
019596  000948      oObjects[tLed] := oLeds ;
019597  000949      oObjects[tLeddigits] := oLeddigitss ;
019598  000950      oObjects[tMeter] := oMeters ;
019599  000951      oObjects[tStrings] := oStringss ;
019600  000952      oObjects[tThermometer] := oThermometers ;
019601  000953      oObjects[tUserled] := oUserleds ;
019602  000954      oObjects[tVideo] := oVideos ;
019603  000955      oObjects[tStaticText] := oStaticTexts ;
019604  000956      oObjects[tSounds] := oSoundss ;
019605  000957      oObjects[tTimer] := oTimers ;
019606  000958      oObjects[tSpectrum] := oSpectrums ;
019607  000959      oObjects[tTank] := oTanks ;
019608  000960      oObjects[tUserImages] := oUserImagess ;
019609  000961      oObjects[tPinOutput] := oPinOutputs ;
019610  000962      oObjects[tPinInput] := oPinInputs ;
019611  000963      oObjects[t4Dbutton] := o4Dbuttons ;
019612  000964      oObjects[tAniButton] := oAniButtons ;
019613  000965      oObjects[tColorPicker] := oColorPickers ;
019614  000966      oObjects[tUserButton] := oUserButtons ;
019615  000967      hFonts[1] := file_LoadImageControl("BCN3D_~1.d02", "BCN3D_~1.g02", 1)  ;
019616  000968      hFonts[2] := file_LoadImageControl("BCN3D_~1.d0C", "BCN3D_~1.g0C", 1)  ;
019617  000969      hFonts[3] := file_LoadImageControl("BCN3D_~1.d01", "BCN3D_~1.g01", 1)  ;
019618  000970      hFonts[5] := file_LoadImageControl("BCN3D_~1.d0M", "BCN3D_~1.g0M", 1)  ;
019619  000971      hFonts[28] := file_LoadImageControl("BCN3D_~1.d0Y", "BCN3D_~1.g0Y", 1)  ;
019620  000972      hFonts[40] := file_LoadImageControl("BCN3D_~1.d0J", "BCN3D_~1.g0J", 1)  ;
019621  000973      hFonts[46] := file_LoadImageControl("BCN3D_~1.d0Z", "BCN3D_~1.g0Z", 1)  ;
019622  000974      hFonts[0] := hFonts[2] ;
019623  000975      hFonts[4] := hFonts[2] ;
019624  000976      hFonts[6] := hFonts[2] ;
019625  000977      hFonts[7] := hFonts[1] ;
019626  000978      hFonts[8] := hFonts[1] ;
019627  000979      hFonts[9] := hFonts[2] ;
019628  000980      hFonts[10] := hFonts[5] ;
019629  000981      hFonts[11] := hFonts[2] ;
019630  000982      hFonts[12] := hFonts[1] ;
019631  000983      hFonts[13] := hFonts[2] ;
019632  000984      hFonts[14] := hFonts[2] ;
019633  000985      hFonts[15] := hFonts[2] ;
019634  000986      hFonts[16] := hFonts[1] ;
019635  000987      hFonts[17] := hFonts[5] ;
019636  000988      hFonts[18] := hFonts[2] ;
019637  000989      hFonts[19] := hFonts[2] ;
019638  000990      hFonts[20] := hFonts[2] ;
019639  000991      hFonts[21] := hFonts[2] ;
019640  000992      hFonts[22] := hFonts[2] ;
019641  000993      hFonts[23] := hFonts[1] ;
019642  000994      hFonts[24] := hFonts[1] ;
019643  000995      hFonts[25] := hFonts[1] ;
019644  000996      hFonts[26] := hFonts[1] ;
019645  000997      hFonts[27] := hFonts[2] ;
019646  000998      hFonts[29] := hFonts[2] ;
019647  000999      hFonts[30] := hFonts[1] ;
019648  001000      hFonts[31] := hFonts[2] ;
019649  001001      hFonts[32] := hFonts[2] ;
019650  001002      hFonts[33] := hFonts[2] ;
019651  001003      hFonts[34] := hFonts[2] ;
019652  001004      hFonts[35] := hFonts[2] ;
019653  001005      hFonts[36] := hFonts[2] ;
019654  001006      hFonts[37] := hFonts[2] ;
019655  001007      hFonts[38] := hFonts[2] ;
019656  001008      hFonts[39] := hFonts[2] ;
019657  001009      hFonts[41] := hFonts[40] ;
019658  001010      hFonts[42] := hFonts[40] ;
019659  001011      hFonts[43] := hFonts[46] ;
019660  001012      hFonts[44] := hFonts[2] ;
019661  001013      hFonts[45] := hFonts[46] ;
019662  001014      hFonts[47] := hFonts[46] ;
019663  001015      hFonts[48] := hFonts[40] ;
019664  001016      hFonts[49] := hFonts[2] ;
019665  001017      hFonts[50] := hFonts[1] ;
019666  001018      hFonts[51] := hFonts[1] ;
019667  001019      hFonts[52] := hFonts[2] ;
019668  001020      hFonts[53] := hFonts[40] ;
019669  001021      hFonts[55] := hFonts[40] ;
019670  001022  // Start P4.inc
019671  001023      hstrings := file_Open("BCN3D_~1.txf", 'r') ; // Open handle to access uSD strings, uncomment if required
019672  001024      // init comms
019673  001025      com_Init(comRX,CMDLenMAX,0);
019674  001026      com_SetBaud(COM0,19886);
019675  001027      com_TXbuffer(comTX, 100, 0);
019676  001028      snd_BufSize(2) ;
019677  001029      // tag 'real' objects
019678  001030      for (i := 0; i <= MaxTotObjects; i++)
019679  001031          if (   (i != tSounds)
019680  001032              && (i != tTimer)
019681  001033              && (i != tPinOutput)
019682  001034              && (i != tPinInput) )
019683  001035              TouchXpos := oObjects[i] ;
019684  001036              TouchYpos := *(TouchXpos) ;
019685  001037              for (ImageTouched := 1; ImageTouched <= TouchYpos; ImageTouched++)
019686  001038                  oldn := *(TouchXpos+ImageTouched*2) ;
019687  001039                  img_SetAttributes(hndl, oldn, I_TOUCH_DISABLE);  // ensure touch is enabled
019688  001040                  if (oldn != -1)
019689  001041                      img_SetWord(hndl, oldn, IMAGE_TAG, i+1);
019690  001042                      img_Disable(hndl, oldn) ;
019691  001043                  endif
019692  001044              next
019693  001045          endif
019694  001046      next
019695  001047        
019696  001048      // display initial form
019697  001049      CurrentForm := -1 ;
019698  001050  // End P4.inc
019699  001051  // Start P5.inc
019700  001052      ActivateForm(0) ; // need to change this according to first actual form
019701  001053        
019702  001054  // End P5.inc
019703  001055  // Start P6.inc
019704  001056      touch_Set(TOUCH_ENABLE);                            // enable the touch screen
019705  001057      oldn := -1 ;
019706  001058      repeat
019707  001059        
019708  001060          // check comms for command, how to NAK invalid command
019709  001061          if (com_Count() != 0)
019710  001062              i := serin() ;
019711  001063              InputCS ^= i ;               // update checksum
019712  001064              if (   (cmdi > 2)
019713  001065                  && (cmd[0] == WRITE_STRU) )
019714  001066                  j := (cmdi-1) >> 1 + 2 ;
019715  001067                  if (j == CMDLenMAX)    // max length exceeded
019716  001068                      nak0() ;
019717  001069                      cmdi := -1 ;
019718  001070                  else if (cmdi & 1)
019719  001071                      cmd[j] := i ;
019720  001072                      if (cmd[2] == 0)    // if string complete
019721  001073                          if (InputCS)
019722  001074                              nak0() ;
019723  001075                          else
019724  001076                              if (cmd[0] == WRITE_STRU)
019725  001077                              cmd[j] := 0 ;                     // terminate it
019726  001078                              PrintStrings(cmd[1], &cmd[3], 1) ;
019727  001079                              serout(ACK) ;
019728  001080                              else
019729  001081                              endif
019730  001082                          endif
019731  001083                          cmdi := -1 ;
019732  001084                      endif
019733  001085                  else
019734  001086                      cmd[j] := cmd[j] << 8 + i ;
019735  001087                      cmd[2]-- ;          // dec length
019736  001088                  endif
019737  001089                  cmdi++ ;
019738  001090              else // not unicode string
019739  001091                  cmd[cmdi++] := i ;
019740  001092                   if (cmd[0] == WRITE_STR)                  // Ansi String
019741  001093                      if (cmdi == CMDLenMAX)      // max length exceeded
019742  001094                          nak0() ;
019743  001095                          cmdi := 0 ;
019744  001096                      else if (cmdi > 2)
019745  001097                          if (cmd[2] == -1)
019746  001098                              if (InputCS)
019747  001099                                  nak0() ;
019748  001100                              else
019749  001101                                  if (cmd[0] == WRITE_STR)
019750  001102                                  cmd[cmdi-1] := 0 ;                     // terminate it
019751  001103                                  PrintStrings(cmd[1], &cmd[3], 1) ;
019752  001104                                  serout(ACK) ;
019753  001105                                  else
019754  001106                                  endif
019755  001107                              endif
019756  001108                              cmdi := 0 ;
019757  001109                          else
019758  001110                              cmd[2]-- ;          // dec length
019759  001111                          endif
019760  001112                      endif
019761  001113                  else if (   (cmd[0] == READ_OBJ)
019762  001114                           && (cmdi == 4)         )
019763  001115                      if (InputCS)
019764  001116                          nak0() ;
019765  001117                      else
019766  001118                          ReadObject(cmd[1], cmd[2]) ;
019767  001119                      endif
019768  001120                      cmdi := 0 ;
019769  001121                  else if (   (cmd[0] == WRITE_OBJ)    // 6 byte write command (gen option)
019770  001122                           && (cmdi == 6)          )
019771  001123                      if (InputCS)
019772  001124                          nak0() ;
019773  001125                      else
019774  001126                          WriteObject(cmd[1], cmd[2], cmd[3] << 8 + cmd[4]) ;
019775  001127                          serout(ACK) ;
019776  001128                      endif
019777  001129                      cmdi := 0 ;
019778  001130                  else if (   (cmd[0] == WRITE_CONTRAST)
019779  001131                           && (cmdi == 3)         )
019780  001132                      if (InputCS)
019781  001133                          nak0() ;
019782  001134                      else
019783  001135                          gfx_Contrast(cmd[1]) ;
019784  001136                          serout(ACK) ;
019785  001137                      endif
019786  001138                      cmdi := 0 ;
019787  001139                  else if (cmdi == 6)    // we have 6 bytes and we've gotten here -> something wrong
019788  001140                      nak0() ;
019789  001141                      cmdi := 0 ;
019790  001142                  endif
019791  001143              endif   // not unicode string
019792  001144          endif   // a character is available
019793  001145        
019794  001146        
019795  001147      // touch code processing
019796  001148        
019797  001149          TouchStatus := touch_Get(TOUCH_STATUS);               // get touchscreen status
019798  001150          ImageTouched := img_Touched(hndl,-1) ;
019799  001151          if ((TouchStatus == TOUCH_PRESSED) || (TouchStatus == TOUCH_RELEASED) || (TouchStatus == TOUCH_MOVING))
019800  001152              if ((TouchStatus != TOUCH_RELEASED) && (ImageTouched != oldn) && (oldn != -1))
019801  001153                  TouchStatus := TOUCH_RELEASED ;       // simulate release if we move off object
019802  001154              endif
019803  001155              if (TouchStatus != TOUCH_RELEASED)        // if not released
019804  001156                  if (oldn != -1)
019805  001157                      ImageTouched := oldn ;
019806  001158                  else
019807  001159                      if (oldn != ImageTouched)
019808  001160                  oldn := ImageTouched ;
019809  001161                          TouchStatus := TOUCH_PRESSED ;
019810  001162                      endif
019811  001163                  endif
019812  001164                  TouchXpos  := touch_Get(TOUCH_GETX);
019813  001165                  TouchYpos  := touch_Get(TOUCH_GETY);
019814  001166                  TouchState := Ofs_IPD_DOWN ;
019815  001167              else
019816  001168                  ImageTouched := oldn ;                     // simulate release of what we touched
019817  001169                  oldn := -1 ;                    // prevent double release
019818  001170                  TouchState := Ofs_IPD_RELEASE ;
019819  001171              endif
019820  001172              if (ImageTouched != -1)
019821  001173                          CurInputData := InputControls[ImageTouched] + InputData;
019822  001174                          InputType := *(CurInputData) ;
019823  001175                          i := InputType ;
019824  001176                          if (InputType >= t4Dbutton) i -= 23 ; // adjust to ensure next in gosub
019825  001177                          gosub (i), (cDipswitch, cKnob, cRockerswitch, cRotaryswitch, cSlider, cTrackbar, cWinbutton, c4DButton, cAniButton, cColorPicker, cUserButton) ;
019826  001178              endif
019827  001179          endif
019828  001180   //       if ((n != -1) && (oldn == -1)) oldn := n ;    // save what we touched in case we move off it
019829  001181        
019830  001182          sys_EventsResume() ;
019831  001183      forever
019832  001184        
019833  001185  cDipswitch:
019834  001186        
019835  001187  cKnob:
019836  001188        
019837  001189  cRockerswitch:
019838  001190        
019839  001191  cRotaryswitch:
019840  001192        
019841  001193  cSlider:
019842  001194  cTrackbar:
019843  001195        
019844  001196  c4DButton:
019845  001197  cUserButton:
019846  001198      pInputIndex := oUserButtons + *(CurInputData+Ofs_IPD_OBJVIDX) ;
019847  001199      goto gbutton ;
019848  001200  cWinbutton:
019849  001201  gbutton:
019850  001202      i := img_GetWord(hndl, *(pInputIndex), IMAGE_INDEX) ; // current state
019851  001203      if (*(CurInputData+Ofs_IPD_P1))                                 // momentary, reports 0, but should report 1
019852  001204          if (TouchStatus == TOUCH_RELEASED)
019853  001205              i &= 0xfffe ;
019854  001206              TouchState == Ofs_IPD_DOWN ;
019855  001207          else
019856  001208              i |= 1 ;
019857  001209              TouchState == Ofs_IPD_RELEASE ;
019858  001210          endif
019859  001211      else if (*(CurInputData+Ofs_IPD_P2) == -1)                      // Toggle, reports 0+2, but should report 0+1
019860  001212          if (TouchStatus == TOUCH_RELEASED)                     // only truly change on release
019861  001213              if ((i & 3) == 3)
019862  001214                  i &= 0xfffc ;
019863  001215              else
019864  001216                  i++ ;
019865  001217              endif
019866  001218          else
019867  001219              i |= 1 ;                                      // make down regardless of current state
019868  001220          endif
019869  001221      else                        // group action, up all other buttons on touch press, reports 0 for button down
019870  001222          if (TouchStatus == TOUCH_PRESSED)                     // only truly change on release
019871  001223              TurnOffButtons(*(CurInputData+Ofs_IPD_P2)) ;
019872  001224          endif
019873  001225          i := (i & 0xfffc) | 2 ;
019874  001226      endif
019875  001227        
019876  001228      UpdateObjects(i) ;
019877  001229  endsub ;
019878  001230        
019879  001231  cAniButton:
019880  001232        
019881  001233  cColorPicker:
019882  001234        
019883  001235  endfunc
019884  001236  // End P6.inc
Notice: Check that the function called via pointer  'IPidx' requires 1 argument (line 868 file:BCN3D_SIGMAX.4DGenieS)
Notice: local var 'p' in func 'ActivateForm' is never used (line 806 file:BCN3D_SIGMAX.4DGenieS)


Symbol Table:
name                             decimal         hex
__MAXBANKS                             6  0x00000006 (const dword)  (not used)
__MAXMEM                           32768  0x00008000 (const dword)  (usage 1)
__MAXPROG                          32750  0x00007fee (const dword)  (usage 1)
__PLATFORM                             3  0x00000003 (const dword)  (not used)
__reserved10                        -111  0xffffff91 (PmmC func) args[0] r=0  (not used)
__reserved13                        -123  0xffffff85 (PmmC func) args[0] r=0  (not used)
__reserved14                        -124  0xffffff84 (PmmC func) args[0] r=0  (not used)
__reserved17                        -201  0xffffff37 (PmmC func) args[0] r=0  (not used)
__reserved18                        -202  0xffffff36 (PmmC func) args[0] r=0  (not used)
__reserved19                        -203  0xffffff35 (PmmC func) args[0] r=0  (not used)
__reserved20                        -204  0xffffff34 (PmmC func) args[0] r=0  (not used)
__reserved21                        -205  0xffffff33 (PmmC func) args[0] r=0  (not used)
__reserved22                        -206  0xffffff32 (PmmC func) args[0] r=0  (not used)
__reserved23                        -220  0xffffff24 (PmmC func) args[0] r=0  (not used)
__reserved24                        -221  0xffffff23 (PmmC func) args[0] r=0  (not used)
__reserved25                        -222  0xffffff22 (PmmC func) args[0] r=0  (not used)
__reserved26                        -223  0xffffff21 (PmmC func) args[0] r=0  (not used)
__reserved3                          -69  0xffffffbb (PmmC func) args[0] r=0  (not used)
__reserved30                        -283  0xfffffee5 (PmmC func) args[0] r=0  (not used)
__reserved4                          -70  0xffffffba (PmmC func) args[0] r=0  (not used)
__reserved42                        -373  0xfffffe8b (PmmC func) args[0] r=0  (not used)
__reserved43                        -387  0xfffffe7d (PmmC func) args[0] r=0  (not used)
__reserved44                        -388  0xfffffe7c (PmmC func) args[0] r=0  (not used)
__reserved45                        -389  0xfffffe7b (PmmC func) args[0] r=0  (not used)
__reserved46                        -390  0xfffffe7a (PmmC func) args[0] r=0  (not used)
__reserved5                          -76  0xffffffb4 (PmmC func) args[0] r=0  (not used)
__reserved51                        -411  0xfffffe65 (PmmC func) args[0] r=0  (not used)
__reserved52                        -412  0xfffffe64 (PmmC func) args[0] r=0  (not used)
__reserved53                        -422  0xfffffe5a (PmmC func) args[0] r=0  (not used)
__reserved54                        -423  0xfffffe59 (PmmC func) args[0] r=0  (not used)
__reserved57                        -457  0xfffffe37 (PmmC func) args[0] r=0  (not used)
__reserved58                        -458  0xfffffe36 (PmmC func) args[0] r=0  (not used)
__reserved6                          -77  0xffffffb3 (PmmC func) args[0] r=0  (not used)
__reserved60                        -467  0xfffffe2d (PmmC func) args[0] r=0  (not used)
__reserved61                        -468  0xfffffe2c (PmmC func) args[0] r=0  (not used)
__reserved62                        -469  0xfffffe2b (PmmC func) args[0] r=0  (not used)
__reserved63                        -490  0xfffffe16 (PmmC func) args[0] r=0  (not used)
__reserved64                        -491  0xfffffe15 (PmmC func) args[0] r=0  (not used)
__reserved65                        -492  0xfffffe14 (PmmC func) args[0] r=0  (not used)
__reserved66                        -493  0xfffffe13 (PmmC func) args[0] r=0  (not used)
__reserved68                        -509  0xfffffe03 (PmmC func) args[0] r=0  (not used)
__reserved69                        -510  0xfffffe02 (PmmC func) args[0] r=0  (not used)
__reserved70                        -511  0xfffffe01 (PmmC func) args[0] r=0  (not used)
__reserved72                        -520  0xfffffdf8 (PmmC func) args[0] r=0  (not used)
__reserved77                        -526  0xfffffdf2 (PmmC func) args[0] r=0  (not used)
__reserved78                        -527  0xfffffdf1 (PmmC func) args[0] r=0  (not used)
__reserved85                        -536  0xfffffde8 (PmmC func) args[0] r=0  (not used)
__reserved86                        -537  0xfffffde7 (PmmC func) args[0] r=0  (not used)
__reserved87                        -570  0xfffffdc6 (PmmC func) args[0] r=0  (not used)
__reserved88                        -571  0xfffffdc5 (PmmC func) args[0] r=0  (not used)
__reserved89                        -572  0xfffffdc4 (PmmC func) args[0] r=0  (not used)
__reserved9                         -110  0xffffff92 (PmmC func) args[0] r=0  (not used)
__translate                           -8  0xfffffff8 (PmmC func) args[4] r=1  (not used)
ABS                                  -53  0xffffffcb (PmmC func) args[1] r=1  (not used)
ACK                                    6  0x00000006 (const dword)  (usage 12)
ActivateForm                       16513  0x00004081 (User func) args[1] r=0  (usage 9)
ALICEBLUE                          63455  0x0000f7df (const dword)  (not used)
ALL                                65535  0x0000ffff (const dword)  (not used)
ana_HS                              -533  0xfffffdeb (PmmC func) args[7] r=0  (not used)
ANTIQUEWHITE                       65370  0x0000ff5a (const dword)  (not used)
APPEND                                 0  0x00000000 (const dword)  (not used)
AQUA                                2047  0x000007ff (const dword)  (not used)
AQUAMARINE                         32762  0x00007ffa (const dword)  (not used)
AUDIO_ENABLE                          17  0x00000011 (const dword)  (not used)
AZURE                              63487  0x0000f7ff (const dword)  (not used)
BACKGROUND_COLOUR                     17  0x00000011 (const dword)  (usage 3)
BAUD_110                               0  0x00000000 (const dword)  (not used)
BAUD_115200                           13  0x0000000d (const dword)  (not used)
BAUD_1200                              3  0x00000003 (const dword)  (not used)
BAUD_128000                           14  0x0000000e (const dword)  (not used)
BAUD_14400                             7  0x00000007 (const dword)  (not used)
BAUD_19200                             8  0x00000008 (const dword)  (not used)
BAUD_2400                              4  0x00000004 (const dword)  (not used)
BAUD_256000                           15  0x0000000f (const dword)  (not used)
BAUD_300                               1  0x00000001 (const dword)  (not used)
BAUD_300000                           16  0x00000010 (const dword)  (not used)
BAUD_31250                             9  0x00000009 (const dword)  (not used)
BAUD_375000                           17  0x00000011 (const dword)  (not used)
BAUD_38400                            10  0x0000000a (const dword)  (not used)
BAUD_4800                              5  0x00000005 (const dword)  (not used)
BAUD_500000                           18  0x00000012 (const dword)  (not used)
BAUD_56000                            11  0x0000000b (const dword)  (not used)
BAUD_57600                            12  0x0000000c (const dword)  (not used)
BAUD_600                               2  0x00000002 (const dword)  (not used)
BAUD_600000                           19  0x00000013 (const dword)  (not used)
BAUD_9600                              6  0x00000006 (const dword)  (not used)
BEIGE                              63419  0x0000f7bb (const dword)  (not used)
BEVEL_RADIUS                          27  0x0000001b (const dword)  (not used)
BEVEL_SHADOW                          29  0x0000001d (const dword)  (not used)
BEVEL_WIDTH                           28  0x0000001c (const dword)  (not used)
BIN                                    2  0x00000002 (const dword)  (not used)
BIN1                                 258  0x00000102 (const dword)  (not used)
BIN10                               2562  0x00000a02 (const dword)  (not used)
BIN10Z                              6658  0x00001a02 (const dword)  (not used)
BIN10ZB                            10754  0x00002a02 (const dword)  (not used)
BIN11                               2818  0x00000b02 (const dword)  (not used)
BIN11Z                              6914  0x00001b02 (const dword)  (not used)
BIN11ZB                            11010  0x00002b02 (const dword)  (not used)
BIN12                               3074  0x00000c02 (const dword)  (not used)
BIN12Z                              7170  0x00001c02 (const dword)  (not used)
BIN12ZB                            11266  0x00002c02 (const dword)  (not used)
BIN13                               3330  0x00000d02 (const dword)  (not used)
BIN13Z                              7426  0x00001d02 (const dword)  (not used)
BIN13ZB                            11522  0x00002d02 (const dword)  (not used)
BIN14                               3586  0x00000e02 (const dword)  (not used)
BIN14Z                              7682  0x00001e02 (const dword)  (not used)
BIN14ZB                            11778  0x00002e02 (const dword)  (not used)
BIN15                               3842  0x00000f02 (const dword)  (not used)
BIN15Z                              7938  0x00001f02 (const dword)  (not used)
BIN15ZB                            12034  0x00002f02 (const dword)  (not used)
BIN16                                  2  0x00000002 (const dword)  (not used)
BIN16Z                              4098  0x00001002 (const dword)  (not used)
BIN16ZB                             8194  0x00002002 (const dword)  (not used)
BIN1Z                               4354  0x00001102 (const dword)  (not used)
BIN1ZB                              8450  0x00002102 (const dword)  (not used)
BIN2                                 514  0x00000202 (const dword)  (not used)
BIN2Z                               4610  0x00001202 (const dword)  (not used)
BIN2ZB                              8706  0x00002202 (const dword)  (not used)
BIN3                                 770  0x00000302 (const dword)  (not used)
BIN3Z                               4866  0x00001302 (const dword)  (not used)
BIN3ZB                              8962  0x00002302 (const dword)  (not used)
BIN4                                1026  0x00000402 (const dword)  (not used)
BIN4Z                               5122  0x00001402 (const dword)  (not used)
BIN4ZB                              9218  0x00002402 (const dword)  (not used)
BIN5                                1282  0x00000502 (const dword)  (not used)
BIN5Z                               5378  0x00001502 (const dword)  (not used)
BIN5ZB                              9474  0x00002502 (const dword)  (not used)
BIN6                                1538  0x00000602 (const dword)  (not used)
BIN6Z                               5634  0x00001602 (const dword)  (not used)
BIN6ZB                              9730  0x00002602 (const dword)  (not used)
BIN7                                1794  0x00000702 (const dword)  (not used)
BIN7Z                               5890  0x00001702 (const dword)  (not used)
BIN7ZB                              9986  0x00002702 (const dword)  (not used)
BIN8                                2050  0x00000802 (const dword)  (not used)
BIN8Z                               6146  0x00001802 (const dword)  (not used)
BIN8ZB                             10242  0x00002802 (const dword)  (not used)
BIN9                                2306  0x00000902 (const dword)  (not used)
BIN9Z                               6402  0x00001902 (const dword)  (not used)
BIN9ZB                             10498  0x00002902 (const dword)  (not used)
BINZ                                4098  0x00001002 (const dword)  (not used)
BINZB                               8194  0x00002002 (const dword)  (not used)
BISQUE                             65336  0x0000ff38 (const dword)  (not used)
BLACK                                  0  0x00000000 (const dword)  (usage 114)
BLANCHEDALMOND                     65369  0x0000ff59 (const dword)  (not used)
BLUE                                  31  0x0000001f (const dword)  (not used)
BLUEVIOLET                         35164  0x0000895c (const dword)  (not used)
BOLD                                  16  0x00000010 (const dword)  (not used)
BOTTOM_POS                             5  0x00000005 (const dword)  (not used)
BREAK                              65533  0x0000fffd (const dword)  (not used)
BROWN                              41285  0x0000a145 (const dword)  (not used)
BURLYWOOD                          56784  0x0000ddd0 (const dword)  (not used)
bus_ClearPins                       -119  0xffffff89 (PmmC func) args[1] r=0  (not used)
BUS_RD_PIN                             4  0x00000004 (const dword)  (not used)
bus_Read                            -117  0xffffff8b (PmmC func) args[0] r=1  (not used)
bus_Read8                           -122  0xffffff86 (PmmC func) args[0] r=1  (not used)
bus_SetChangeInterrupt              -120  0xffffff88 (PmmC func) args[2] r=1  (not used)
bus_SetPins                         -118  0xffffff8a (PmmC func) args[1] r=0  (not used)
BUS_WR_PIN                             3  0x00000003 (const dword)  (not used)
bus_Write8                          -121  0xffffff87 (PmmC func) args[1] r=0  (not used)
BUTTON_DOWN                            0  0x00000000 (const dword)  (not used)
BUTTON_UP                              1  0x00000001 (const dword)  (not used)
ByteSwap                             -49  0xffffffcf (PmmC func) args[1] r=1  (not used)
c4DButton                         UNRESOLVED  (not used)
C:\Users\agarciamoreno\Documents\GitHub\BCN3DSigmax-Firmware-dev\Project Files LCD v126\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS    2806  0x00000af6 (const ??? 0)  (not used)
CADETBLUE                          23796  0x00005cf4 (const dword)  (not used)
cAniButton                        UNRESOLVED  (not used)
cColorPicker                      UNRESOLVED  (not used)
cDipswitch                        UNRESOLVED  (not used)
charheight                           -12  0xfffffff4 (PmmC func) args[1] r=1  (not used)
CHARTREUSE                         32736  0x00007fe0 (const dword)  (not used)
charwidth                            -11  0xfffffff5 (PmmC func) args[1] r=1  (not used)
CHECKED                                0  0x00000000 (const dword)  (not used)
CHOCOLATE                          54083  0x0000d343 (const dword)  (not used)
CHR                                  129  0x00000081 (const dword)  (not used)
cKnob                             UNRESOLVED  (not used)
CLIPPING                              19  0x00000013 (const dword)  (not used)
cmd                                  390  0x00000186 (mem) word[80] (global)  (usage 84)
CMDLenMAX                             80  0x00000050 (const dword)  (usage 12)
ColorBGimage                          32  0x00000020 (const dword)  (usage 240)
COLOUR16                               0  0x00000000 (const dword)  (not used)
COLOUR8                                1  0x00000001 (const dword)  (not used)
COM0                               63492  0x0000f804 (const dword)  (usage 3)
COM1                               63493  0x0000f805 (const dword)  (not used)
com1_Count                          -249  0xffffff07 (PmmC func) args[0] r=1  (not used)
com1_Error                          -257  0xfffffeff (PmmC func) args[0] r=1  (not used)
com1_Full                           -253  0xffffff03 (PmmC func) args[0] r=1  (not used)
com1_Init                           -233  0xffffff17 (PmmC func) args[3] r=0  (not used)
com1_InitBrk                        -578  0xfffffdbe (PmmC func) args[3] r=0  (not used)
com1_Reset                          -245  0xffffff0b (PmmC func) args[0] r=0  (not used)
COM1_RX_pin                         -226  0xffffff1e (PmmC func) args[1] r=1  (not used)
com1_RXblock                        -558  0xfffffdd2 (PmmC func) args[2] r=0  (not used)
com1_Sync                           -261  0xfffffefb (PmmC func) args[0] r=1  (not used)
COM1_TX_pin                         -229  0xffffff1b (PmmC func) args[1] r=1  (not used)
com1_TXblock                        -557  0xfffffdd3 (PmmC func) args[2] r=0  (not used)
com1_TXbuffer                       -265  0xfffffef7 (PmmC func) args[3] r=0  (not used)
com1_TXbufferBrk                    -574  0xfffffdc2 (PmmC func) args[3] r=0  (not used)
com1_TXbufferHold                   -277  0xfffffeeb (PmmC func) args[1] r=1  (not used)
com1_TXcount                        -269  0xfffffef3 (PmmC func) args[0] r=1  (not used)
com1_TXemptyEvent                   -273  0xfffffeef (PmmC func) args[1] r=1  (not used)
COM2                               63494  0x0000f806 (const dword)  (not used)
com2_Count                          -250  0xffffff06 (PmmC func) args[0] r=1  (not used)
com2_Error                          -258  0xfffffefe (PmmC func) args[0] r=1  (not used)
com2_Full                           -254  0xffffff02 (PmmC func) args[0] r=1  (not used)
com2_Init                           -234  0xffffff16 (PmmC func) args[3] r=0  (not used)
com2_InitBrk                        -579  0xfffffdbd (PmmC func) args[3] r=0  (not used)
com2_Reset                          -246  0xffffff0a (PmmC func) args[0] r=0  (not used)
COM2_RX_pin                         -227  0xffffff1d (PmmC func) args[1] r=1  (not used)
com2_RXblock                        -560  0xfffffdd0 (PmmC func) args[2] r=0  (not used)
com2_Sync                           -262  0xfffffefa (PmmC func) args[0] r=1  (not used)
COM2_TX_pin                         -230  0xffffff1a (PmmC func) args[1] r=1  (not used)
com2_TXblock                        -559  0xfffffdd1 (PmmC func) args[2] r=0  (not used)
com2_TXbuffer                       -266  0xfffffef6 (PmmC func) args[3] r=0  (not used)
com2_TXbufferBrk                    -575  0xfffffdc1 (PmmC func) args[3] r=0  (not used)
com2_TXbufferHold                   -278  0xfffffeea (PmmC func) args[1] r=1  (not used)
com2_TXcount                        -270  0xfffffef2 (PmmC func) args[0] r=1  (not used)
com2_TXemptyEvent                   -274  0xfffffeee (PmmC func) args[1] r=1  (not used)
COM3                               63495  0x0000f807 (const dword)  (not used)
com3_Count                          -251  0xffffff05 (PmmC func) args[0] r=1  (not used)
com3_Error                          -259  0xfffffefd (PmmC func) args[0] r=1  (not used)
com3_Full                           -255  0xffffff01 (PmmC func) args[0] r=1  (not used)
com3_Init                           -235  0xffffff15 (PmmC func) args[3] r=0  (not used)
com3_InitBrk                        -580  0xfffffdbc (PmmC func) args[3] r=0  (not used)
com3_Reset                          -247  0xffffff09 (PmmC func) args[0] r=0  (not used)
COM3_RX_pin                         -228  0xffffff1c (PmmC func) args[1] r=1  (not used)
com3_RXblock                        -562  0xfffffdce (PmmC func) args[2] r=0  (not used)
com3_Sync                           -263  0xfffffef9 (PmmC func) args[0] r=1  (not used)
COM3_TX_pin                         -231  0xffffff19 (PmmC func) args[1] r=1  (not used)
com3_TXblock                        -561  0xfffffdcf (PmmC func) args[2] r=0  (not used)
com3_TXbuffer                       -267  0xfffffef5 (PmmC func) args[3] r=0  (not used)
com3_TXbufferBrk                    -576  0xfffffdc0 (PmmC func) args[3] r=0  (not used)
com3_TXbufferHold                   -279  0xfffffee9 (PmmC func) args[1] r=1  (not used)
com3_TXcount                        -271  0xfffffef1 (PmmC func) args[0] r=1  (not used)
com3_TXemptyEvent                   -275  0xfffffeed (PmmC func) args[1] r=1  (not used)
com_Count                           -248  0xffffff08 (PmmC func) args[0] r=1  (usage 3)
com_Error                           -256  0xffffff00 (PmmC func) args[0] r=1  (not used)
com_Full                            -252  0xffffff04 (PmmC func) args[0] r=1  (not used)
com_Init                            -232  0xffffff18 (PmmC func) args[3] r=0  (usage 3)
com_InitBrk                         -577  0xfffffdbf (PmmC func) args[3] r=0  (not used)
com_Mode                            -280  0xfffffee8 (PmmC func) args[4] r=1  (not used)
com_Reset                           -244  0xffffff0c (PmmC func) args[0] r=0  (not used)
com_RXblock                         -282  0xfffffee6 (PmmC func) args[2] r=0  (not used)
com_SetBaud                         -225  0xffffff1f (PmmC func) args[2] r=1  (usage 3)
com_Sync                            -260  0xfffffefc (PmmC func) args[0] r=1  (not used)
com_TXblock                         -281  0xfffffee7 (PmmC func) args[2] r=0  (not used)
com_TXbuffer                        -264  0xfffffef8 (PmmC func) args[3] r=0  (usage 3)
com_TXbufferBrk                     -573  0xfffffdc3 (PmmC func) args[3] r=0  (not used)
com_TXbufferHold                    -276  0xfffffeec (PmmC func) args[1] r=1  (not used)
com_TXcount                         -268  0xfffffef4 (PmmC func) args[0] r=1  (not used)
com_TXemptyEvent                    -272  0xfffffef0 (PmmC func) args[1] r=1  (not used)
comRX                                310  0x00000136 (mem) word[40] (global)  (usage 3)
CONTRAST                              25  0x00000019 (const dword)  (not used)
CORAL                              64490  0x0000fbea (const dword)  (not used)
CORNFLOWERBLUE                     25789  0x000064bd (const dword)  (not used)
CORNSILK                           65499  0x0000ffdb (const dword)  (not used)
COS                                  -58  0xffffffc6 (PmmC func) args[1] r=1  (not used)
COUNT_EDGE                             3  0x00000003 (const dword)  (not used)
COUNT_FALL                             2  0x00000002 (const dword)  (not used)
COUNT_OFF                              0  0x00000000 (const dword)  (not used)
COUNT_RISE                             1  0x00000001 (const dword)  (not used)
crc_16                              -567  0xfffffdc9 (PmmC func) args[2] r=1  (not used)
crc_CCITT                           -569  0xfffffdc7 (PmmC func) args[3] r=1  (not used)
crc_CSUM_8                          -566  0xfffffdca (PmmC func) args[2] r=1  (not used)
crc_MODBUS                          -568  0xfffffdc8 (PmmC func) args[2] r=1  (not used)
CRIMSON                            55463  0x0000d8a7 (const dword)  (not used)
cRockerswitch                     UNRESOLVED  (not used)
cRotaryswitch                     UNRESOLVED  (not used)
cSlider                           UNRESOLVED  (not used)
cTrackbar                         UNRESOLVED  (not used)
CurInputData                         306  0x00000132 (mem) word (global)  (usage 24)
CurrentForm                          296  0x00000128 (mem) word (global)  (usage 42)
cUserButton                       UNRESOLVED  (not used)
cWinbutton                        UNRESOLVED  (not used)
CY                                   -64  0xffffffc0 (PmmC func) args[0] r=1  (not used)
CYAN                                2047  0x000007ff (const dword)  (not used)
DARKBLUE                              17  0x00000011 (const dword)  (not used)
DARKCYAN                            1105  0x00000451 (const dword)  (not used)
DARKGOLDENROD                      48161  0x0000bc21 (const dword)  (not used)
DARKGRAY                           44373  0x0000ad55 (const dword)  (not used)
DARKGREEN                            800  0x00000320 (const dword)  (not used)
DARKKHAKI                          48557  0x0000bdad (const dword)  (not used)
DARKMAGENTA                        34833  0x00008811 (const dword)  (not used)
DARKOLIVEGREEN                     21317  0x00005345 (const dword)  (not used)
DARKORANGE                         64608  0x0000fc60 (const dword)  (not used)
DARKORCHID                         39321  0x00009999 (const dword)  (not used)
DARKRED                            34816  0x00008800 (const dword)  (not used)
DARKSALMON                         60591  0x0000ecaf (const dword)  (not used)
DARKSEAGREEN                       36337  0x00008df1 (const dword)  (not used)
DARKSLATEBLUE                      18929  0x000049f1 (const dword)  (not used)
DARKSLATEGRAY                      10857  0x00002a69 (const dword)  (not used)
DARKTURQUOISE                       1658  0x0000067a (const dword)  (not used)
DARKVIOLET                         36890  0x0000901a (const dword)  (not used)
DEBUG_MODE                            64  0x00000040 (const dword)  (not used)
DEC                                 1290  0x0000050a (const dword)  (not used)
DEC1                                 266  0x0000010a (const dword)  (not used)
DEC1Z                               4362  0x0000110a (const dword)  (not used)
DEC1ZB                              8458  0x0000210a (const dword)  (not used)
DEC2                                 522  0x0000020a (const dword)  (not used)
DEC2Z                               4618  0x0000120a (const dword)  (not used)
DEC2ZB                              8714  0x0000220a (const dword)  (not used)
DEC3                                 778  0x0000030a (const dword)  (not used)
DEC3Z                               4874  0x0000130a (const dword)  (not used)
DEC3ZB                              8970  0x0000230a (const dword)  (not used)
DEC4                                1034  0x0000040a (const dword)  (not used)
DEC4Z                               5130  0x0000140a (const dword)  (not used)
DEC4ZB                              9226  0x0000240a (const dword)  (not used)
DEC5                                1290  0x0000050a (const dword)  (not used)
DEC5Z                               5386  0x0000150a (const dword)  (not used)
DEC5ZB                              9482  0x0000250a (const dword)  (not used)
DECZ                                5386  0x0000150a (const dword)  (not used)
DECZB                               9482  0x0000250a (const dword)  (not used)
DEEPPINK                           63666  0x0000f8b2 (const dword)  (not used)
DEEPSKYBLUE                         1535  0x000005ff (const dword)  (not used)
DIABLO                                 3  0x00000003 (const dword)  (usage 3)
DIMGRAY                            27469  0x00006b4d (const dword)  (not used)
DISABLE                                0  0x00000000 (const dword)  (not used)
DISK_BUF                              15  0x0000000f (const dword)  (not used)
DISK_DATA_HI                           7  0x00000007 (const dword)  (not used)
DISK_DATA_LO                           6  0x00000006 (const dword)  (not used)
DISK_FAT_HI                            3  0x00000003 (const dword)  (not used)
DISK_FAT_LO                            2  0x00000002 (const dword)  (not used)
DISK_FATCOPIES                        12  0x0000000c (const dword)  (not used)
DISK_FATSIZE                          11  0x0000000b (const dword)  (not used)
DISK_FIRST_SECT_HI                     1  0x00000001 (const dword)  (not used)
DISK_FIRST_SECT_LO                     0  0x00000000 (const dword)  (not used)
DISK_MAXCLUS_HI                        9  0x00000009 (const dword)  (not used)
DISK_MAXCLUS_LO                        8  0x00000008 (const dword)  (not used)
DISK_MAXROOT                          10  0x0000000a (const dword)  (not used)
DISK_ROOT_HI                           5  0x00000005 (const dword)  (not used)
DISK_ROOT_LO                           4  0x00000004 (const dword)  (not used)
DISK_SECT_PER_CLUS                    13  0x0000000d (const dword)  (not used)
DISK_TYPE                             14  0x0000000e (const dword)  (not used)
disp_BlitPixelsFromCOM0             -372  0xfffffe8c (PmmC func) args[0] r=0  (not used)
disp_BlitPixelsFromCOM1             -563  0xfffffdcd (PmmC func) args[0] r=0  (not used)
disp_BlitPixelsFromCOM2             -564  0xfffffdcc (PmmC func) args[0] r=0  (not used)
disp_BlitPixelsFromCOM3             -565  0xfffffdcb (PmmC func) args[0] r=0  (not used)
disp_Disconnect                     -371  0xfffffe8d (PmmC func) args[0] r=0  (not used)
disp_Init                           -370  0xfffffe8e (PmmC func) args[0] r=0  (not used)
disp_ReadWord                       -367  0xfffffe91 (PmmC func) args[0] r=1  (not used)
disp_setGRAM                        -363  0xfffffe95 (PmmC func) args[4] r=0  (not used)
disp_SetReg                         -362  0xfffffe96 (PmmC func) args[2] r=0  (not used)
disp_Sync                           -369  0xfffffe8f (PmmC func) args[1] r=0  (not used)
disp_WrGRAM                         -364  0xfffffe94 (PmmC func) args[1] r=0  (not used)
disp_WriteControl                   -365  0xfffffe93 (PmmC func) args[1] r=0  (not used)
disp_WriteWord                      -366  0xfffffe92 (PmmC func) args[1] r=0  (not used)
DODGERBLUE                          7327  0x00001c9f (const dword)  (not used)
DoGFXObjects                       15881  0x00003e09 (User func) args[0] r=0  (usage 6)
DOWN                                   0  0x00000000 (const dword)  (not used)
DSK                                63490  0x0000f802 (const dword)  (not used)
ENABLE                                 1  0x00000001 (const dword)  (not used)
EVE_SP                               -65  0xffffffbf (PmmC func) args[0] r=1  (not used)
EVE_SSIZE                            -66  0xffffffbe (PmmC func) args[0] r=1  (not used)
EXTERN                               N/A         N/A (macro)  /**/   (not used)
FALSE_REASON                         141  0x0000008d (const dword)  (not used)
FCY_1                                 20  0x00000014 (const dword)  (not used)
FCY_256                               23  0x00000017 (const dword)  (not used)
FCY_64                                22  0x00000016 (const dword)  (not used)
FCY_8                                 21  0x00000015 (const dword)  (not used)
FE_CANNOT_INIT                        15  0x0000000f (const dword)  (not used)
FE_CANNOT_READ_MBR                    16  0x00000010 (const dword)  (not used)
FE_DIR_FULL                           12  0x0000000c (const dword)  (not used)
FE_DISK_FULL                          13  0x0000000d (const dword)  (not used)
FE_DISK_NOT_MNTD                       6  0x00000006 (const dword)  (not used)
FE_EOF                                10  0x0000000a (const dword)  (not used)
FE_FAT_EOF                             9  0x00000009 (const dword)  (not used)
FE_FILE_NOT_FOUND                      7  0x00000007 (const dword)  (not used)
FE_FILE_OVERWRITE                     14  0x0000000e (const dword)  (not used)
FE_FILE_TIMEOUT                       26  0x0000001a (const dword)  (not used)
FE_FIND_ERROR                         19  0x00000013 (const dword)  (not used)
FE_IDE_ERROR                           1  0x00000001 (const dword)  (not used)
FE_INVALID_BR                          5  0x00000005 (const dword)  (not used)
FE_INVALID_CLUSTER                    11  0x0000000b (const dword)  (not used)
FE_INVALID_FILE                        8  0x00000008 (const dword)  (not used)
FE_INVALID_FNAME                      20  0x00000014 (const dword)  (not used)
FE_INVALID_MBR                         4  0x00000004 (const dword)  (not used)
FE_INVALID_MEDIA                      21  0x00000015 (const dword)  (not used)
FE_INVALID_MODE                       18  0x00000012 (const dword)  (not used)
FE_MALLOC_FAILED                      17  0x00000011 (const dword)  (not used)
FE_NOT_PRESENT                         2  0x00000002 (const dword)  (not used)
FE_OK                                  0  0x00000000 (const dword)  (not used)
FE_PARTITION_TYPE                      3  0x00000003 (const dword)  (not used)
FE_SECTOR_READ_FAIL                   22  0x00000016 (const dword)  (not used)
FE_SECTOR_WRITE_FAIL                  23  0x00000017 (const dword)  (not used)
FILE_ATTRIBUTES                       18  0x00000012 (const dword)  (not used)
FILE_BUFFER                           22  0x00000016 (const dword)  (not used)
file_Close                          -431  0xfffffe51 (PmmC func) args[1] r=1  (not used)
file_Count                          -425  0xfffffe57 (PmmC func) args[1] r=1  (not used)
FILE_CURR_CLUSTER                      1  0x00000001 (const dword)  (not used)
FILE_CURR_SECTOR                       2  0x00000002 (const dword)  (not used)
FILE_CURR_SECTOR_POS                   3  0x00000003 (const dword)  (not used)
FILE_CURR_SECTOR_TOP                   4  0x00000004 (const dword)  (not used)
FILE_DATE                             10  0x0000000a (const dword)  (not used)
file_Dir                            -426  0xfffffe56 (PmmC func) args[1] r=1  (not used)
FILE_DISK                             21  0x00000015 (const dword)  (not used)
FILE_ENTRY                            20  0x00000014 (const dword)  (not used)
file_Erase                          -446  0xfffffe42 (PmmC func) args[1] r=1  (not used)
file_Error                          -424  0xfffffe58 (PmmC func) args[0] r=1  (not used)
file_Exec                           -450  0xfffffe3e (PmmC func) args[2] r=1  (not used)
file_Exists                         -429  0xfffffe53 (PmmC func) args[1] r=1  (not used)
file_FindFirst                      -427  0xfffffe55 (PmmC func) args[1] r=1  (not used)
file_FindNext                       -428  0xfffffe54 (PmmC func) args[0] r=1  (not used)
FILE_FIRST_CLUSTER                     0  0x00000000 (const dword)  (not used)
file_GetC                           -441  0xfffffe47 (PmmC func) args[1] r=1  (usage 3)
file_GetS                           -445  0xfffffe43 (PmmC func) args[3] r=1  (not used)
file_GetW                           -443  0xfffffe45 (PmmC func) args[1] r=1  (usage 3)
file_Image                          -438  0xfffffe4a (PmmC func) args[3] r=1  (not used)
file_Index                          -434  0xfffffe4e (PmmC func) args[4] r=1  (not used)
file_LoadFunction                   -448  0xfffffe40 (PmmC func) args[1] r=1  (not used)
file_LoadImageControl               -451  0xfffffe3d (PmmC func) args[3] r=1  (usage 24)
FILE_MODE                             17  0x00000011 (const dword)  (not used)
file_Mount                          -452  0xfffffe3c (PmmC func) args[0] r=1  (usage 6)
FILE_NAME                             11  0x0000000b (const dword)  (not used)
file_Open                           -430  0xfffffe52 (PmmC func) args[2] r=1  (usage 3)
FILE_PAGEFLAG                         19  0x00000013 (const dword)  (not used)
file_PlayWAV                        -454  0xfffffe3a (PmmC func) args[1] r=1  (not used)
file_PutC                           -440  0xfffffe48 (PmmC func) args[2] r=1  (not used)
file_PutS                           -444  0xfffffe44 (PmmC func) args[2] r=1  (not used)
file_PutW                           -442  0xfffffe46 (PmmC func) args[2] r=1  (not used)
file_Read                           -432  0xfffffe50 (PmmC func) args[3] r=1  (not used)
file_Rename                         -455  0xfffffe39 (PmmC func) args[2] r=1  (not used)
file_Rewind                         -447  0xfffffe41 (PmmC func) args[1] r=1  (not used)
file_Run                            -449  0xfffffe3f (PmmC func) args[2] r=1  (not used)
file_ScreenCapture                  -439  0xfffffe49 (PmmC func) args[5] r=1  (not used)
file_Seek                           -433  0xfffffe4f (PmmC func) args[3] r=1  (usage 3)
FILE_SEEK_POS_HI                       6  0x00000006 (const dword)  (not used)
FILE_SEEK_POS_LO                       5  0x00000005 (const dword)  (not used)
file_SetDate                        -456  0xfffffe38 (PmmC func) args[7] r=1  (not used)
file_Size                           -437  0xfffffe4b (PmmC func) args[3] r=1  (not used)
FILE_SIZE_HI                           8  0x00000008 (const dword)  (not used)
FILE_SIZE_LO                           7  0x00000007 (const dword)  (not used)
file_Tell                           -435  0xfffffe4d (PmmC func) args[3] r=1  (not used)
FILE_TIME                              9  0x00000009 (const dword)  (not used)
file_Unmount                        -453  0xfffffe3b (PmmC func) args[0] r=0  (not used)
file_Write                          -436  0xfffffe4c (PmmC func) args[3] r=1  (not used)
FILLPATTERN_0                      65504  0x0000ffe0 (const dword)  (not used)
FILLPATTERN_1                      65505  0x0000ffe1 (const ??? 0)  (not used)
FILLPATTERN_10                     65514  0x0000ffea (const ??? 0)  (not used)
FILLPATTERN_11                     65515  0x0000ffeb (const ??? 0)  (not used)
FILLPATTERN_12                     65516  0x0000ffec (const ??? 0)  (not used)
FILLPATTERN_13                     65517  0x0000ffed (const ??? 0)  (not used)
FILLPATTERN_14                     65518  0x0000ffee (const ??? 0)  (not used)
FILLPATTERN_15                     65519  0x0000ffef (const ??? 0)  (not used)
FILLPATTERN_16                     65520  0x0000fff0 (const ??? 0)  (not used)
FILLPATTERN_17                     65521  0x0000fff1 (const ??? 0)  (not used)
FILLPATTERN_18                     65522  0x0000fff2 (const ??? 0)  (not used)
FILLPATTERN_19                     65523  0x0000fff3 (const ??? 0)  (not used)
FILLPATTERN_2                      65506  0x0000ffe2 (const ??? 0)  (not used)
FILLPATTERN_20                     65524  0x0000fff4 (const ??? 0)  (not used)
FILLPATTERN_21                     65525  0x0000fff5 (const ??? 0)  (not used)
FILLPATTERN_22                     65526  0x0000fff6 (const ??? 0)  (not used)
FILLPATTERN_23                     65527  0x0000fff7 (const ??? 0)  (not used)
FILLPATTERN_24                     65528  0x0000fff8 (const ??? 0)  (not used)
FILLPATTERN_25                     65529  0x0000fff9 (const ??? 0)  (not used)
FILLPATTERN_26                     65530  0x0000fffa (const ??? 0)  (not used)
FILLPATTERN_27                     65531  0x0000fffb (const ??? 0)  (not used)
FILLPATTERN_28                     65532  0x0000fffc (const ??? 0)  (not used)
FILLPATTERN_29                     65533  0x0000fffd (const ??? 0)  (not used)
FILLPATTERN_3                      65507  0x0000ffe3 (const ??? 0)  (not used)
FILLPATTERN_30                     65534  0x0000fffe (const ??? 0)  (not used)
FILLPATTERN_31                     65535  0x0000ffff (const ??? 0)  (not used)
FILLPATTERN_4                      65508  0x0000ffe4 (const ??? 0)  (not used)
FILLPATTERN_5                      65509  0x0000ffe5 (const ??? 0)  (not used)
FILLPATTERN_6                      65510  0x0000ffe6 (const ??? 0)  (not used)
FILLPATTERN_7                      65511  0x0000ffe7 (const ??? 0)  (not used)
FILLPATTERN_8                      65512  0x0000ffe8 (const ??? 0)  (not used)
FILLPATTERN_9                      65513  0x0000ffe9 (const ??? 0)  (not used)
FIREBRICK                          45316  0x0000b104 (const dword)  (not used)
flash_Bank                          -498  0xfffffe0e (PmmC func) args[0] r=1  (not used)
flash_Blit1                         -507  0xfffffe05 (PmmC func) args[4] r=1  (not used)
flash_Blit16                        -503  0xfffffe09 (PmmC func) args[3] r=1  (not used)
flash_Blit2                         -506  0xfffffe06 (PmmC func) args[4] r=1  (not used)
flash_Blit4                         -505  0xfffffe07 (PmmC func) args[4] r=1  (not used)
flash_Blit8                         -504  0xfffffe08 (PmmC func) args[3] r=1  (not used)
flash_Copy                          -496  0xfffffe10 (PmmC func) args[4] r=1  (not used)
flash_EraseBank                     -499  0xfffffe0d (PmmC func) args[2] r=1  (not used)
flash_Exec                          -508  0xfffffe04 (PmmC func) args[2] r=1  (not used)
flash_GetByte                       -494  0xfffffe12 (PmmC func) args[2] r=1  (not used)
flash_GetWord                       -495  0xfffffe11 (PmmC func) args[2] r=1  (not used)
flash_LoadFile                      -500  0xfffffe0c (PmmC func) args[2] r=1  (not used)
flash_putstr                        -502  0xfffffe0a (PmmC func) args[2] r=1  (not used)
FLASH_READ_PROTECT                    16  0x00000010 (const dword)  (not used)
flash_Run                           -497  0xfffffe0f (PmmC func) args[1] r=1  (not used)
FLASH_WRITE_PROTECT                   32  0x00000020 (const dword)  (not used)
flash_WriteBlock                    -501  0xfffffe0b (PmmC func) args[3] r=1  (not used)
FLASHBANK_0                            0  0x00000000 (const dword)  (not used)
FLASHBANK_1                            1  0x00000001 (const dword)  (usage 3)
FLASHBANK_2                            2  0x00000002 (const dword)  (not used)
FLASHBANK_3                            3  0x00000003 (const dword)  (not used)
FLASHBANK_4                            4  0x00000004 (const dword)  (not used)
FLASHBANK_5                            5  0x00000005 (const dword)  (not used)
FLORALWHITE                        65502  0x0000ffde (const dword)  (not used)
flt_ABS                              -84  0xffffffac (PmmC func) args[2] r=1  (not used)
flt_ACOS                             -85  0xffffffab (PmmC func) args[2] r=1  (not used)
flt_ADD                              -97  0xffffff9f (PmmC func) args[3] r=1  (not used)
flt_ASIN                             -86  0xffffffaa (PmmC func) args[2] r=1  (not used)
flt_ATAN                             -87  0xffffffa9 (PmmC func) args[2] r=1  (not used)
flt_CEIL                             -90  0xffffffa6 (PmmC func) args[2] r=1  (not used)
flt_COS                              -88  0xffffffa8 (PmmC func) args[2] r=1  (not used)
flt_DIV                             -100  0xffffff9c (PmmC func) args[3] r=1  (not used)
flt_EQ                              -101  0xffffff9b (PmmC func) args[2] r=1  (not used)
flt_EXP                              -89  0xffffffa7 (PmmC func) args[2] r=1  (not used)
flt_FLOOR                            -91  0xffffffa5 (PmmC func) args[2] r=1  (not used)
flt_FTOI                            -108  0xffffff94 (PmmC func) args[1] r=1  (not used)
flt_GE                              -104  0xffffff98 (PmmC func) args[2] r=1  (not used)
flt_GT                              -103  0xffffff99 (PmmC func) args[2] r=1  (not used)
flt_ITOF                             -79  0xffffffb1 (PmmC func) args[2] r=1  (not used)
flt_LE                              -106  0xffffff96 (PmmC func) args[2] r=1  (not used)
flt_LOG                              -93  0xffffffa3 (PmmC func) args[2] r=1  (not used)
flt_LT                              -105  0xffffff97 (PmmC func) args[2] r=1  (not used)
flt_LTOF                             -81  0xffffffaf (PmmC func) args[2] r=1  (not used)
flt_MUL                              -99  0xffffff9d (PmmC func) args[3] r=1  (not used)
flt_NE                              -102  0xffffff9a (PmmC func) args[2] r=1  (not used)
flt_POW                              -96  0xffffffa0 (PmmC func) args[3] r=1  (not used)
flt_PRINT                            -83  0xffffffad (PmmC func) args[2] r=1  (not used)
flt_PRINTxy                         -109  0xffffff93 (PmmC func) args[4] r=1  (not used)
flt_SGN                             -107  0xffffff95 (PmmC func) args[1] r=1  (not used)
flt_SIN                              -92  0xffffffa4 (PmmC func) args[2] r=1  (not used)
flt_SQR                              -94  0xffffffa2 (PmmC func) args[2] r=1  (not used)
flt_SUB                              -98  0xffffff9e (PmmC func) args[3] r=1  (not used)
flt_TAN                              -95  0xffffffa1 (PmmC func) args[2] r=1  (not used)
flt_UITOF                            -80  0xffffffb0 (PmmC func) args[2] r=1  (not used)
flt_ULTOF                            -82  0xffffffae (PmmC func) args[2] r=1  (not used)
flt_VAL                              -78  0xffffffb2 (PmmC func) args[2] r=1  (not used)
FONT1                                  1  0x00000001 (const dword)  (not used)
FONT2                                  2  0x00000002 (const dword)  (not used)
FONT3                                  3  0x00000003 (const dword)  (not used)
FONT_1                                 1  0x00000001 (const dword)  (not used)
FONT_10                               10  0x0000000a (const dword)  (not used)
FONT_11                               11  0x0000000b (const dword)  (not used)
FONT_2                                 2  0x00000002 (const dword)  (not used)
FONT_3                                 3  0x00000003 (const dword)  (not used)
FONT_4                                 4  0x00000004 (const dword)  (not used)
FONT_5                                 5  0x00000005 (const dword)  (not used)
FONT_6                                 6  0x00000006 (const dword)  (not used)
FONT_7                                 7  0x00000007 (const dword)  (not used)
FONT_8                                 8  0x00000008 (const dword)  (not used)
FONT_9                                 9  0x00000009 (const dword)  (not used)
FONT_ID                                2  0x00000002 (const dword)  (not used)
FONT_SIZE                              2  0x00000002 (const dword)  (not used)
FORESTGREEN                         9284  0x00002444 (const dword)  (not used)
FormBGcolors                       13319  0x00003407FormBGcolors                       13319  0x00003407 (mem) word[79] (member of C:\Users\agarciamoreno\Documents\GitHub\BCN3DSigmax-Firmware-dev\Project Files LCD v126\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 8)
FormBGcolors                      UNRESOLVED  (usage 4)
FormEndIndex                         165  0x000000a5FormEndIndex                         165  0x000000a5 (mem) word[79] (member of C:\Users\agarciamoreno\Documents\GitHub\BCN3DSigmax-Firmware-dev\Project Files LCD v126\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 6)
FormStartIndex                         7  0x00000007FormStartIndex                         7  0x00000007 (mem) word[79] (member of C:\Users\agarciamoreno\Documents\GitHub\BCN3DSigmax-Firmware-dev\Project Files LCD v126\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 7)
FormStartIndex                    UNRESOLVED  (usage 2)
FRAME_DELAY                           22  0x00000016 (const dword)  (not used)
FUCHSIA                            63519  0x0000f81f (const dword)  (not used)
GAINSBORO                          57083  0x0000defb (const dword)  (not used)
gbutton                           UNRESOLVED  (not used)
Gen4_ULCD_35DCT_CLB_DIABLO16_GFX       0  0x00000000 (const ??? 0)  (not used)
GFX                                63489  0x0000f801 (const dword)  (not used)
gfx_332to565                        -165  0xffffff5b (PmmC func) args[1] r=1  (not used)
gfx_565to332                        -166  0xffffff5a (PmmC func) args[1] r=1  (not used)
gfx_Arc                             -172  0xffffff54 (PmmC func) args[7] r=0  (not used)
gfx_BevelRadius                     -194  0xffffff3e (PmmC func) args[1] r=1  (not used)
gfx_BevelShadow                     -196  0xffffff3c (PmmC func) args[1] r=1  (not used)
gfx_BevelWidth                      -195  0xffffff3d (PmmC func) args[1] r=1  (not used)
gfx_BGcolour                        -184  0xffffff48 (PmmC func) args[1] r=1  (not used)
GFX_BOTTOM                            51  0x00000033 (const dword)  (not used)
gfx_BoxTo                           -149  0xffffff6b (PmmC func) args[2] r=0  (not used)
gfx_Bullet                          -146  0xffffff6e (PmmC func) args[1] r=0  (not used)
gfx_Button                          -155  0xffffff65 (PmmC func) args[9] r=1  (not used)
gfx_Button2                         -156  0xffffff64 (PmmC func) args[8] r=0  (not used)
gfx_Button3                         -157  0xffffff63 (PmmC func) args[8] r=0  (not used)
gfx_ChangeColour                    -151  0xffffff69 (PmmC func) args[2] r=0  (not used)
gfx_CheckBox                        -158  0xffffff62 (PmmC func) args[8] r=0  (not used)
gfx_Circle                          -136  0xffffff78 (PmmC func) args[4] r=0  (not used)
gfx_CircleFilled                    -137  0xffffff77 (PmmC func) args[4] r=0  (not used)
GFX_CLIP_BOTTOM                      114  0x00000072 (const dword)  (not used)
GFX_CLIP_BOTTOM_VAL                  110  0x0000006e (const dword)  (not used)
GFX_CLIP_LEFT                        111  0x0000006f (const dword)  (not used)
GFX_CLIP_LEFT_VAL                    107  0x0000006b (const dword)  (not used)
GFX_CLIP_RIGHT                       113  0x00000071 (const dword)  (not used)
GFX_CLIP_RIGHT_VAL                   109  0x0000006d (const dword)  (not used)
GFX_CLIP_TOP                         112  0x00000070 (const dword)  (not used)
GFX_CLIP_TOP_VAL                     108  0x0000006c (const dword)  (not used)
gfx_Clipping                        -186  0xffffff46 (PmmC func) args[1] r=1  (usage 6)
gfx_ClipWindow                      -150  0xffffff6a (PmmC func) args[4] r=0  (usage 3)
gfx_Cls                             -126  0xffffff82 (PmmC func) args[0] r=0  (usage 6)
gfx_Contrast                        -192  0xffffff40 (PmmC func) args[1] r=1  (usage 3)
gfx_Dot                             -145  0xffffff6f (PmmC func) args[0] r=0  (not used)
gfx_Ellipse                         -153  0xffffff67 (PmmC func) args[5] r=0  (not used)
gfx_EllipseFilled                   -154  0xffffff66 (PmmC func) args[5] r=0  (not used)
gfx_FillPattern                     -170  0xffffff56 (PmmC func) args[2] r=1  (not used)
gfx_FrameDelay                      -189  0xffffff43 (PmmC func) args[1] r=1  (not used)
gfx_Get                             -182  0xffffff4a (PmmC func) args[1] r=1  (not used)
gfx_GetPixel                        -139  0xffffff75 (PmmC func) args[2] r=1  (not used)
gfx_Gradient                        -176  0xffffff50 (PmmC func) args[7] r=0  (not used)
gfx_Hline                           -132  0xffffff7c (PmmC func) args[4] r=1  (not used)
gfx_IncX                            -147  0xffffff6d (PmmC func) args[0] r=1  (not used)
gfx_IncY                            -148  0xffffff6c (PmmC func) args[0] r=1  (not used)
GFX_LAST_CHAR_HEIGHT                 120  0x00000078 (const dword)  (not used)
GFX_LAST_CHAR_WIDTH                  119  0x00000077 (const dword)  (not used)
GFX_LAST_STR_HEIGHT                  122  0x0000007a (const dword)  (not used)
GFX_LAST_STR_WIDTH                   121  0x00000079 (const dword)  (not used)
GFX_LEFT                              48  0x00000030 (const dword)  (not used)
gfx_Line                            -131  0xffffff7d (PmmC func) args[5] r=0  (not used)
gfx_LinePattern                     -193  0xffffff3f (PmmC func) args[1] r=1  (not used)
gfx_LineRel                         -130  0xffffff7e (PmmC func) args[2] r=0  (not used)
gfx_LineTo                          -129  0xffffff7f (PmmC func) args[2] r=0  (not used)
gfx_MoveRel                         -128  0xffffff80 (PmmC func) args[2] r=0  (not used)
gfx_MoveTo                          -127  0xffffff81 (PmmC func) args[2] r=0  (usage 3)
gfx_ObjectColour                    -185  0xffffff47 (PmmC func) args[1] r=1  (not used)
gfx_Orbit                           -142  0xffffff72 (PmmC func) args[2] r=0  (not used)
gfx_OrbitInit                       -141  0xffffff73 (PmmC func) args[2] r=0  (not used)
gfx_Origin                          -169  0xffffff57 (PmmC func) args[2] r=0  (not used)
gfx_OutlineColour                   -191  0xffffff41 (PmmC func) args[1] r=1  (not used)
gfx_Panel                           -161  0xffffff5f (PmmC func) args[6] r=0  (not used)
gfx_PenSize                         -183  0xffffff49 (PmmC func) args[1] r=1  (not used)
gfx_PieSlice                        -171  0xffffff55 (PmmC func) args[9] r=0  (not used)
gfx_PointWithinBox                  -199  0xffffff39 (PmmC func) args[3] r=1  (not used)
gfx_PointWithinRectangle            -200  0xffffff38 (PmmC func) args[3] r=1  (not used)
gfx_Polygon                         -144  0xffffff70 (PmmC func) args[4] r=0  (not used)
gfx_PolygonFilled                   -168  0xffffff58 (PmmC func) args[4] r=0  (not used)
gfx_Polyline                        -143  0xffffff71 (PmmC func) args[4] r=0  (not used)
gfx_PutPixel                        -138  0xffffff76 (PmmC func) args[3] r=0  (not used)
gfx_RadioButton                     -159  0xffffff61 (PmmC func) args[8] r=0  (not used)
gfx_ReadBresLine                    -178  0xffffff4e (PmmC func) args[5] r=1  (not used)
gfx_ReadGRAMarea                    -180  0xffffff4c (PmmC func) args[5] r=1  (not used)
gfx_Rectangle                       -134  0xffffff7a (PmmC func) args[5] r=0  (not used)
gfx_RectangleFilled                 -135  0xffffff79 (PmmC func) args[5] r=0  (usage 6)
gfx_RGBto565                        -164  0xffffff5c (PmmC func) args[3] r=1  (not used)
GFX_RIGHT                             50  0x00000032 (const dword)  (not used)
gfx_RoundGradient                   -177  0xffffff4f (PmmC func) args[8] r=0  (not used)
gfx_RoundPanel                      -175  0xffffff51 (PmmC func) args[8] r=0  (not used)
gfx_RoundRect                       -173  0xffffff53 (PmmC func) args[6] r=0  (not used)
gfx_Scope                           -532  0xfffffdec (PmmC func) args[19] r=0  (not used)
gfx_ScreenCopyPaste                 -163  0xffffff5d (PmmC func) args[6] r=0  (not used)
gfx_ScreenMode                      -190  0xffffff42 (PmmC func) args[1] r=1  (usage 3)
gfx_Set                             -125  0xffffff83 (PmmC func) args[2] r=0  (usage 3)
gfx_SetClipRegion                   -152  0xffffff68 (PmmC func) args[0] r=0  (not used)
gfx_Slider                          -162  0xffffff5e (PmmC func) args[8] r=1  (not used)
gfx_Slider2                         -160  0xffffff60 (PmmC func) args[8] r=1  (not used)
gfx_Surround                        -174  0xffffff52 (PmmC func) args[7] r=0  (not used)
GFX_THUMB_BORDER_DARK                 76  0x0000004c (const dword)  (not used)
GFX_THUMB_BORDER_LIGHT                77  0x0000004d (const dword)  (not used)
GFX_THUMB_PERCENT                     75  0x0000004b (const dword)  (not used)
GFX_TOP                               49  0x00000031 (const dword)  (not used)
GFX_TOUCH_REGION_X1                  103  0x00000067 (const dword)  (not used)
GFX_TOUCH_REGION_X2                  105  0x00000069 (const dword)  (not used)
GFX_TOUCH_REGION_Y1                  104  0x00000068 (const dword)  (not used)
GFX_TOUCH_REGION_Y2                  106  0x0000006a (const dword)  (not used)
gfx_Transparency                    -188  0xffffff44 (PmmC func) args[1] r=1  (not used)
gfx_TransparentColour               -187  0xffffff45 (PmmC func) args[1] r=1  (not used)
gfx_Triangle                        -140  0xffffff74 (PmmC func) args[7] r=0  (not used)
gfx_TriangleFilled                  -167  0xffffff59 (PmmC func) args[7] r=0  (not used)
gfx_Vline                           -133  0xffffff7b (PmmC func) args[4] r=1  (not used)
gfx_WriteBresLine                   -179  0xffffff4d (PmmC func) args[5] r=0  (not used)
gfx_WriteGRAMarea                   -181  0xffffff4b (PmmC func) args[5] r=0  (not used)
GFX_X1                                52  0x00000034 (const dword)  (not used)
GFX_X2                                54  0x00000036 (const dword)  (not used)
GFX_X_ORG                             56  0x00000038 (const dword)  (not used)
GFX_XMAX                              46  0x0000002e (const dword)  (not used)
gfx_Xorigin                         -197  0xffffff3b (PmmC func) args[1] r=1  (not used)
GFX_Y1                                53  0x00000035 (const dword)  (not used)
GFX_Y2                                55  0x00000037 (const dword)  (not used)
GFX_Y_ORG                             57  0x00000039 (const dword)  (not used)
GFX_YMAX                              47  0x0000002f (const dword)  (not used)
gfx_Yorigin                         -198  0xffffff3a (PmmC func) args[1] r=1  (not used)
GHOSTWHITE                         65503  0x0000ffdf (const dword)  (not used)
GOLD                               65184  0x0000fea0 (const dword)  (not used)
GOLDENROD                          56612  0x0000dd24 (const dword)  (not used)
GRAD_DOWN                             32  0x00000020 (const dword)  (not used)
GRAD_LEFT                             80  0x00000050 (const dword)  (not used)
GRAD_RIGHT                            48  0x00000030 (const dword)  (not used)
GRAD_UP                               64  0x00000040 (const dword)  (not used)
GRAD_WAVE_HOR                        112  0x00000070 (const dword)  (not used)
GRAD_WAVE_VER                         96  0x00000060 (const dword)  (not used)
GRAM_PIXEL_COUNT_HI                  116  0x00000074 (const dword)  (not used)
GRAM_PIXEL_COUNT_LO                  115  0x00000073 (const dword)  (not used)
GRAY                               33808  0x00008410 (const dword)  (not used)
GREEN                               1024  0x00000400 (const dword)  (not used)
GREENYELLOW                        45029  0x0000afe5 (const dword)  (not used)
HEX                                 5136  0x00001410 (const dword)  (not used)
HEX1                                4368  0x00001110 (const dword)  (not used)
HEX1Z                                272  0x00000110 (const dword)  (not used)
HEX1ZB                              8464  0x00002110 (const dword)  (not used)
HEX2                                4624  0x00001210 (const dword)  (not used)
HEX2Z                                528  0x00000210 (const dword)  (not used)
HEX2ZB                              8720  0x00002210 (const dword)  (not used)
HEX3                                4880  0x00001310 (const dword)  (not used)
HEX3Z                                784  0x00000310 (const dword)  (not used)
HEX3ZB                              8976  0x00002310 (const dword)  (not used)
HEX4                                5136  0x00001410 (const dword)  (not used)
HEX4Z                               1040  0x00000410 (const dword)  (not used)
HEX4ZB                              9232  0x00002410 (const dword)  (not used)
HEXZ                                1040  0x00000410 (const dword)  (not used)
HEXZB                               9232  0x00002410 (const dword)  (not used)
hFonts                                 2  0x00000002 (mem) word[56] (global)  (usage 312)
HI                                     1  0x00000001 (const dword)  (not used)
HIbyte                               -48  0xffffffd0 (PmmC func) args[1] r=1  (not used)
HIDE                                   2  0x00000002 (const dword)  (not used)
hndl                                   0  0x00000000 (mem) word (global)  (usage 87)
HONEYDEW                           63486  0x0000f7fe (const dword)  (not used)
HOTPINK                            64342  0x0000fb56 (const dword)  (not used)
hstrings                             226  0x000000e2 (mem) word (global)  (usage 12)
HYPER                                  3  0x00000003 (const dword)  (not used)
I2C1                               63520  0x0000f820 (const dword)  (not used)
I2C1_Ack                            -305  0xfffffecf (PmmC func) args[0] r=0  (not used)
I2C1_AckPoll                        -314  0xfffffec6 (PmmC func) args[1] r=1  (not used)
I2C1_AckStatus                      -311  0xfffffec9 (PmmC func) args[0] r=1  (not used)
I2C1_Close                          -287  0xfffffee1 (PmmC func) args[0] r=0  (not used)
I2C1_Getn                           -323  0xfffffebd (PmmC func) args[2] r=1  (not used)
I2C1_Gets                           -320  0xfffffec0 (PmmC func) args[2] r=1  (not used)
I2C1_Idle                           -317  0xfffffec3 (PmmC func) args[0] r=1  (not used)
I2C1_Nack                           -308  0xfffffecc (PmmC func) args[0] r=0  (not used)
I2C1_Open                           -284  0xfffffee4 (PmmC func) args[3] r=1  (not used)
I2C1_Putn                           -329  0xfffffeb7 (PmmC func) args[2] r=1  (not used)
I2C1_Puts                           -326  0xfffffeba (PmmC func) args[1] r=1  (not used)
I2C1_Read                           -299  0xfffffed5 (PmmC func) args[0] r=1  (not used)
I2C1_Restart                        -296  0xfffffed8 (PmmC func) args[0] r=1  (not used)
I2C1_Start                          -290  0xfffffede (PmmC func) args[0] r=1  (not used)
I2C1_Stop                           -293  0xfffffedb (PmmC func) args[0] r=1  (not used)
I2C1_Write                          -302  0xfffffed2 (PmmC func) args[1] r=1  (not used)
I2C2                               63521  0x0000f821 (const dword)  (not used)
I2C2_Ack                            -306  0xfffffece (PmmC func) args[0] r=0  (not used)
I2C2_AckPoll                        -315  0xfffffec5 (PmmC func) args[1] r=1  (not used)
I2C2_AckStatus                      -312  0xfffffec8 (PmmC func) args[0] r=1  (not used)
I2C2_Close                          -288  0xfffffee0 (PmmC func) args[0] r=0  (not used)
I2C2_Getn                           -324  0xfffffebc (PmmC func) args[2] r=1  (not used)
I2C2_Gets                           -321  0xfffffebf (PmmC func) args[2] r=1  (not used)
I2C2_Idle                           -318  0xfffffec2 (PmmC func) args[0] r=1  (not used)
I2C2_Nack                           -309  0xfffffecb (PmmC func) args[0] r=0  (not used)
I2C2_Open                           -285  0xfffffee3 (PmmC func) args[3] r=1  (not used)
I2C2_Putn                           -330  0xfffffeb6 (PmmC func) args[2] r=1  (not used)
I2C2_Puts                           -327  0xfffffeb9 (PmmC func) args[1] r=1  (not used)
I2C2_Read                           -300  0xfffffed4 (PmmC func) args[0] r=1  (not used)
I2C2_Restart                        -297  0xfffffed7 (PmmC func) args[0] r=1  (not used)
I2C2_Start                          -291  0xfffffedd (PmmC func) args[0] r=1  (not used)
I2C2_Stop                           -294  0xfffffeda (PmmC func) args[0] r=1  (not used)
I2C2_Write                          -303  0xfffffed1 (PmmC func) args[1] r=1  (not used)
I2C3                               63522  0x0000f822 (const dword)  (not used)
I2C3_Ack                            -307  0xfffffecd (PmmC func) args[0] r=0  (not used)
I2C3_AckPoll                        -316  0xfffffec4 (PmmC func) args[1] r=1  (not used)
I2C3_AckStatus                      -313  0xfffffec7 (PmmC func) args[0] r=1  (not used)
I2C3_Close                          -289  0xfffffedf (PmmC func) args[0] r=0  (not used)
I2C3_Getn                           -325  0xfffffebb (PmmC func) args[2] r=1  (not used)
I2C3_Gets                           -322  0xfffffebe (PmmC func) args[2] r=1  (not used)
I2C3_Idle                           -319  0xfffffec1 (PmmC func) args[0] r=1  (not used)
I2C3_Nack                           -310  0xfffffeca (PmmC func) args[0] r=0  (not used)
I2C3_Open                           -286  0xfffffee2 (PmmC func) args[3] r=1  (not used)
I2C3_Putn                           -331  0xfffffeb5 (PmmC func) args[2] r=1  (not used)
I2C3_Puts                           -328  0xfffffeb8 (PmmC func) args[1] r=1  (not used)
I2C3_Read                           -301  0xfffffed3 (PmmC func) args[0] r=1  (not used)
I2C3_Restart                        -298  0xfffffed6 (PmmC func) args[0] r=1  (not used)
I2C3_Start                          -292  0xfffffedc (PmmC func) args[0] r=1  (not used)
I2C3_Stop                           -295  0xfffffed9 (PmmC func) args[0] r=1  (not used)
I2C3_Write                          -304  0xfffffed0 (PmmC func) args[1] r=1  (not used)
I2C_10KHZ                              3  0x00000003 (const dword)  (not used)
I2C_20KHZ                              4  0x00000004 (const dword)  (not used)
I2C_250KHZ                             6  0x00000006 (const dword)  (not used)
I2C_50KHZ                              5  0x00000005 (const dword)  (not used)
I2C_FAST                               2  0x00000002 (const dword)  (not used)
I2C_MED                                1  0x00000001 (const dword)  (not used)
I2C_SLOW                               0  0x00000000 (const dword)  (not used)
I_COLOUR16                            16  0x00000010 (const dword)  (not used)
I_DARKEN                           16384  0x00004000 (const dword)  (not used)
I_ENABLED                          32768  0x00008000 (const dword)  (usage 3)
I_LIGHTEN                           8192  0x00002000 (const dword)  (not used)
I_MOVIE                              128  0x00000080 (const dword)  (not used)
I_NOGROUP                             64  0x00000040 (const dword)  (not used)
I_STAYONTOP                          256  0x00000100 (const dword)  (usage 3)
I_TOPMOST                            512  0x00000200 (const dword)  (not used)
I_TOUCH_DISABLE                       32  0x00000020 (const dword)  (usage 6)
I_TOUCHED                           4096  0x00001000 (const dword)  (not used)
I_X_LOCK                            1024  0x00000400 (const dword)  (not used)
I_Y_LOCK                            2048  0x00000800 (const dword)  (not used)
iForm1                                 1  0x00000001 (const ??? 0)  (usage 3)
iForm10                              169  0x000000a9 (const ??? 0)  (usage 3)
iForm11                              178  0x000000b2 (const ??? 0)  (usage 3)
iForm12                              171  0x000000ab (const ??? 0)  (usage 3)
iForm13                              121  0x00000079 (const ??? 0)  (usage 3)
iForm14                               37  0x00000025 (const ??? 0)  (usage 3)
iForm15                              173  0x000000ad (const ??? 0)  (usage 3)
iForm16                              103  0x00000067 (const ??? 0)  (usage 3)
iForm17                              127  0x0000007f (const ??? 0)  (usage 3)
iForm18                              186  0x000000ba (const ??? 0)  (usage 3)
iForm19                               41  0x00000029 (const ??? 0)  (usage 3)
iForm2                                 5  0x00000005 (const ??? 0)  (usage 3)
iForm20                               43  0x0000002b (const ??? 0)  (usage 3)
iForm21                               52  0x00000034 (const ??? 0)  (usage 3)
iForm22                              202  0x000000ca (const ??? 0)  (usage 3)
iForm23                              217  0x000000d9 (const ??? 0)  (usage 3)
iForm24                              248  0x000000f8 (const ??? 0)  (usage 3)
iForm25                              129  0x00000081 (const ??? 0)  (usage 3)
iForm26                              299  0x0000012b (const ??? 0)  (usage 3)
iForm27                               55  0x00000037 (const ??? 0)  (usage 3)
iForm28                               67  0x00000043 (const ??? 0)  (usage 3)
iForm29                              194  0x000000c2 (const ??? 0)  (usage 3)
iForm3                               117  0x00000075 (const ??? 0)  (usage 3)
iForm30                              302  0x0000012e (const ??? 0)  (usage 3)
iForm31                               75  0x0000004b (const ??? 0)  (usage 3)
iForm32                               78  0x0000004e (const ??? 0)  (usage 3)
iForm33                               81  0x00000051 (const ??? 0)  (usage 3)
iForm34                               93  0x0000005d (const ??? 0)  (usage 3)
iForm35                               98  0x00000062 (const ??? 0)  (usage 3)
iForm36                              192  0x000000c0 (const ??? 0)  (usage 3)
iForm37                              207  0x000000cf (const ??? 0)  (usage 3)
iForm38                              209  0x000000d1 (const ??? 0)  (usage 3)
iForm39                              211  0x000000d3 (const ??? 0)  (usage 3)
iForm4                                17  0x00000011 (const ??? 0)  (usage 3)
iForm40                              283  0x0000011b (const ??? 0)  (usage 3)
iForm41                              245  0x000000f5 (const ??? 0)  (usage 3)
iForm42                              220  0x000000dc (const ??? 0)  (usage 3)
iForm43                              225  0x000000e1 (const ??? 0)  (usage 3)
iForm44                              107  0x0000006b (const ??? 0)  (usage 3)
iForm45                              305  0x00000131 (const ??? 0)  (usage 3)
iForm46                              227  0x000000e3 (const ??? 0)  (usage 3)
iForm47                              125  0x0000007d (const ??? 0)  (usage 3)
iForm48                              136  0x00000088 (const ??? 0)  (usage 3)
iForm49                              143  0x0000008f (const ??? 0)  (usage 3)
iForm5                                22  0x00000016 (const ??? 0)  (usage 3)
iForm50                              230  0x000000e6 (const ??? 0)  (usage 3)
iForm51                              235  0x000000eb (const ??? 0)  (usage 3)
iForm52                              148  0x00000094 (const ??? 0)  (usage 3)
iForm53                              159  0x0000009f (const ??? 0)  (usage 3)
iForm54                              238  0x000000ee (const ??? 0)  (usage 3)
iForm55                              241  0x000000f1 (const ??? 0)  (usage 3)
iForm56                              250  0x000000fa (const ??? 0)  (usage 3)
iForm57                              252  0x000000fc (const ??? 0)  (usage 3)
iForm58                              257  0x00000101 (const ??? 0)  (usage 3)
iForm59                              269  0x0000010d (const ??? 0)  (usage 3)
iForm6                                27  0x0000001b (const ??? 0)  (usage 3)
iForm60                              259  0x00000103 (const ??? 0)  (usage 3)
iForm61                              262  0x00000106 (const ??? 0)  (usage 3)
iForm62                              264  0x00000108 (const ??? 0)  (usage 3)
iForm63                              267  0x0000010b (const ??? 0)  (usage 3)
iForm64                              280  0x00000118 (const ??? 0)  (usage 3)
iForm65                              285  0x0000011d (const ??? 0)  (usage 3)
iForm66                              290  0x00000122 (const ??? 0)  (usage 3)
iForm67                              293  0x00000125 (const ??? 0)  (usage 3)
iForm68                              296  0x00000128 (const ??? 0)  (usage 3)
iForm69                              307  0x00000133 (const ??? 0)  (usage 3)
iForm7                               255  0x000000ff (const ??? 0)  (usage 3)
iForm70                              308  0x00000134 (const ??? 0)  (usage 3)
iForm71                              310  0x00000136 (const ??? 0)  (usage 3)
iForm72                              312  0x00000138 (const ??? 0)  (usage 3)
iForm73                              314  0x0000013a (const ??? 0)  (usage 3)
iForm74                              316  0x0000013c (const ??? 0)  (usage 3)
iForm75                              319  0x0000013f (const ??? 0)  (usage 3)
iForm76                              320  0x00000140 (const ??? 0)  (usage 3)
iForm77                              323  0x00000143 (const ??? 0)  (usage 3)
iForm78                              326  0x00000146 (const ??? 0)  (usage 3)
iForm8                               176  0x000000b0 (const ??? 0)  (usage 3)
iForm9                                33  0x00000021 (const ??? 0)  (usage 3)
IMAGE_CLUSTER                         10  0x0000000a (const dword)  (not used)
IMAGE_DELAY                            7  0x00000007 (const dword)  (not used)
IMAGE_FLAGS                            6  0x00000006 (const dword)  (not used)
IMAGE_FRAMES                           8  0x00000008 (const dword)  (not used)
IMAGE_HEIGHT                           5  0x00000005 (const dword)  (not used)
IMAGE_HIWORD                           1  0x00000001 (const dword)  (not used)
IMAGE_INDEX                            9  0x00000009 (const dword)  (usage 42)
IMAGE_LOWORD                           0  0x00000000 (const dword)  (not used)
IMAGE_SECTOR                          11  0x0000000b (const dword)  (not used)
IMAGE_TAG                             12  0x0000000c (const dword)  (usage 9)
IMAGE_TAG2                            13  0x0000000d (const dword)  (not used)
IMAGE_WIDTH                            4  0x00000004 (const dword)  (not used)
IMAGE_XPOS                             2  0x00000002 (const dword)  (not used)
IMAGE_YPOS                             3  0x00000003 (const dword)  (not used)
img_ClearAttributes                 -383  0xfffffe81 (PmmC func) args[3] r=1  (usage 3)
IMG_COUNT                              0  0x00000000 (const dword)  (not used)
IMG_CURRENT_FRAME                     89  0x00000059 (const dword)  (not used)
img_Darken                          -377  0xfffffe87 (PmmC func) args[2] r=1  (not used)
IMG_DAT_FILENAME                       4  0x00000004 (const dword)  (not used)
img_Disable                         -376  0xfffffe88 (PmmC func) args[2] r=1  (usage 6)
img_Enable                          -375  0xfffffe89 (PmmC func) args[2] r=1  (not used)
IMG_ENTRYLEN                           1  0x00000001 (const dword)  (not used)
IMG_FLAGS                             85  0x00000055 (const dword)  (not used)
IMG_FRAME_COUNT                       86  0x00000056 (const dword)  (not used)
IMG_FRAME_DELAY                       84  0x00000054 (const dword)  (not used)
IMG_GCI_FILENAME                       3  0x00000003 (const dword)  (not used)
IMG_GCIFILE_HANDLE                     5  0x00000005 (const dword)  (not used)
img_GetWord                         -380  0xfffffe84 (PmmC func) args[3] r=1  (usage 39)
IMG_HEIGHT                            83  0x00000053 (const dword)  (not used)
img_Lighten                         -378  0xfffffe86 (PmmC func) args[2] r=1  (not used)
IMG_MODE                               2  0x00000002 (const dword)  (not used)
IMG_PIXEL_COUNT_HI                    88  0x00000058 (const dword)  (not used)
IMG_PIXEL_COUNT_LO                    87  0x00000057 (const dword)  (not used)
img_SelectReadPosition              -385  0xfffffe7f (PmmC func) args[5] r=1  (not used)
img_SequentialRead                  -386  0xfffffe7e (PmmC func) args[2] r=1  (not used)
img_SetAttributes                   -382  0xfffffe82 (PmmC func) args[3] r=1  (usage 6)
img_SetPosition                     -374  0xfffffe8a (PmmC func) args[4] r=1  (not used)
img_SetWord                         -379  0xfffffe85 (PmmC func) args[4] r=1  (usage 12)
img_Show                            -381  0xfffffe83 (PmmC func) args[2] r=1  (usage 15)
img_Touched                         -384  0xfffffe80 (PmmC func) args[2] r=1  (usage 3)
IMG_WIDTH                             82  0x00000052 (const dword)  (not used)
INDIANRED                          51947  0x0000caeb (const dword)  (not used)
INDIGO                             18448  0x00004810 (const dword)  (not used)
InputControls                        323  0x00000143InputControls                        323  0x00000143 (mem) word[329] (member of C:\Users\agarciamoreno\Documents\GitHub\BCN3DSigmax-Firmware-dev\Project Files LCD v126\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 6)
InputCS                              550  0x00000226 (mem) word (global)  (usage 21)
InputData                            981  0x000003d5InputData                            981  0x000003d5 (mem) word[5027] (member of C:\Users\agarciamoreno\Documents\GitHub\BCN3DSigmax-Firmware-dev\Project Files LCD v126\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 24)
InputType                            302  0x0000012e (mem) word (global)  (usage 24)
INVERSE                               64  0x00000040 (const dword)  (not used)
IPDatasize                            22  0x00000016 (const dword)  (usage 3)
isalnum                              -41  0xffffffd7 (PmmC func) args[1] r=1  (not used)
isalpha                              -40  0xffffffd8 (PmmC func) args[1] r=1  (not used)
isdigit                              -36  0xffffffdc (PmmC func) args[1] r=1  (not used)
islower                              -39  0xffffffd9 (PmmC func) args[1] r=1  (not used)
isprint                              -42  0xffffffd6 (PmmC func) args[1] r=1  (not used)
isspace                              -43  0xffffffd5 (PmmC func) args[1] r=1  (not used)
iStrings0                          11035  0x00002b1biStrings0                          11035  0x00002b1b (mem) word[13] (member of C:\Users\agarciamoreno\Documents\GitHub\BCN3DSigmax-Firmware-dev\Project Files LCD v126\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 3)
iStrings1                          11061  0x00002b35iStrings1                          11061  0x00002b35 (mem) word[13] (member of C:\Users\agarciamoreno\Documents\GitHub\BCN3DSigmax-Firmware-dev\Project Files LCD v126\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 3)
iStrings10                         11295  0x00002c1fiStrings10                         11295  0x00002c1f (mem) word[13] (member of C:\Users\agarciamoreno\Documents\GitHub\BCN3DSigmax-Firmware-dev\Project Files LCD v126\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 3)
iStrings11                         11321  0x00002c39iStrings11                         11321  0x00002c39 (mem) word[13] (member of C:\Users\agarciamoreno\Documents\GitHub\BCN3DSigmax-Firmware-dev\Project Files LCD v126\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 3)
iStrings12                         11347  0x00002c53iStrings12                         11347  0x00002c53 (mem) word[13] (member of C:\Users\agarciamoreno\Documents\GitHub\BCN3DSigmax-Firmware-dev\Project Files LCD v126\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 3)
iStrings13                         11373  0x00002c6diStrings13                         11373  0x00002c6d (mem) word[13] (member of C:\Users\agarciamoreno\Documents\GitHub\BCN3DSigmax-Firmware-dev\Project Files LCD v126\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 3)
iStrings14                         11399  0x00002c87iStrings14                         11399  0x00002c87 (mem) word[13] (member of C:\Users\agarciamoreno\Documents\GitHub\BCN3DSigmax-Firmware-dev\Project Files LCD v126\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 3)
iStrings15                         11425  0x00002ca1iStrings15                         11425  0x00002ca1 (mem) word[13] (member of C:\Users\agarciamoreno\Documents\GitHub\BCN3DSigmax-Firmware-dev\Project Files LCD v126\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 3)
iStrings16                         11451  0x00002cbbiStrings16                         11451  0x00002cbb (mem) word[13] (member of C:\Users\agarciamoreno\Documents\GitHub\BCN3DSigmax-Firmware-dev\Project Files LCD v126\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 3)
iStrings17                         11477  0x00002cd5iStrings17                         11477  0x00002cd5 (mem) word[13] (member of C:\Users\agarciamoreno\Documents\GitHub\BCN3DSigmax-Firmware-dev\Project Files LCD v126\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 3)
iStrings18                         11503  0x00002cefiStrings18                         11503  0x00002cef (mem) word[13] (member of C:\Users\agarciamoreno\Documents\GitHub\BCN3DSigmax-Firmware-dev\Project Files LCD v126\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 3)
iStrings19                         11529  0x00002d09iStrings19                         11529  0x00002d09 (mem) word[13] (member of C:\Users\agarciamoreno\Documents\GitHub\BCN3DSigmax-Firmware-dev\Project Files LCD v126\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 3)
iStrings2                          11087  0x00002b4fiStrings2                          11087  0x00002b4f (mem) word[13] (member of C:\Users\agarciamoreno\Documents\GitHub\BCN3DSigmax-Firmware-dev\Project Files LCD v126\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 3)
iStrings20                         11555  0x00002d23iStrings20                         11555  0x00002d23 (mem) word[13] (member of C:\Users\agarciamoreno\Documents\GitHub\BCN3DSigmax-Firmware-dev\Project Files LCD v126\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 3)
iStrings21                         11581  0x00002d3diStrings21                         11581  0x00002d3d (mem) word[13] (member of C:\Users\agarciamoreno\Documents\GitHub\BCN3DSigmax-Firmware-dev\Project Files LCD v126\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 3)
iStrings22                         11607  0x00002d57iStrings22                         11607  0x00002d57 (mem) word[13] (member of C:\Users\agarciamoreno\Documents\GitHub\BCN3DSigmax-Firmware-dev\Project Files LCD v126\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 3)
iStrings23                         11633  0x00002d71iStrings23                         11633  0x00002d71 (mem) word[13] (member of C:\Users\agarciamoreno\Documents\GitHub\BCN3DSigmax-Firmware-dev\Project Files LCD v126\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 3)
iStrings24                         11659  0x00002d8biStrings24                         11659  0x00002d8b (mem) word[13] (member of C:\Users\agarciamoreno\Documents\GitHub\BCN3DSigmax-Firmware-dev\Project Files LCD v126\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 3)
iStrings25                         11685  0x00002da5iStrings25                         11685  0x00002da5 (mem) word[13] (member of C:\Users\agarciamoreno\Documents\GitHub\BCN3DSigmax-Firmware-dev\Project Files LCD v126\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 3)
iStrings26                         11711  0x00002dbfiStrings26                         11711  0x00002dbf (mem) word[13] (member of C:\Users\agarciamoreno\Documents\GitHub\BCN3DSigmax-Firmware-dev\Project Files LCD v126\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 3)
iStrings27                         11737  0x00002dd9iStrings27                         11737  0x00002dd9 (mem) word[13] (member of C:\Users\agarciamoreno\Documents\GitHub\BCN3DSigmax-Firmware-dev\Project Files LCD v126\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 3)
iStrings28                         11763  0x00002df3iStrings28                         11763  0x00002df3 (mem) word[13] (member of C:\Users\agarciamoreno\Documents\GitHub\BCN3DSigmax-Firmware-dev\Project Files LCD v126\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 3)
iStrings29                         11789  0x00002e0diStrings29                         11789  0x00002e0d (mem) word[13] (member of C:\Users\agarciamoreno\Documents\GitHub\BCN3DSigmax-Firmware-dev\Project Files LCD v126\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 3)
iStrings3                          11113  0x00002b69iStrings3                          11113  0x00002b69 (mem) word[13] (member of C:\Users\agarciamoreno\Documents\GitHub\BCN3DSigmax-Firmware-dev\Project Files LCD v126\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 3)
iStrings30                         11815  0x00002e27iStrings30                         11815  0x00002e27 (mem) word[13] (member of C:\Users\agarciamoreno\Documents\GitHub\BCN3DSigmax-Firmware-dev\Project Files LCD v126\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 3)
iStrings31                         11841  0x00002e41iStrings31                         11841  0x00002e41 (mem) word[13] (member of C:\Users\agarciamoreno\Documents\GitHub\BCN3DSigmax-Firmware-dev\Project Files LCD v126\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 3)
iStrings32                         11867  0x00002e5biStrings32                         11867  0x00002e5b (mem) word[13] (member of C:\Users\agarciamoreno\Documents\GitHub\BCN3DSigmax-Firmware-dev\Project Files LCD v126\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 3)
iStrings33                         11893  0x00002e75iStrings33                         11893  0x00002e75 (mem) word[13] (member of C:\Users\agarciamoreno\Documents\GitHub\BCN3DSigmax-Firmware-dev\Project Files LCD v126\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 3)
iStrings34                         11919  0x00002e8fiStrings34                         11919  0x00002e8f (mem) word[13] (member of C:\Users\agarciamoreno\Documents\GitHub\BCN3DSigmax-Firmware-dev\Project Files LCD v126\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 3)
iStrings35                         11945  0x00002ea9iStrings35                         11945  0x00002ea9 (mem) word[13] (member of C:\Users\agarciamoreno\Documents\GitHub\BCN3DSigmax-Firmware-dev\Project Files LCD v126\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 3)
iStrings36                         11971  0x00002ec3iStrings36                         11971  0x00002ec3 (mem) word[13] (member of C:\Users\agarciamoreno\Documents\GitHub\BCN3DSigmax-Firmware-dev\Project Files LCD v126\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 3)
iStrings37                         11997  0x00002eddiStrings37                         11997  0x00002edd (mem) word[13] (member of C:\Users\agarciamoreno\Documents\GitHub\BCN3DSigmax-Firmware-dev\Project Files LCD v126\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 3)
iStrings38                         12023  0x00002ef7iStrings38                         12023  0x00002ef7 (mem) word[13] (member of C:\Users\agarciamoreno\Documents\GitHub\BCN3DSigmax-Firmware-dev\Project Files LCD v126\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 3)
iStrings39                         12049  0x00002f11iStrings39                         12049  0x00002f11 (mem) word[13] (member of C:\Users\agarciamoreno\Documents\GitHub\BCN3DSigmax-Firmware-dev\Project Files LCD v126\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 3)
iStrings4                          11139  0x00002b83iStrings4                          11139  0x00002b83 (mem) word[13] (member of C:\Users\agarciamoreno\Documents\GitHub\BCN3DSigmax-Firmware-dev\Project Files LCD v126\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 3)
iStrings40                         12075  0x00002f2biStrings40                         12075  0x00002f2b (mem) word[13] (member of C:\Users\agarciamoreno\Documents\GitHub\BCN3DSigmax-Firmware-dev\Project Files LCD v126\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 3)
iStrings41                         12101  0x00002f45iStrings41                         12101  0x00002f45 (mem) word[13] (member of C:\Users\agarciamoreno\Documents\GitHub\BCN3DSigmax-Firmware-dev\Project Files LCD v126\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 3)
iStrings42                         12127  0x00002f5fiStrings42                         12127  0x00002f5f (mem) word[13] (member of C:\Users\agarciamoreno\Documents\GitHub\BCN3DSigmax-Firmware-dev\Project Files LCD v126\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 3)
iStrings43                         12153  0x00002f79iStrings43                         12153  0x00002f79 (mem) word[13] (member of C:\Users\agarciamoreno\Documents\GitHub\BCN3DSigmax-Firmware-dev\Project Files LCD v126\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 3)
iStrings44                         12179  0x00002f93iStrings44                         12179  0x00002f93 (mem) word[13] (member of C:\Users\agarciamoreno\Documents\GitHub\BCN3DSigmax-Firmware-dev\Project Files LCD v126\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 3)
iStrings45                         12205  0x00002fadiStrings45                         12205  0x00002fad (mem) word[13] (member of C:\Users\agarciamoreno\Documents\GitHub\BCN3DSigmax-Firmware-dev\Project Files LCD v126\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 3)
iStrings46                         12231  0x00002fc7iStrings46                         12231  0x00002fc7 (mem) word[13] (member of C:\Users\agarciamoreno\Documents\GitHub\BCN3DSigmax-Firmware-dev\Project Files LCD v126\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 3)
iStrings47                         12257  0x00002fe1iStrings47                         12257  0x00002fe1 (mem) word[13] (member of C:\Users\agarciamoreno\Documents\GitHub\BCN3DSigmax-Firmware-dev\Project Files LCD v126\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 3)
iStrings48                         12283  0x00002ffbiStrings48                         12283  0x00002ffb (mem) word[13] (member of C:\Users\agarciamoreno\Documents\GitHub\BCN3DSigmax-Firmware-dev\Project Files LCD v126\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 3)
iStrings49                         12309  0x00003015iStrings49                         12309  0x00003015 (mem) word[13] (member of C:\Users\agarciamoreno\Documents\GitHub\BCN3DSigmax-Firmware-dev\Project Files LCD v126\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 3)
iStrings5                          11165  0x00002b9diStrings5                          11165  0x00002b9d (mem) word[13] (member of C:\Users\agarciamoreno\Documents\GitHub\BCN3DSigmax-Firmware-dev\Project Files LCD v126\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 3)
iStrings50                         12335  0x0000302fiStrings50                         12335  0x0000302f (mem) word[13] (member of C:\Users\agarciamoreno\Documents\GitHub\BCN3DSigmax-Firmware-dev\Project Files LCD v126\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 3)
iStrings51                         12361  0x00003049iStrings51                         12361  0x00003049 (mem) word[13] (member of C:\Users\agarciamoreno\Documents\GitHub\BCN3DSigmax-Firmware-dev\Project Files LCD v126\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 3)
iStrings52                         12387  0x00003063iStrings52                         12387  0x00003063 (mem) word[13] (member of C:\Users\agarciamoreno\Documents\GitHub\BCN3DSigmax-Firmware-dev\Project Files LCD v126\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 3)
iStrings53                         12413  0x0000307diStrings53                         12413  0x0000307d (mem) word[13] (member of C:\Users\agarciamoreno\Documents\GitHub\BCN3DSigmax-Firmware-dev\Project Files LCD v126\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 3)
iStrings55                         12439  0x00003097iStrings55                         12439  0x00003097 (mem) word[13] (member of C:\Users\agarciamoreno\Documents\GitHub\BCN3DSigmax-Firmware-dev\Project Files LCD v126\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 3)
iStrings6                          11191  0x00002bb7iStrings6                          11191  0x00002bb7 (mem) word[13] (member of C:\Users\agarciamoreno\Documents\GitHub\BCN3DSigmax-Firmware-dev\Project Files LCD v126\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 3)
iStrings7                          11217  0x00002bd1iStrings7                          11217  0x00002bd1 (mem) word[13] (member of C:\Users\agarciamoreno\Documents\GitHub\BCN3DSigmax-Firmware-dev\Project Files LCD v126\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 3)
iStrings8                          11243  0x00002bebiStrings8                          11243  0x00002beb (mem) word[13] (member of C:\Users\agarciamoreno\Documents\GitHub\BCN3DSigmax-Firmware-dev\Project Files LCD v126\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 3)
iStrings9                          11269  0x00002c05iStrings9                          11269  0x00002c05 (mem) word[13] (member of C:\Users\agarciamoreno\Documents\GitHub\BCN3DSigmax-Firmware-dev\Project Files LCD v126\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 3)
isupper                              -38  0xffffffda (PmmC func) args[1] r=1  (not used)
iswhite                              -44  0xffffffd4 (PmmC func) args[1] r=1  (not used)
isxdigit                             -37  0xffffffdb (PmmC func) args[1] r=1  (not used)
ITALIC                                32  0x00000020 (const dword)  (not used)
iterator                            -404  0xfffffe6c (PmmC func) args[1] r=0  (not used)
iUserbutton0                          28  0x0000001c (const ??? 0)  (usage 3)
iUserbutton1                           2  0x00000002 (const ??? 0)  (usage 3)
iUserbutton10                        268  0x0000010c (const ??? 0)  (usage 3)
iUserbutton100                        64  0x00000040 (const ??? 0)  (usage 3)
iUserbutton101                        65  0x00000041 (const ??? 0)  (usage 3)
iUserbutton102                        82  0x00000052 (const ??? 0)  (usage 3)
iUserbutton103                        83  0x00000053 (const ??? 0)  (usage 3)
iUserbutton104                        84  0x00000054 (const ??? 0)  (usage 3)
iUserbutton105                        85  0x00000055 (const ??? 0)  (usage 3)
iUserbutton106                        86  0x00000056 (const ??? 0)  (usage 3)
iUserbutton107                        87  0x00000057 (const ??? 0)  (usage 3)
iUserbutton108                        88  0x00000058 (const ??? 0)  (usage 3)
iUserbutton109                        89  0x00000059 (const ??? 0)  (usage 3)
iUserbutton11                         68  0x00000044 (const ??? 0)  (usage 3)
iUserbutton110                        90  0x0000005a (const ??? 0)  (usage 3)
iUserbutton111                        91  0x0000005b (const ??? 0)  (usage 3)
iUserbutton112                        94  0x0000005e (const ??? 0)  (usage 3)
iUserbutton113                        95  0x0000005f (const ??? 0)  (usage 3)
iUserbutton114                        96  0x00000060 (const ??? 0)  (usage 3)
iUserbutton115                        99  0x00000063 (const ??? 0)  (usage 3)
iUserbutton116                       100  0x00000064 (const ??? 0)  (usage 3)
iUserbutton117                       101  0x00000065 (const ??? 0)  (usage 3)
iUserbutton118                       222  0x000000de (const ??? 0)  (usage 3)
iUserbutton119                       139  0x0000008b (const ??? 0)  (usage 3)
iUserbutton12                         23  0x00000017 (const ??? 0)  (usage 3)
iUserbutton120                       201  0x000000c9 (const ??? 0)  (usage 3)
iUserbutton121                       197  0x000000c5 (const ??? 0)  (usage 3)
iUserbutton122                       198  0x000000c6 (const ??? 0)  (usage 3)
iUserbutton123                       204  0x000000cc (const ??? 0)  (usage 3)
iUserbutton124                       205  0x000000cd (const ??? 0)  (usage 3)
iUserbutton125                       206  0x000000ce (const ??? 0)  (usage 3)
iUserbutton126                        51  0x00000033 (const ??? 0)  (usage 3)
iUserbutton127                       140  0x0000008c (const ??? 0)  (usage 3)
iUserbutton128                       144  0x00000090 (const ??? 0)  (usage 3)
iUserbutton129                       145  0x00000091 (const ??? 0)  (usage 3)
iUserbutton13                         24  0x00000018 (const ??? 0)  (usage 3)
iUserbutton130                       146  0x00000092 (const ??? 0)  (usage 3)
iUserbutton131                       133  0x00000085 (const ??? 0)  (usage 3)
iUserbutton132                       208  0x000000d0 (const ??? 0)  (usage 3)
iUserbutton133                       210  0x000000d2 (const ??? 0)  (usage 3)
iUserbutton134                       289  0x00000121 (const ??? 0)  (usage 3)
iUserbutton135                       116  0x00000074 (const ??? 0)  (usage 3)
iUserbutton136                       223  0x000000df (const ??? 0)  (usage 3)
iUserbutton137                       224  0x000000e0 (const ??? 0)  (usage 3)
iUserbutton138                       212  0x000000d4 (const ??? 0)  (usage 3)
iUserbutton139                       213  0x000000d5 (const ??? 0)  (usage 3)
iUserbutton14                         11  0x0000000b (const ??? 0)  (usage 3)
iUserbutton140                       214  0x000000d6 (const ??? 0)  (usage 3)
iUserbutton141                       215  0x000000d7 (const ??? 0)  (usage 3)
iUserbutton142                       149  0x00000095 (const ??? 0)  (usage 3)
iUserbutton143                       150  0x00000096 (const ??? 0)  (usage 3)
iUserbutton144                       151  0x00000097 (const ??? 0)  (usage 3)
iUserbutton145                       152  0x00000098 (const ??? 0)  (usage 3)
iUserbutton146                       153  0x00000099 (const ??? 0)  (usage 3)
iUserbutton147                       154  0x0000009a (const ??? 0)  (usage 3)
iUserbutton148                       155  0x0000009b (const ??? 0)  (usage 3)
iUserbutton149                       156  0x0000009c (const ??? 0)  (usage 3)
iUserbutton15                          8  0x00000008 (const ??? 0)  (usage 3)
iUserbutton150                       157  0x0000009d (const ??? 0)  (usage 3)
iUserbutton151                       108  0x0000006c (const ??? 0)  (usage 3)
iUserbutton152                       109  0x0000006d (const ??? 0)  (usage 3)
iUserbutton153                       216  0x000000d8 (const ??? 0)  (usage 3)
iUserbutton154                       110  0x0000006e (const ??? 0)  (usage 3)
iUserbutton155                       111  0x0000006f (const ??? 0)  (usage 3)
iUserbutton156                       112  0x00000070 (const ??? 0)  (usage 3)
iUserbutton157                       113  0x00000071 (const ??? 0)  (usage 3)
iUserbutton158                       105  0x00000069 (const ??? 0)  (usage 3)
iUserbutton159                        31  0x0000001f (const ??? 0)  (usage 3)
iUserbutton16                         36  0x00000024 (const ??? 0)  (usage 3)
iUserbutton160                       114  0x00000072 (const ??? 0)  (usage 3)
iUserbutton161                       158  0x0000009e (const ??? 0)  (usage 3)
iUserbutton162                       160  0x000000a0 (const ??? 0)  (usage 3)
iUserbutton163                       161  0x000000a1 (const ??? 0)  (usage 3)
iUserbutton164                       162  0x000000a2 (const ??? 0)  (usage 3)
iUserbutton165                       163  0x000000a3 (const ??? 0)  (usage 3)
iUserbutton166                       164  0x000000a4 (const ??? 0)  (usage 3)
iUserbutton167                       165  0x000000a5 (const ??? 0)  (usage 3)
iUserbutton168                       166  0x000000a6 (const ??? 0)  (usage 3)
iUserbutton169                       167  0x000000a7 (const ??? 0)  (usage 3)
iUserbutton17                         38  0x00000026 (const ??? 0)  (usage 3)
iUserbutton170                       168  0x000000a8 (const ??? 0)  (usage 3)
iUserbutton171                       228  0x000000e4 (const ??? 0)  (usage 3)
iUserbutton172                       301  0x0000012d (const ??? 0)  (usage 3)
iUserbutton173                       303  0x0000012f (const ??? 0)  (usage 3)
iUserbutton174                       304  0x00000130 (const ??? 0)  (usage 3)
iUserbutton175                       309  0x00000135 (const ??? 0)  (usage 3)
iUserbutton176                       311  0x00000137 (const ??? 0)  (usage 3)
iUserbutton177                       231  0x000000e7 (const ??? 0)  (usage 3)
iUserbutton178                       232  0x000000e8 (const ??? 0)  (usage 3)
iUserbutton179                       233  0x000000e9 (const ??? 0)  (usage 3)
iUserbutton18                         34  0x00000022 (const ??? 0)  (usage 3)
iUserbutton180                       234  0x000000ea (const ??? 0)  (usage 3)
iUserbutton181                       236  0x000000ec (const ??? 0)  (usage 3)
iUserbutton182                       237  0x000000ed (const ??? 0)  (usage 3)
iUserbutton183                       242  0x000000f2 (const ??? 0)  (usage 3)
iUserbutton184                       243  0x000000f3 (const ??? 0)  (usage 3)
iUserbutton185                       244  0x000000f4 (const ??? 0)  (usage 3)
iUserbutton186                       239  0x000000ef (const ??? 0)  (usage 3)
iUserbutton187                       240  0x000000f0 (const ??? 0)  (usage 3)
iUserbutton188                       247  0x000000f7 (const ??? 0)  (usage 3)
iUserbutton189                       251  0x000000fb (const ??? 0)  (usage 3)
iUserbutton19                         35  0x00000023 (const ??? 0)  (usage 3)
iUserbutton190                       254  0x000000fe (const ??? 0)  (usage 3)
iUserbutton191                       265  0x00000109 (const ??? 0)  (usage 3)
iUserbutton192                       256  0x00000100 (const ??? 0)  (usage 3)
iUserbutton193                       270  0x0000010e (const ??? 0)  (usage 3)
iUserbutton194                       260  0x00000104 (const ??? 0)  (usage 3)
iUserbutton195                       261  0x00000105 (const ??? 0)  (usage 3)
iUserbutton196                       271  0x0000010f (const ??? 0)  (usage 3)
iUserbutton197                       286  0x0000011e (const ??? 0)  (usage 3)
iUserbutton198                       287  0x0000011f (const ??? 0)  (usage 3)
iUserbutton199                       272  0x00000110 (const ??? 0)  (usage 3)
iUserbutton2                          29  0x0000001d (const ??? 0)  (usage 3)
iUserbutton20                         66  0x00000042 (const ??? 0)  (usage 3)
iUserbutton200                       273  0x00000111 (const ??? 0)  (usage 3)
iUserbutton201                       274  0x00000112 (const ??? 0)  (usage 3)
iUserbutton202                       275  0x00000113 (const ??? 0)  (usage 3)
iUserbutton203                       276  0x00000114 (const ??? 0)  (usage 3)
iUserbutton204                       277  0x00000115 (const ??? 0)  (usage 3)
iUserbutton205                       279  0x00000117 (const ??? 0)  (usage 3)
iUserbutton206                       281  0x00000119 (const ??? 0)  (usage 3)
iUserbutton207                       282  0x0000011a (const ??? 0)  (usage 3)
iUserbutton208                       317  0x0000013d (const ??? 0)  (usage 3)
iUserbutton209                       288  0x00000120 (const ??? 0)  (usage 3)
iUserbutton21                         56  0x00000038 (const ??? 0)  (usage 3)
iUserbutton210                       291  0x00000123 (const ??? 0)  (usage 3)
iUserbutton211                       294  0x00000126 (const ??? 0)  (usage 3)
iUserbutton212                       297  0x00000129 (const ??? 0)  (usage 3)
iUserbutton213                       298  0x0000012a (const ??? 0)  (usage 3)
iUserbutton214                       318  0x0000013e (const ??? 0)  (usage 3)
iUserbutton215                       292  0x00000124 (const ??? 0)  (usage 3)
iUserbutton216                       191  0x000000bf (const ??? 0)  (usage 3)
iUserbutton217                       219  0x000000db (const ??? 0)  (usage 3)
iUserbutton218                       266  0x0000010a (const ??? 0)  (usage 3)
iUserbutton219                       321  0x00000141 (const ??? 0)  (usage 3)
iUserbutton22                         57  0x00000039 (const ??? 0)  (usage 3)
iUserbutton220                       322  0x00000142 (const ??? 0)  (usage 3)
iUserbutton221                       325  0x00000145 (const ??? 0)  (usage 3)
iUserbutton222                       327  0x00000147 (const ??? 0)  (usage 3)
iUserbutton223                       328  0x00000148 (const ??? 0)  (usage 3)
iUserbutton23                        134  0x00000086 (const ??? 0)  (usage 3)
iUserbutton24                        135  0x00000087 (const ??? 0)  (usage 3)
iUserbutton25                        141  0x0000008d (const ??? 0)  (usage 3)
iUserbutton26                         92  0x0000005c (const ??? 0)  (usage 3)
iUserbutton27                        118  0x00000076 (const ??? 0)  (usage 3)
iUserbutton28                        119  0x00000077 (const ??? 0)  (usage 3)
iUserbutton29                        120  0x00000078 (const ??? 0)  (usage 3)
iUserbutton3                         179  0x000000b3 (const ??? 0)  (usage 3)
iUserbutton30                        122  0x0000007a (const ??? 0)  (usage 3)
iUserbutton31                        123  0x0000007b (const ??? 0)  (usage 3)
iUserbutton32                         39  0x00000027 (const ??? 0)  (usage 3)
iUserbutton33                         40  0x00000028 (const ??? 0)  (usage 3)
iUserbutton34                        184  0x000000b8 (const ??? 0)  (usage 3)
iUserbutton35                        124  0x0000007c (const ??? 0)  (usage 3)
iUserbutton36                        172  0x000000ac (const ??? 0)  (usage 3)
iUserbutton37                          9  0x00000009 (const ??? 0)  (usage 3)
iUserbutton38                        174  0x000000ae (const ??? 0)  (usage 3)
iUserbutton39                        175  0x000000af (const ??? 0)  (usage 3)
iUserbutton4                           6  0x00000006 (const ??? 0)  (usage 3)
iUserbutton40                        180  0x000000b4 (const ??? 0)  (usage 3)
iUserbutton41                        104  0x00000068 (const ??? 0)  (usage 3)
iUserbutton42                        181  0x000000b5 (const ??? 0)  (usage 3)
iUserbutton43                        130  0x00000082 (const ??? 0)  (usage 3)
iUserbutton44                        324  0x00000144 (const ??? 0)  (usage 3)
iUserbutton45                        182  0x000000b6 (const ??? 0)  (usage 3)
iUserbutton46                        183  0x000000b7 (const ??? 0)  (usage 3)
iUserbutton47                        131  0x00000083 (const ??? 0)  (usage 3)
iUserbutton48                        132  0x00000084 (const ??? 0)  (usage 3)
iUserbutton49                        253  0x000000fd (const ??? 0)  (usage 3)
iUserbutton5                           7  0x00000007 (const ??? 0)  (usage 3)
iUserbutton50                         30  0x0000001e (const ??? 0)  (usage 3)
iUserbutton51                         58  0x0000003a (const ??? 0)  (usage 3)
iUserbutton52                         42  0x0000002a (const ??? 0)  (usage 3)
iUserbutton53                         53  0x00000035 (const ??? 0)  (usage 3)
iUserbutton54                         25  0x00000019 (const ??? 0)  (usage 3)
iUserbutton55                         10  0x0000000a (const ??? 0)  (usage 3)
iUserbutton56                         12  0x0000000c (const ??? 0)  (usage 3)
iUserbutton57                         26  0x0000001a (const ??? 0)  (usage 3)
iUserbutton58                        126  0x0000007e (const ??? 0)  (usage 3)
iUserbutton59                        187  0x000000bb (const ??? 0)  (usage 3)
iUserbutton6                          18  0x00000012 (const ??? 0)  (usage 3)
iUserbutton60                        137  0x00000089 (const ??? 0)  (usage 3)
iUserbutton61                          3  0x00000003 (const ??? 0)  (usage 3)
iUserbutton62                        138  0x0000008a (const ??? 0)  (usage 3)
iUserbutton63                        188  0x000000bc (const ??? 0)  (usage 3)
iUserbutton64                        147  0x00000093 (const ??? 0)  (usage 3)
iUserbutton65                         47  0x0000002f (const ??? 0)  (usage 3)
iUserbutton66                        218  0x000000da (const ??? 0)  (usage 3)
iUserbutton67                        246  0x000000f6 (const ??? 0)  (usage 3)
iUserbutton68                        226  0x000000e2 (const ??? 0)  (usage 3)
iUserbutton69                        249  0x000000f9 (const ??? 0)  (usage 3)
iUserbutton7                          19  0x00000013 (const ??? 0)  (usage 3)
iUserbutton70                         48  0x00000030 (const ??? 0)  (usage 3)
iUserbutton71                        170  0x000000aa (const ??? 0)  (usage 3)
iUserbutton72                         59  0x0000003b (const ??? 0)  (usage 3)
iUserbutton73                        142  0x0000008e (const ??? 0)  (usage 3)
iUserbutton74                        190  0x000000be (const ??? 0)  (usage 3)
iUserbutton75                         44  0x0000002c (const ??? 0)  (usage 3)
iUserbutton76                         45  0x0000002d (const ??? 0)  (usage 3)
iUserbutton77                         46  0x0000002e (const ??? 0)  (usage 3)
iUserbutton78                         49  0x00000031 (const ??? 0)  (usage 3)
iUserbutton79                         50  0x00000032 (const ??? 0)  (usage 3)
iUserbutton8                          20  0x00000014 (const ??? 0)  (usage 3)
iUserbutton80                        189  0x000000bd (const ??? 0)  (usage 3)
iUserbutton81                         69  0x00000045 (const ??? 0)  (usage 3)
iUserbutton82                         70  0x00000046 (const ??? 0)  (usage 3)
iUserbutton83                         71  0x00000047 (const ??? 0)  (usage 3)
iUserbutton84                        200  0x000000c8 (const ??? 0)  (usage 3)
iUserbutton85                         13  0x0000000d (const ??? 0)  (usage 3)
iUserbutton86                         14  0x0000000e (const ??? 0)  (usage 3)
iUserbutton87                        221  0x000000dd (const ??? 0)  (usage 3)
iUserbutton88                          4  0x00000004 (const ??? 0)  (usage 3)
iUserbutton89                         32  0x00000020 (const ??? 0)  (usage 3)
iUserbutton9                          21  0x00000015 (const ??? 0)  (usage 3)
iUserbutton90                        203  0x000000cb (const ??? 0)  (usage 3)
iUserbutton91                        195  0x000000c3 (const ??? 0)  (usage 3)
iUserbutton92                        196  0x000000c4 (const ??? 0)  (usage 3)
iUserbutton93                        300  0x0000012c (const ??? 0)  (usage 3)
iUserbutton94                         76  0x0000004c (const ??? 0)  (usage 3)
iUserbutton95                         79  0x0000004f (const ??? 0)  (usage 3)
iUserbutton96                         60  0x0000003c (const ??? 0)  (usage 3)
iUserbutton97                         61  0x0000003d (const ??? 0)  (usage 3)
iUserbutton98                         62  0x0000003e (const ??? 0)  (usage 3)
iUserbutton99                         63  0x0000003f (const ??? 0)  (usage 3)
iUserimages0                         199  0x000000c7 (const ??? 0)  (usage 3)
iUserimages1                          15  0x0000000f (const ??? 0)  (usage 3)
iUserimages2                         278  0x00000116 (const ??? 0)  (usage 3)
iUserimages4                          77  0x0000004d (const ??? 0)  (usage 3)
iUserimages5                          80  0x00000050 (const ??? 0)  (usage 3)
iVideo0                                0  0x00000000 (const ??? 0)  (usage 3)
iVideo1                              177  0x000000b1 (const ??? 0)  (usage 3)
iVideo10                             106  0x0000006a (const ??? 0)  (usage 3)
iVideo11                              54  0x00000036 (const ??? 0)  (usage 3)
iVideo14                              16  0x00000010 (const ??? 0)  (usage 3)
iVideo15                             185  0x000000b9 (const ??? 0)  (usage 3)
iVideo16                              97  0x00000061 (const ??? 0)  (usage 3)
iVideo17                             102  0x00000066 (const ??? 0)  (usage 3)
iVideo18                             295  0x00000127 (const ??? 0)  (usage 3)
iVideo19                             258  0x00000102 (const ??? 0)  (usage 3)
iVideo2                              193  0x000000c1 (const ??? 0)  (usage 3)
iVideo20                             115  0x00000073 (const ??? 0)  (usage 3)
iVideo21                             306  0x00000132 (const ??? 0)  (usage 3)
iVideo22                             313  0x00000139 (const ??? 0)  (usage 3)
iVideo23                             315  0x0000013b (const ??? 0)  (usage 3)
iVideo3                               72  0x00000048 (const ??? 0)  (usage 3)
iVideo4                               73  0x00000049 (const ??? 0)  (usage 3)
iVideo5                               74  0x0000004a (const ??? 0)  (usage 3)
iVideo6                              128  0x00000080 (const ??? 0)  (usage 3)
iVideo7                              263  0x00000107 (const ??? 0)  (usage 3)
iVideo8                              284  0x0000011c (const ??? 0)  (usage 3)
iVideo9                              229  0x000000e5 (const ??? 0)  (usage 3)
IVORY                              65534  0x0000fffe (const dword)  (not used)
KHAKI                              63281  0x0000f731 (const dword)  (not used)
kKeyboardKeystrokes                13477  0x000034a5kKeyboardKeystrokes                13477  0x000034a5 (mem) word[1] (member of C:\Users\agarciamoreno\Documents\GitHub\BCN3DSigmax-Firmware-dev\Project Files LCD v126\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (not used)
LANDSCAPE                              0  0x00000000 (const dword)  (usage 3)
LANDSCAPE_R                            1  0x00000001 (const dword)  (not used)
LAVENDER                           59199  0x0000e73f (const dword)  (not used)
LAVENDERBLUSH                      65438  0x0000ff9e (const dword)  (not used)
LAWNGREEN                          32736  0x00007fe0 (const dword)  (not used)
LEFT_POS                               2  0x00000002 (const dword)  (not used)
LEMONCHIFFON                       65497  0x0000ffd9 (const dword)  (not used)
LIGHTBLUE                          44764  0x0000aedc (const dword)  (not used)
LIGHTCORAL                         62480  0x0000f410 (const dword)  (not used)
LIGHTCYAN                          59391  0x0000e7ff (const dword)  (not used)
LIGHTGOLD                          65498  0x0000ffda (const dword)  (not used)
LIGHTGREEN                         38770  0x00009772 (const dword)  (not used)
LIGHTGREY                          54938  0x0000d69a (const dword)  (not used)
LIGHTPINK                          64952  0x0000fdb8 (const dword)  (not used)
LIGHTSALMON                        64783  0x0000fd0f (const dword)  (not used)
LIGHTSEAGREEN                       9621  0x00002595 (const dword)  (not used)
LIGHTSKYBLUE                       34431  0x0000867f (const dword)  (not used)
LIGHTSLATEGRAY                     29779  0x00007453 (const dword)  (not used)
LIGHTSTEELBLUE                     46651  0x0000b63b (const dword)  (not used)
LIGHTYELLOW                        65532  0x0000fffc (const dword)  (not used)
LIME                                2016  0x000007e0 (const dword)  (not used)
LIMEGREEN                          13926  0x00003666 (const dword)  (not used)
LINE_PATTERN                          26  0x0000001a (const dword)  (not used)
LINEN                              65436  0x0000ff9c (const dword)  (not used)
LO                                     0  0x00000000 (const dword)  (not used)
LObyte                               -47  0xffffffd1 (PmmC func) args[1] r=1  (not used)
LOCAL                                N/A         N/A (macro) //   (not used)
LPCOARSE                           61680  0x0000f0f0 (const dword)  (not used)
LPDASHDOT                            975  0x000003cf (const dword)  (not used)
LPDASHDOTDOT                         819  0x00000333 (const dword)  (not used)
LPFINE                             43690  0x0000aaaa (const dword)  (not used)
LPMEDIUM                           13107  0x00003333 (const dword)  (not used)
LPSOLID                                0  0x00000000 (const dword)  (not used)
M_PA0                                  1  0x00000001 (const dword)  (not used)
M_PA1                                  2  0x00000002 (const dword)  (not used)
M_PA10                              1024  0x00000400 (const dword)  (not used)
M_PA11                              2048  0x00000800 (const dword)  (not used)
M_PA12                              4096  0x00001000 (const dword)  (not used)
M_PA13                              8192  0x00002000 (const dword)  (not used)
M_PA14                             16384  0x00004000 (const dword)  (not used)
M_PA15                             32768  0x00008000 (const dword)  (not used)
M_PA2                                  4  0x00000004 (const dword)  (not used)
M_PA3                                  8  0x00000008 (const dword)  (not used)
M_PA4                                 16  0x00000010 (const dword)  (not used)
M_PA5                                 32  0x00000020 (const dword)  (not used)
M_PA6                                 64  0x00000040 (const dword)  (not used)
M_PA7                                128  0x00000080 (const dword)  (not used)
M_PA8                                256  0x00000100 (const dword)  (not used)
M_PA9                                512  0x00000200 (const dword)  (not used)
MAGENTA                            63519  0x0000f81f (const dword)  (not used)
main                               13883  0x0000363b (User func) args[0] r=0  (not used)
MAROON                             32768  0x00008000 (const dword)  (not used)
MAX                                  -55  0xffffffc9 (PmmC func) args[2] r=1  (not used)
MaxTotObjects                         33  0x00000021 (const dword)  (usage 6)
MDA                                63552  0x0000f840 (const dword)  (not used)
MEDIA_ADDRESS_HI                      91  0x0000005b (const dword)  (not used)
MEDIA_ADDRESS_LO                      90  0x0000005a (const dword)  (not used)
media_Flush                         -218  0xffffff26 (PmmC func) args[0] r=1  (not used)
media_Image                         -217  0xffffff27 (PmmC func) args[2] r=0  (not used)
media_Init                          -219  0xffffff25 (PmmC func) args[0] r=1  (not used)
media_RdSector                      -211  0xffffff2d (PmmC func) args[1] r=1  (not used)
media_ReadByte                      -213  0xffffff2b (PmmC func) args[0] r=1  (not used)
media_ReadWord                      -214  0xffffff2a (PmmC func) args[0] r=1  (not used)
MEDIA_SECTOR_COUNT                    94  0x0000005e (const dword)  (not used)
MEDIA_SECTOR_HI                       93  0x0000005d (const dword)  (not used)
MEDIA_SECTOR_LO                       92  0x0000005c (const dword)  (not used)
media_SetAdd                        -209  0xffffff2f (PmmC func) args[2] r=0  (not used)
media_SetSector                     -210  0xffffff2e (PmmC func) args[2] r=0  (not used)
media_Video                         -207  0xffffff31 (PmmC func) args[2] r=0  (not used)
media_VideoFrame                    -208  0xffffff30 (PmmC func) args[3] r=0  (not used)
media_WriteByte                     -215  0xffffff29 (PmmC func) args[1] r=1  (not used)
media_WriteWord                     -216  0xffffff28 (PmmC func) args[1] r=1  (not used)
media_WrSector                      -212  0xffffff2c (PmmC func) args[1] r=1  (not used)
MEDIUMAQUAMARINE                   26229  0x00006675 (const dword)  (not used)
MEDIUMBLUE                            25  0x00000019 (const dword)  (not used)
MEDIUMORCHID                       47802  0x0000baba (const dword)  (not used)
MEDIUMPURPLE                       37787  0x0000939b (const dword)  (not used)
MEDIUMSEAGREEN                     15758  0x00003d8e (const dword)  (not used)
MEDIUMSLATEBLUE                    31581  0x00007b5d (const dword)  (not used)
MEDIUMSPRINGGREEN                   2003  0x000007d3 (const dword)  (not used)
MEDIUMTURQUOISE                    20121  0x00004e99 (const dword)  (not used)
MEDIUMVIOLETRED                    49328  0x0000c0b0 (const dword)  (not used)
mem_Alloc                           -413  0xfffffe63 (PmmC func) args[1] r=1  (not used)
mem_AllocV                          -414  0xfffffe62 (PmmC func) args[1] r=1  (not used)
mem_AllocZ                          -415  0xfffffe61 (PmmC func) args[1] r=1  (not used)
mem_ArrayOp1                         -67  0xffffffbd (PmmC func) args[4] r=0  (not used)
mem_ArrayOp2                         -68  0xffffffbc (PmmC func) args[5] r=0  (not used)
mem_Compare                         -421  0xfffffe5b (PmmC func) args[3] r=1  (not used)
mem_Copy                            -420  0xfffffe5c (PmmC func) args[3] r=1  (not used)
mem_Free                            -417  0xfffffe5f (PmmC func) args[1] r=1  (not used)
mem_Heap                            -418  0xfffffe5e (PmmC func) args[0] r=1  (not used)
mem_Realloc                         -416  0xfffffe60 (PmmC func) args[2] r=1  (not used)
mem_Set                             -419  0xfffffe5d (PmmC func) args[3] r=1  (not used)
MIDI                                   9  0x00000009 (const dword)  (not used)
MIDNIGHTBLUE                        6350  0x000018ce (const dword)  (not used)
MIN                                  -54  0xffffffca (PmmC func) args[2] r=1  (not used)
MINTCREAM                          63487  0x0000f7ff (const dword)  (not used)
MISTYROSE                          65340  0x0000ff3c (const dword)  (not used)
MOCCASIN                           65334  0x0000ff36 (const dword)  (not used)
NAK                                   21  0x00000015 (const dword)  (usage 3)
nak0                               17479  0x00004447 (User func) args[0] r=0  (usage 24)
nAniTimers                             0  0x00000000 (const dword)  (not used)
NAVAJOWHITE                        65269  0x0000fef5 (const dword)  (not used)
NAVY                                  16  0x00000010 (const dword)  (usage 15)
nInputs                              457  0x000001c9 (const dword)  (usage 3)
nObjects                             329  0x00000149 (const dword)  (not used)
NOTOUCH                                0  0x00000000 (const dword)  (not used)
NP_565                                 0  0x00000000 (const dword)  (not used)
NP_RGB                                 1  0x00000001 (const dword)  (not used)
NP_Write                            -535  0xfffffde9 (PmmC func) args[7] r=1  (not used)
NP_XRGB                                2  0x00000002 (const dword)  (not used)
nStrings                              56  0x00000038 (const dword)  (usage 3)
NybleSwap                            -50  0xffffffce (PmmC func) args[1] r=1  (not used)
o4Dbuttons                         12849  0x00003231o4Dbuttons                         12849  0x00003231 (mem) word[1] (member of C:\Users\agarciamoreno\Documents\GitHub\BCN3DSigmax-Firmware-dev\Project Files LCD v126\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 3)
oAngularmeters                     12479  0x000030bfoAngularmeters                     12479  0x000030bf (mem) word[1] (member of C:\Users\agarciamoreno\Documents\GitHub\BCN3DSigmax-Firmware-dev\Project Files LCD v126\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 3)
oAniButtons                        12851  0x00003233oAniButtons                        12851  0x00003233 (mem) word[1] (member of C:\Users\agarciamoreno\Documents\GitHub\BCN3DSigmax-Firmware-dev\Project Files LCD v126\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 3)
OBJECT_COLOUR                         18  0x00000012 (const dword)  (not used)
oColorPickers                      12853  0x00003235oColorPickers                      12853  0x00003235 (mem) word[1] (member of C:\Users\agarciamoreno\Documents\GitHub\BCN3DSigmax-Firmware-dev\Project Files LCD v126\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 3)
oCoolgauges                        12481  0x000030c1oCoolgauges                        12481  0x000030c1 (mem) word[1] (member of C:\Users\agarciamoreno\Documents\GitHub\BCN3DSigmax-Firmware-dev\Project Files LCD v126\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 3)
oCustomdigitss                     12483  0x000030c3oCustomdigitss                     12483  0x000030c3 (mem) word[1] (member of C:\Users\agarciamoreno\Documents\GitHub\BCN3DSigmax-Firmware-dev\Project Files LCD v126\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 3)
oDipSwitchs                        12465  0x000030b1oDipSwitchs                        12465  0x000030b1 (mem) word[1] (member of C:\Users\agarciamoreno\Documents\GitHub\BCN3DSigmax-Firmware-dev\Project Files LCD v126\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 3)
OFF                                    0  0x00000000 (const dword)  (usage 3)
oForms                             12485  0x000030c5oForms                             12485  0x000030c5 (mem) word[80] (member of C:\Users\agarciamoreno\Documents\GitHub\BCN3DSigmax-Firmware-dev\Project Files LCD v126\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 3)
Ofs_Digits_Digits                      2  0x00000002 (const dword)  (not used)
Ofs_Digits_LeadingBlanks               8  0x00000008 (const dword)  (not used)
Ofs_Digits_Left                        0  0x00000000 (const dword)  (not used)
Ofs_Digits_MinDigits                   4  0x00000004 (const dword)  (not used)
Ofs_Digits_Widthdigit                  6  0x00000006 (const dword)  (not used)
Ofs_IPD_DOWN                          16  0x00000010 (const dword)  (usage 6)
Ofs_IPD_OBJVIDX                       20  0x00000014 (const dword)  (usage 9)
Ofs_IPD_P1                             2  0x00000002 (const dword)  (usage 15)
Ofs_IPD_P2                             4  0x00000004 (const dword)  (usage 48)
Ofs_IPD_P3                             6  0x00000006 (const dword)  (usage 9)
Ofs_IPD_P4                             8  0x00000008 (const dword)  (usage 3)
Ofs_IPD_P5                            10  0x0000000a (const dword)  (usage 9)
Ofs_IPD_P6                            12  0x0000000c (const dword)  (usage 18)
Ofs_IPD_P7                            14  0x0000000e (const dword)  (not used)
Ofs_IPD_RELEASE                       18  0x00000012 (const dword)  (usage 9)
Ofs_String_Ansi                       22  0x00000016 (const dword)  (usage 3)
Ofs_String_BGColor                    16  0x00000010 (const dword)  (usage 6)
Ofs_String_FGColor                    14  0x0000000e (const dword)  (usage 3)
Ofs_String_FontAttribs                18  0x00000012 (const dword)  (usage 3)
Ofs_String_Form                       24  0x00000018 (const dword)  (usage 3)
Ofs_String_Size                        4  0x00000004 (const dword)  (usage 3)
Ofs_String_StartH                      0  0x00000000 (const dword)  (usage 3)
Ofs_String_StartL                      2  0x00000002 (const dword)  (usage 3)
Ofs_String_Transparent                20  0x00000014 (const dword)  (usage 3)
Ofs_String_x1                          6  0x00000006 (const dword)  (usage 12)
Ofs_String_x2                         10  0x0000000a (const dword)  (usage 9)
Ofs_String_y1                          8  0x00000008 (const dword)  (usage 12)
Ofs_String_y2                         12  0x0000000c (const dword)  (usage 9)
oGauges                            12645  0x00003165oGauges                            12645  0x00003165 (mem) word[1] (member of C:\Users\agarciamoreno\Documents\GitHub\BCN3DSigmax-Firmware-dev\Project Files LCD v126\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 3)
oGSliders                          12473  0x000030b9oGSliders                          12473  0x000030b9 (mem) word[1] (member of C:\Users\agarciamoreno\Documents\GitHub\BCN3DSigmax-Firmware-dev\Project Files LCD v126\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 3)
oImages                            12647  0x00003167oImages                            12647  0x00003167 (mem) word[1] (member of C:\Users\agarciamoreno\Documents\GitHub\BCN3DSigmax-Firmware-dev\Project Files LCD v126\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 3)
oKeyboards                         12649  0x00003169oKeyboards                         12649  0x00003169 (mem) word[1] (member of C:\Users\agarciamoreno\Documents\GitHub\BCN3DSigmax-Firmware-dev\Project Files LCD v126\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 3)
oKnobs                             12467  0x000030b3oKnobs                             12467  0x000030b3 (mem) word[1] (member of C:\Users\agarciamoreno\Documents\GitHub\BCN3DSigmax-Firmware-dev\Project Files LCD v126\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 3)
OLDLACE                            65468  0x0000ffbc (const dword)  (not used)
oLeddigitss                        12653  0x0000316doLeddigitss                        12653  0x0000316d (mem) word[1] (member of C:\Users\agarciamoreno\Documents\GitHub\BCN3DSigmax-Firmware-dev\Project Files LCD v126\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 3)
oLeds                              12651  0x0000316boLeds                              12651  0x0000316b (mem) word[1] (member of C:\Users\agarciamoreno\Documents\GitHub\BCN3DSigmax-Firmware-dev\Project Files LCD v126\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 3)
OLIVE                              33792  0x00008400 (const dword)  (not used)
OLIVEDRAB                          27748  0x00006c64 (const dword)  (not used)
oMagicObjects                      13305  0x000033f9oMagicObjects                      13305  0x000033f9 (mem) word[1] (member of C:\Users\agarciamoreno\Documents\GitHub\BCN3DSigmax-Firmware-dev\Project Files LCD v126\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (not used)
oMeters                            12655  0x0000316foMeters                            12655  0x0000316f (mem) word[1] (member of C:\Users\agarciamoreno\Documents\GitHub\BCN3DSigmax-Firmware-dev\Project Files LCD v126\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 3)
ON                                     1  0x00000001 (const dword)  (usage 3)
oObjects                             228  0x000000e4 (mem) word[34] (global)  (usage 108)
OP1_ADD                                5  0x00000005 (const dword)  (not used)
OP1_AND                                2  0x00000002 (const dword)  (not used)
OP1_BLACKEN                           16  0x00000010 (const dword)  (not used)
OP1_DARKEN                            18  0x00000012 (const dword)  (not used)
OP1_DIV                                8  0x00000008 (const dword)  (not used)
OP1_GRAY                              14  0x0000000e (const dword)  (not used)
OP1_IOR                                3  0x00000003 (const dword)  (not used)
OP1_LIGHTEN                           17  0x00000011 (const dword)  (not used)
OP1_MUL                                7  0x00000007 (const dword)  (not used)
OP1_NOP                                0  0x00000000 (const dword)  (not used)
OP1_REV                                9  0x00000009 (const dword)  (not used)
OP1_ROL                               12  0x0000000c (const dword)  (not used)
OP1_ROR                               13  0x0000000d (const dword)  (not used)
OP1_SET                                1  0x00000001 (const dword)  (not used)
OP1_SHL                               10  0x0000000a (const dword)  (not used)
OP1_SHR                               11  0x0000000b (const dword)  (not used)
OP1_SUB                                6  0x00000006 (const dword)  (not used)
OP1_WHITEN                            15  0x0000000f (const dword)  (not used)
OP1_XOR                                4  0x00000004 (const dword)  (not used)
OP2_ADD                                4  0x00000004 (const dword)  (not used)
OP2_AND                                1  0x00000001 (const dword)  (not used)
OP2_BLEND                              9  0x00000009 (const dword)  (not used)
OP2_COPY                               8  0x00000008 (const dword)  (not used)
OP2_DIV                                7  0x00000007 (const dword)  (not used)
OP2_IOR                                2  0x00000002 (const dword)  (not used)
OP2_MUL                                6  0x00000006 (const dword)  (not used)
OP2_SUB                                5  0x00000005 (const dword)  (not used)
OP2_XOR                                3  0x00000003 (const dword)  (not used)
OPAQUE                                 1  0x00000001 (const dword)  (not used)
oPinInputs                         12847  0x0000322foPinInputs                         12847  0x0000322f (mem) word[1] (member of C:\Users\agarciamoreno\Documents\GitHub\BCN3DSigmax-Firmware-dev\Project Files LCD v126\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 3)
oPinOutputs                        13317  0x00003405oPinOutputs                        13317  0x00003405 (mem) word[1] (member of C:\Users\agarciamoreno\Documents\GitHub\BCN3DSigmax-Firmware-dev\Project Files LCD v126\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 3)
ORANGE                             64800  0x0000fd20 (const dword)  (not used)
ORANGERED                          64032  0x0000fa20 (const dword)  (not used)
ORCHID                             56218  0x0000db9a (const dword)  (not used)
oRockerSwitchs                     12469  0x000030b5oRockerSwitchs                     12469  0x000030b5 (mem) word[1] (member of C:\Users\agarciamoreno\Documents\GitHub\BCN3DSigmax-Firmware-dev\Project Files LCD v126\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 3)
oRotarySwitchs                     12471  0x000030b7oRotarySwitchs                     12471  0x000030b7 (mem) word[1] (member of C:\Users\agarciamoreno\Documents\GitHub\BCN3DSigmax-Firmware-dev\Project Files LCD v126\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 3)
oScopes                            12829  0x0000321doScopes                            12829  0x0000321d (mem) word[1] (member of C:\Users\agarciamoreno\Documents\GitHub\BCN3DSigmax-Firmware-dev\Project Files LCD v126\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (not used)
oSmartGauges                       13307  0x000033fboSmartGauges                       13307  0x000033fb (mem) word[1] (member of C:\Users\agarciamoreno\Documents\GitHub\BCN3DSigmax-Firmware-dev\Project Files LCD v126\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (not used)
oSmartKnobs                        13311  0x000033ffoSmartKnobs                        13311  0x000033ff (mem) word[1] (member of C:\Users\agarciamoreno\Documents\GitHub\BCN3DSigmax-Firmware-dev\Project Files LCD v126\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (not used)
oSmartSliders                      13309  0x000033fdoSmartSliders                      13309  0x000033fd (mem) word[1] (member of C:\Users\agarciamoreno\Documents\GitHub\BCN3DSigmax-Firmware-dev\Project Files LCD v126\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (not used)
oSoundss                           13315  0x00003403oSoundss                           13315  0x00003403 (mem) word[1] (member of C:\Users\agarciamoreno\Documents\GitHub\BCN3DSigmax-Firmware-dev\Project Files LCD v126\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 3)
oSpectrums                         12827  0x0000321boSpectrums                         12827  0x0000321b (mem) word[1] (member of C:\Users\agarciamoreno\Documents\GitHub\BCN3DSigmax-Firmware-dev\Project Files LCD v126\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 3)
oStaticTexts                       12825  0x00003219oStaticTexts                       12825  0x00003219 (mem) word[1] (member of C:\Users\agarciamoreno\Documents\GitHub\BCN3DSigmax-Firmware-dev\Project Files LCD v126\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 3)
oStringss                          12657  0x00003171oStringss                          12657  0x00003171 (mem) word[57] (member of C:\Users\agarciamoreno\Documents\GitHub\BCN3DSigmax-Firmware-dev\Project Files LCD v126\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 4)
oStringss                         UNRESOLVED  (usage 2)
OT_ACTIVATE                          103  0x00000067 (const dword)  (usage 63)
OT_MAGIC                             108  0x0000006c (const dword)  (usage 3)
OT_NEXTFRAME                         104  0x00000068 (const dword)  (usage 3)
OT_NEXTSTRING                        106  0x0000006a (const dword)  (usage 3)
OT_PREVFRAME                         105  0x00000069 (const dword)  (usage 3)
OT_PREVSTRING                        107  0x0000006b (const dword)  (usage 3)
OT_REPORT                            100  0x00000064 (const dword)  (usage 642)
OT_SETANOTHER                        102  0x00000066 (const dword)  (usage 3)
OT_SETCONST                          101  0x00000065 (const dword)  (usage 3)
oTanks                             12831  0x0000321foTanks                             12831  0x0000321f (mem) word[1] (member of C:\Users\agarciamoreno\Documents\GitHub\BCN3DSigmax-Firmware-dev\Project Files LCD v126\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 3)
oThermometers                      12771  0x000031e3oThermometers                      12771  0x000031e3 (mem) word[1] (member of C:\Users\agarciamoreno\Documents\GitHub\BCN3DSigmax-Firmware-dev\Project Files LCD v126\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 3)
oTimers                            13313  0x00003401oTimers                            13313  0x00003401 (mem) word[1] (member of C:\Users\agarciamoreno\Documents\GitHub\BCN3DSigmax-Firmware-dev\Project Files LCD v126\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 3)
oTrackbars                         12475  0x000030bboTrackbars                         12475  0x000030bb (mem) word[1] (member of C:\Users\agarciamoreno\Documents\GitHub\BCN3DSigmax-Firmware-dev\Project Files LCD v126\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 3)
oUserButtons                       12855  0x00003237oUserButtons                       12855  0x00003237 (mem) word[225] (member of C:\Users\agarciamoreno\Documents\GitHub\BCN3DSigmax-Firmware-dev\Project Files LCD v126\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 12)
oUserImagess                       12833  0x00003221oUserImagess                       12833  0x00003221 (mem) word[7] (member of C:\Users\agarciamoreno\Documents\GitHub\BCN3DSigmax-Firmware-dev\Project Files LCD v126\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 3)
oUserleds                          12773  0x000031e5oUserleds                          12773  0x000031e5 (mem) word[1] (member of C:\Users\agarciamoreno\Documents\GitHub\BCN3DSigmax-Firmware-dev\Project Files LCD v126\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 3)
OUTLINE                                1  0x00000001 (const dword)  (not used)
OUTLINE_COLOUR                        24  0x00000018 (const dword)  (not used)
OutputCS                             552  0x00000228 (mem) word (global)  (usage 9)
OVF                                  -63  0xffffffc1 (PmmC func) args[0] r=1  (usage 3)
oVideos                            12775  0x000031e7oVideos                            12775  0x000031e7 (mem) word[25] (member of C:\Users\agarciamoreno\Documents\GitHub\BCN3DSigmax-Firmware-dev\Project Files LCD v126\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 3)
OW_Read                             -523  0xfffffdf5 (PmmC func) args[1] r=1  (not used)
OW_Read9                            -524  0xfffffdf4 (PmmC func) args[1] r=1  (not used)
OW_Reset                            -522  0xfffffdf6 (PmmC func) args[1] r=1  (not used)
OW_Write                            -525  0xfffffdf3 (PmmC func) args[2] r=0  (not used)
oWinButtons                        12477  0x000030bdoWinButtons                        12477  0x000030bd (mem) word[1] (member of C:\Users\agarciamoreno\Documents\GitHub\BCN3DSigmax-Firmware-dev\Project Files LCD v126\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (usage 3)
PA0                                    1  0x00000001 (const dword)  (not used)
PA1                                    2  0x00000002 (const dword)  (not used)
PA10                                  11  0x0000000b (const dword)  (not used)
PA11                                  12  0x0000000c (const dword)  (not used)
PA12                                  13  0x0000000d (const dword)  (not used)
PA13                                  14  0x0000000e (const dword)  (not used)
PA14                                  15  0x0000000f (const dword)  (not used)
PA15                                  16  0x00000010 (const dword)  (not used)
PA2                                    3  0x00000003 (const dword)  (not used)
PA3                                    4  0x00000004 (const dword)  (not used)
PA4                                    5  0x00000005 (const dword)  (not used)
PA5                                    6  0x00000006 (const dword)  (not used)
PA6                                    7  0x00000007 (const dword)  (not used)
PA7                                    8  0x00000008 (const dword)  (not used)
PA8                                    9  0x00000009 (const dword)  (not used)
PA9                                   10  0x0000000a (const dword)  (not used)
PALEGOLDENROD                      61269  0x0000ef55 (const dword)  (not used)
PALEGREEN                          40915  0x00009fd3 (const dword)  (not used)
PALETURQUOISE                      44925  0x0000af7d (const dword)  (not used)
PALEVIOLETRED                      56210  0x0000db92 (const dword)  (not used)
PANEL_FRAME                            3  0x00000003 (const dword)  (not used)
PANEL_HIDE                             2  0x00000002 (const dword)  (not used)
PANEL_RAISED                           1  0x00000001 (const dword)  (not used)
PANEL_SUNKEN                           0  0x00000000 (const dword)  (not used)
PAPAYAWHIP                         65402  0x0000ff7a (const dword)  (not used)
pause                                 -6  0xfffffffa (PmmC func) args[1] r=0  (usage 6)
PEACHPUFF                          65239  0x0000fed7 (const dword)  (not used)
peekW                                -34  0xffffffde (PmmC func) args[1] r=1  (not used)
PEN_SIZE                              16  0x00000010 (const dword)  (not used)
PERU                               52263  0x0000cc27 (const dword)  (not used)
PIN_AN                                 5  0x00000005 (const dword)  (not used)
PIN_ANAVG                              6  0x00000006 (const dword)  (not used)
pin_Counter                         -514  0xfffffdfe (PmmC func) args[3] r=1  (not used)
PIN_COUNTER_PA4                      123  0x0000007b (const dword)  (not used)
PIN_COUNTER_PA5                      124  0x0000007c (const dword)  (not used)
PIN_COUNTER_PA6                      125  0x0000007d (const dword)  (not used)
PIN_COUNTER_PA7                      126  0x0000007e (const dword)  (not used)
PIN_COUNTER_PA8                      127  0x0000007f (const dword)  (not used)
PIN_COUNTER_PA9                      128  0x00000080 (const dword)  (not used)
PIN_EVENT_PA4                        129  0x00000081 (const dword)  (not used)
PIN_EVENT_PA5                        130  0x00000082 (const dword)  (not used)
PIN_EVENT_PA6                        131  0x00000083 (const dword)  (not used)
PIN_EVENT_PA7                        132  0x00000084 (const dword)  (not used)
PIN_EVENT_PA8                        133  0x00000085 (const dword)  (not used)
PIN_EVENT_PA9                        134  0x00000086 (const dword)  (not used)
pin_HI                              -113  0xffffff8f (PmmC func) args[1] r=1  (not used)
PIN_INP                                0  0x00000000 (const dword)  (not used)
PIN_INP_HI                             1  0x00000001 (const dword)  (not used)
PIN_INP_LO                             2  0x00000002 (const dword)  (not used)
pin_LO                              -114  0xffffff8e (PmmC func) args[1] r=1  (not used)
PIN_OUT                                3  0x00000003 (const dword)  (not used)
PIN_OUT_OD                             4  0x00000004 (const dword)  (not used)
pin_Pulseout                        -512  0xfffffe00 (PmmC func) args[2] r=1  (not used)
pin_PulseoutB                       -513  0xfffffdff (PmmC func) args[2] r=1  (not used)
pin_PulseoutCount                   -519  0xfffffdf9 (PmmC func) args[4] r=1  (not used)
pin_Read                            -116  0xffffff8c (PmmC func) args[1] r=1  (not used)
pin_Set                             -112  0xffffff90 (PmmC func) args[2] r=1  (not used)
pin_Val                             -115  0xffffff8d (PmmC func) args[2] r=0  (not used)
PINK                               65049  0x0000fe19 (const dword)  (not used)
pInputIndex                          308  0x00000134 (mem) word (global)  (usage 15)
PLUM                               56603  0x0000dd1b (const dword)  (not used)
pokeW                                -35  0xffffffdd (PmmC func) args[2] r=0  (not used)
PORTRAIT                               2  0x00000002 (const dword)  (not used)
PORTRAIT_R                             3  0x00000003 (const dword)  (not used)
POWDERBLUE                         46876  0x0000b71c (const dword)  (not used)
PrintStrings                       17514  0x0000446a (User func) args[3] r=0  (usage 9)
PROGRESSBAR_HIDE                       2  0x00000002 (const dword)  (not used)
PROGRESSBAR_RAISED                 65535  0x0000ffff (const dword)  (not used)
PROGRESSBAR_SUNKEN                 65534  0x0000fffe (const dword)  (not used)
PTN_BDIAGONAL                      65518  0x0000ffee (const ??? 0)  (not used)
PTN_BRICKS                         65521  0x0000fff1 (const ??? 0)  (not used)
PTN_BS_HORIZONTAL                  65510  0x0000ffe6 (const ??? 0)  (not used)
PTN_BS_VERTICAL                    65509  0x0000ffe5 (const ??? 0)  (not used)
PTN_BSHORIZONTAL                   65516  0x0000ffec (const ??? 0)  (not used)
PTN_BSVERTICAL                     65515  0x0000ffeb (const ??? 0)  (not used)
PTN_CARGONET                       65522  0x0000fff2 (const ??? 0)  (not used)
PTN_CIRCUITS                       65523  0x0000fff3 (const ??? 0)  (not used)
PTN_COBBLESTONES                   65524  0x0000fff4 (const ??? 0)  (not used)
PTN_COURSE_B_DIAGONAL              65512  0x0000ffe8 (const ??? 0)  (not used)
PTN_COURSE_CROSS                   65513  0x0000ffe9 (const ??? 0)  (not used)
PTN_COURSE_DIAGONALCROSS           65514  0x0000ffea (const ??? 0)  (not used)
PTN_COURSE_DOTS                    65508  0x0000ffe4 (const ??? 0)  (not used)
PTN_COURSE_F_DIAGONAL              65511  0x0000ffe7 (const ??? 0)  (not used)
PTN_CROSSES                        65535  0x0000ffff (const ??? 0)  (not used)
PTN_DAISIES                        65525  0x0000fff5 (const ??? 0)  (not used)
PTN_DIZZY                          65526  0x0000fff6 (const ??? 0)  (not used)
PTN_EMPTY                          65504  0x0000ffe0 (const dword)  (not used)
PTN_FDIAGONAL                      65517  0x0000ffed (const ??? 0)  (not used)
PTN_FIELDEFFECT                    65527  0x0000fff7 (const ??? 0)  (not used)
PTN_FINE_CROSS                     65519  0x0000ffef (const ??? 0)  (not used)
PTN_FINE_DIAGONAL_CROSS            65520  0x0000fff0 (const ??? 0)  (not used)
PTN_FINE_DOTS                      65506  0x0000ffe2 (const ??? 0)  (not used)
PTN_KEY                            65528  0x0000fff8 (const ??? 0)  (not used)
PTN_MEDIUM_DOTS                    65507  0x0000ffe3 (const ??? 0)  (not used)
PTN_ROUNDER                        65529  0x0000fff9 (const ??? 0)  (not used)
PTN_SCALES                         65530  0x0000fffa (const ??? 0)  (not used)
PTN_SOLID                          65505  0x0000ffe1 (const ??? 0)  (not used)
PTN_STONE                          65531  0x0000fffb (const ??? 0)  (not used)
PTN_THATCHES                       65532  0x0000fffc (const ??? 0)  (not used)
PTN_TILE                           65533  0x0000fffd (const ??? 0)  (not used)
PTN_WAFFLESREVENGE                 65534  0x0000fffe (const ??? 0)  (not used)
PURPLE                             32784  0x00008010 (const dword)  (not used)
putch                                 -2  0xfffffffe (PmmC func) args[1] r=0  (usage 6)
putchXY                               -3  0xfffffffd (PmmC func) args[3] r=0  (not used)
putnum                                -7  0xfffffff9 (PmmC func) args[2] r=1  (not used)
putnumXY                             -51  0xffffffcd (PmmC func) args[4] r=1  (not used)
putstr                                -9  0xfffffff7 (PmmC func) args[1] r=1  (usage 6)
putstrCentred                         -5  0xfffffffb (PmmC func) args[3] r=0  (not used)
putstrXY                              -4  0xfffffffc (PmmC func) args[3] r=0  (not used)
PWM_10KHZ                              6  0x00000006 (const dword)  (not used)
PWM_15KHZ                              7  0x00000007 (const dword)  (not used)
PWM_20KHZ                              8  0x00000008 (const dword)  (not used)
PWM_25KHZ                              9  0x00000009 (const dword)  (not used)
PWM_30KHZ                             10  0x0000000a (const dword)  (not used)
PWM_35KHZ                             11  0x0000000b (const dword)  (not used)
PWM_5KHZ                               5  0x00000005 (const dword)  (not used)
PWM_625HZ                              4  0x00000004 (const dword)  (not used)
PWM_BINARY                             3  0x00000003 (const dword)  (not used)
pwm_Init                            -521  0xfffffdf7 (PmmC func) args[3] r=1  (not used)
PWM_OFF                                0  0x00000000 (const dword)  (not used)
PWM_PLAIN                              1  0x00000001 (const dword)  (not used)
PWM_SERVO                              2  0x00000002 (const dword)  (not used)
QEN1_COUNTER_HI                      136  0x00000088 (const dword)  (not used)
QEN1_COUNTER_LO                      135  0x00000087 (const dword)  (not used)
QEN1_DELTA                           137  0x00000089 (const dword)  (not used)
QEN2_COUNTER_HI                      139  0x0000008b (const dword)  (not used)
QEN2_COUNTER_LO                      138  0x0000008a (const dword)  (not used)
QEN2_DELTA                           140  0x0000008c (const dword)  (not used)
Qencoder1                           -515  0xfffffdfd (PmmC func) args[3] r=1  (not used)
Qencoder1Reset                      -517  0xfffffdfb (PmmC func) args[0] r=0  (not used)
Qencoder2                           -516  0xfffffdfc (PmmC func) args[3] r=1  (not used)
Qencoder2Reset                      -518  0xfffffdfa (PmmC func) args[0] r=0  (not used)
RAND                                 -59  0xffffffc5 (PmmC func) args[0] r=1  (not used)
RANDOM_HI                             33  0x00000021 (const dword)  (not used)
RANDOM_LO                             32  0x00000020 (const dword)  (not used)
RANDVAL                              -60  0xffffffc4 (PmmC func) args[2] r=1  (not used)
READ_OBJ                               0  0x00000000 (const dword)  (usage 3)
ReadCmd                              128  0x00000080 (const dword)  (not used)
ReadObject                         17264  0x00004370 (User func) args[2] r=0  (usage 3)
RED                                63488  0x0000f800 (const dword)  (not used)
REPORT_EVENT                           7  0x00000007 (const dword)  (usage 3)
REPORT_MAGIC_EVENT_BYTES              10  0x0000000a (const dword)  (not used)
REPORT_MAGIC_EVENT_DBYTES             11  0x0000000b (const dword)  (not used)
REPORT_OBJ                             5  0x00000005 (const dword)  (usage 3)
RIGHT_POS                              4  0x00000004 (const dword)  (not used)
rKeyboardRoutines                  13479  0x000034a7rKeyboardRoutines                  13479  0x000034a7 (mem) word[1] (member of C:\Users\agarciamoreno\Documents\GitHub\BCN3DSigmax-Firmware-dev\Project Files LCD v126\BCN3D_SIGMAX.4DWork\BCN3D_SIGMAX.4DGenieS)  (not used)
ROSYBROWN                          48241  0x0000bc71 (const dword)  (not used)
ROYALBLUE                          17244  0x0000435c (const dword)  (usage 15)
RUNFLASH                             128  0x00000080 (const dword)  (not used)
SADDLEBROWN                        35362  0x00008a22 (const dword)  (not used)
SALMON                             64526  0x0000fc0e (const dword)  (not used)
SANDYBROWN                         62764  0x0000f52c (const dword)  (not used)
SAVE_TO_DISK                           7  0x00000007 (const dword)  (not used)
SCREEN_MODE                           23  0x00000017 (const dword)  (not used)
SEAGREEN                           11338  0x00002c4a (const dword)  (not used)
SEASHELL                           65469  0x0000ffbd (const dword)  (not used)
SEED                                 -61  0xffffffc3 (PmmC func) args[1] r=0  (not used)
SendReport                         17412  0x00004404 (User func) args[4] r=0  (usage 6)
serin                               -236  0xffffff14 (PmmC func) args[0] r=1  (usage 3)
serin1                              -237  0xffffff13 (PmmC func) args[0] r=1  (not used)
serin2                              -238  0xffffff12 (PmmC func) args[0] r=1  (not used)
serin3                              -239  0xffffff11 (PmmC func) args[0] r=1  (not used)
serinX                               N/A         N/A (macro) serin   (not used)
serout                              -240  0xffffff10 (PmmC func) args[1] r=0  (usage 21)
serout1                             -241  0xffffff0f (PmmC func) args[1] r=0  (not used)
serout2                             -242  0xffffff0e (PmmC func) args[1] r=0  (not used)
serout3                             -243  0xffffff0d (PmmC func) args[1] r=0  (not used)
seroutCS                           17495  0x00004457 (User func) args[1] r=0  (usage 15)
seroutOcs                          17462  0x00004436 (User func) args[0] r=0  (usage 3)
seroutX                              N/A         N/A (macro) serout   (not used)
setbaud                             -224  0xffffff20 (PmmC func) args[1] r=0  (not used)
SIENNA                             41605  0x0000a285 (const dword)  (not used)
SILVER                             50712  0x0000c618 (const dword)  (not used)
SIN                                  -57  0xffffffc7 (PmmC func) args[1] r=1  (not used)
SKYBLUE                            34429  0x0000867d (const dword)  (not used)
SLATEBLUE                          27353  0x00006ad9 (const dword)  (not used)
SLATEGRAY                          29714  0x00007412 (const dword)  (not used)
SLIDER_HIDE                            2  0x00000002 (const dword)  (not used)
SLIDER_RAISED                          1  0x00000001 (const dword)  (not used)
SLIDER_SUNKEN                          0  0x00000000 (const dword)  (not used)
snd_BufSize                         -461  0xfffffe33 (PmmC func) args[1] r=0  (usage 3)
snd_Continue                        -464  0xfffffe30 (PmmC func) args[0] r=0  (not used)
snd_Freq                            -466  0xfffffe2e (PmmC func) args[2] r=1  (not used)
snd_Pause                           -463  0xfffffe31 (PmmC func) args[0] r=0  (not used)
snd_Pitch                           -460  0xfffffe34 (PmmC func) args[1] r=1  (not used)
snd_Playing                         -465  0xfffffe2f (PmmC func) args[0] r=1  (not used)
snd_Stop                            -462  0xfffffe32 (PmmC func) args[0] r=0  (not used)
snd_Volume                          -459  0xfffffe35 (PmmC func) args[1] r=0  (not used)
SNOW                               65503  0x0000ffdf (const dword)  (not used)
SOLID                                  0  0x00000000 (const dword)  (not used)
SPI1                                   1  0x00000001 (const dword)  (not used)
SPI16_MODE_0                           8  0x00000008 (const dword)  (not used)
SPI16_MODE_1                           9  0x00000009 (const dword)  (not used)
SPI16_MODE_2                          10  0x0000000a (const dword)  (not used)
SPI16_MODE_3                          11  0x0000000b (const dword)  (not used)
SPI16_MODE_4                          12  0x0000000c (const dword)  (not used)
SPI16_MODE_5                          13  0x0000000d (const dword)  (not used)
SPI16_MODE_6                          14  0x0000000e (const dword)  (not used)
SPI16_MODE_7                          15  0x0000000f (const dword)  (not used)
SPI1_Init                           -349  0xfffffea3 (PmmC func) args[2] r=1  (not used)
SPI1_Read                           -352  0xfffffea0 (PmmC func) args[0] r=1  (not used)
spi1_ReadBlock                      -333  0xfffffeb3 (PmmC func) args[2] r=0  (not used)
SPI1_SCK_pin                        -346  0xfffffea6 (PmmC func) args[1] r=1  (not used)
SPI1_SDI_pin                        -343  0xfffffea9 (PmmC func) args[1] r=1  (not used)
SPI1_SDO_pin                        -340  0xfffffeac (PmmC func) args[1] r=1  (not used)
SPI1_Write                          -355  0xfffffe9d (PmmC func) args[1] r=1  (not used)
spi1_WriteBlock                     -359  0xfffffe99 (PmmC func) args[2] r=0  (not used)
SPI2                                   2  0x00000002 (const dword)  (not used)
SPI2_Init                           -350  0xfffffea2 (PmmC func) args[2] r=1  (not used)
SPI2_Read                           -353  0xfffffe9f (PmmC func) args[0] r=1  (not used)
spi2_ReadBlock                      -334  0xfffffeb2 (PmmC func) args[2] r=0  (not used)
SPI2_SCK_pin                        -347  0xfffffea5 (PmmC func) args[1] r=1  (not used)
SPI2_SDI_pin                        -344  0xfffffea8 (PmmC func) args[1] r=1  (not used)
SPI2_SDO_pin                        -341  0xfffffeab (PmmC func) args[1] r=1  (not used)
SPI2_Write                          -356  0xfffffe9c (PmmC func) args[1] r=1  (not used)
spi2_WriteBlock                     -360  0xfffffe98 (PmmC func) args[2] r=0  (not used)
SPI3                                   3  0x00000003 (const dword)  (not used)
SPI3_Init                           -351  0xfffffea1 (PmmC func) args[2] r=1  (not used)
SPI3_Read                           -354  0xfffffe9e (PmmC func) args[0] r=1  (not used)
spi3_ReadBlock                      -335  0xfffffeb1 (PmmC func) args[2] r=0  (not used)
SPI3_SCK_pin                        -348  0xfffffea4 (PmmC func) args[1] r=1  (not used)
SPI3_SDI_pin                        -345  0xfffffea7 (PmmC func) args[1] r=1  (not used)
SPI3_SDO_pin                        -342  0xfffffeaa (PmmC func) args[1] r=1  (not used)
SPI3_Write                          -357  0xfffffe9b (PmmC func) args[1] r=1  (not used)
spi3_WriteBlock                     -361  0xfffffe97 (PmmC func) args[2] r=0  (not used)
SPI8_MODE_0                            0  0x00000000 (const dword)  (not used)
SPI8_MODE_1                            1  0x00000001 (const dword)  (not used)
SPI8_MODE_2                            2  0x00000002 (const dword)  (not used)
SPI8_MODE_3                            3  0x00000003 (const dword)  (not used)
SPI8_MODE_4                            4  0x00000004 (const dword)  (not used)
SPI8_MODE_5                            5  0x00000005 (const dword)  (not used)
SPI8_MODE_6                            6  0x00000006 (const dword)  (not used)
SPI8_MODE_7                            7  0x00000007 (const dword)  (not used)
spi_Disable                         -339  0xfffffead (PmmC func) args[0] r=0  (not used)
spi_Init                            -336  0xfffffeb0 (PmmC func) args[3] r=0  (not used)
spi_Read                            -337  0xfffffeaf (PmmC func) args[0] r=1  (not used)
spi_ReadBlock                       -332  0xfffffeb4 (PmmC func) args[2] r=0  (not used)
SPI_SPEED0                             0  0x00000000 (const dword)  (not used)
SPI_SPEED1                             1  0x00000001 (const dword)  (not used)
SPI_SPEED10                           10  0x0000000a (const dword)  (not used)
SPI_SPEED11                           11  0x0000000b (const dword)  (not used)
SPI_SPEED12                           12  0x0000000c (const dword)  (not used)
SPI_SPEED13                           13  0x0000000d (const dword)  (not used)
SPI_SPEED14                           14  0x0000000e (const dword)  (not used)
SPI_SPEED15                           15  0x0000000f (const dword)  (not used)
SPI_SPEED2                             2  0x00000002 (const dword)  (not used)
SPI_SPEED3                             3  0x00000003 (const dword)  (not used)
SPI_SPEED4                             4  0x00000004 (const dword)  (not used)
SPI_SPEED5                             5  0x00000005 (const dword)  (not used)
SPI_SPEED6                             6  0x00000006 (const dword)  (not used)
SPI_SPEED7                             7  0x00000007 (const dword)  (not used)
SPI_SPEED8                             8  0x00000008 (const dword)  (not used)
SPI_SPEED9                             9  0x00000009 (const dword)  (not used)
spi_Write                           -338  0xfffffeae (PmmC func) args[1] r=0  (not used)
spi_WriteBlock                      -358  0xfffffe9a (PmmC func) args[2] r=0  (not used)
spiflash_BlockErase                 -541  0xfffffde3 (PmmC func) args[3] r=0  (not used)
spiflash_BulkErase                  -540  0xfffffde4 (PmmC func) args[2] r=0  (not used)
spiflash_Exec                       -554  0xfffffdd6 (PmmC func) args[3] r=1  (not used)
spiflash_GetC                       -547  0xfffffddd (PmmC func) args[2] r=1  (not used)
spiflash_GetS                       -551  0xfffffdd9 (PmmC func) args[4] r=1  (not used)
spiflash_GetW                       -549  0xfffffddb (PmmC func) args[2] r=1  (not used)
spiflash_ID                         -539  0xfffffde5 (PmmC func) args[2] r=1  (not used)
spiflash_Image                      -545  0xfffffddf (PmmC func) args[4] r=1  (not used)
spiflash_LoadFunction               -552  0xfffffdd8 (PmmC func) args[2] r=1  (not used)
spiflash_LoadImageControl           -555  0xfffffdd5 (PmmC func) args[2] r=1  (not used)
spiflash_PlayWAV                    -556  0xfffffdd4 (PmmC func) args[2] r=1  (not used)
spiflash_PutC                       -546  0xfffffdde (PmmC func) args[3] r=0  (not used)
spiflash_PutS                       -550  0xfffffdda (PmmC func) args[3] r=1  (not used)
spiflash_PutW                       -548  0xfffffddc (PmmC func) args[3] r=0  (not used)
spiflash_Read                       -543  0xfffffde1 (PmmC func) args[4] r=1  (not used)
spiflash_Run                        -553  0xfffffdd7 (PmmC func) args[3] r=1  (not used)
spiflash_SetAdd                     -542  0xfffffde2 (PmmC func) args[3] r=0  (not used)
spiflash_SIG                        -538  0xfffffde6 (PmmC func) args[2] r=1  (not used)
spiflash_Write                      -544  0xfffffde0 (PmmC func) args[4] r=1  (not used)
SPRINGGREEN                         2031  0x000007ef (const dword)  (not used)
SQRT                                 -62  0xffffffc2 (PmmC func) args[1] r=1  (not used)
STEELBLUE                          17430  0x00004416 (const dword)  (not used)
STR                                  128  0x00000080 (const dword)  (not used)
str_ByteMove                        -487  0xfffffe19 (PmmC func) args[3] r=1  (not used)
str_Cat                             -485  0xfffffe1b (PmmC func) args[2] r=1  (not used)
str_CatN                            -486  0xfffffe1a (PmmC func) args[3] r=1  (not used)
str_Copy                            -488  0xfffffe18 (PmmC func) args[2] r=1  (not used)
str_CopyN                           -489  0xfffffe17 (PmmC func) args[3] r=1  (not used)
str_Find                            -481  0xfffffe1f (PmmC func) args[2] r=1  (not used)
str_FindI                           -482  0xfffffe1e (PmmC func) args[2] r=1  (not used)
str_GetByte                         -475  0xfffffe25 (PmmC func) args[1] r=1  (not used)
str_GetC                            -474  0xfffffe26 (PmmC func) args[2] r=1  (not used)
str_GetD                            -471  0xfffffe29 (PmmC func) args[2] r=1  (not used)
str_GetHexW                         -473  0xfffffe27 (PmmC func) args[2] r=1  (not used)
str_GetW                            -472  0xfffffe28 (PmmC func) args[2] r=1  (not used)
str_GetWord                         -476  0xfffffe24 (PmmC func) args[1] r=1  (not used)
str_Length                          -483  0xfffffe1d (PmmC func) args[1] r=1  (not used)
str_Match                           -479  0xfffffe21 (PmmC func) args[2] r=1  (not used)
str_MatchI                          -480  0xfffffe20 (PmmC func) args[2] r=1  (not used)
str_Printf                          -484  0xfffffe1c (PmmC func) args[2] r=1  (not used)
str_Ptr                             -470  0xfffffe2a (PmmC func) args[1] r=1  (not used)
str_PutByte                         -477  0xfffffe23 (PmmC func) args[2] r=0  (not used)
str_PutWord                         -478  0xfffffe22 (PmmC func) args[2] r=0  (not used)
strheight                            -14  0xfffffff2 (PmmC func) args[0] r=1  (not used)
Strings0Count                          1  0x00000001 (const dword)  (not used)
Strings0Size                           4  0x00000004 (const dword)  (usage 3)
Strings0StartH                         0  0x00000000 (const dword)  (usage 3)
Strings0StartL                      6144  0x00001800 (const dword)  (usage 3)
Strings10Count                         1  0x00000001 (const dword)  (not used)
Strings10Size                          7  0x00000007 (const dword)  (usage 3)
Strings10StartH                        0  0x00000000 (const dword)  (usage 3)
Strings10StartL                    11264  0x00002c00 (const dword)  (usage 3)
Strings11Count                         1  0x00000001 (const dword)  (not used)
Strings11Size                          7  0x00000007 (const dword)  (usage 3)
Strings11StartH                        0  0x00000000 (const dword)  (usage 3)
Strings11StartL                    23552  0x00005c00 (const dword)  (usage 3)
Strings12Count                         0  0x00000000 (const dword)  (not used)
Strings12Size                          1  0x00000001 (const dword)  (usage 3)
Strings12StartH                        0  0x00000000 (const dword)  (usage 3)
Strings12StartL                     2048  0x00000800 (const dword)  (usage 3)
Strings13Count                         1  0x00000001 (const dword)  (not used)
Strings13Size                          7  0x00000007 (const dword)  (usage 3)
Strings13StartH                        0  0x00000000 (const dword)  (usage 3)
Strings13StartL                    12288  0x00003000 (const dword)  (usage 3)
Strings14Count                         1  0x00000001 (const dword)  (not used)
Strings14Size                          7  0x00000007 (const dword)  (usage 3)
Strings14StartH                        0  0x00000000 (const dword)  (usage 3)
Strings14StartL                    12800  0x00003200 (const dword)  (usage 3)
Strings15Count                         1  0x00000001 (const dword)  (not used)
Strings15Size                          7  0x00000007 (const dword)  (usage 3)
Strings15StartH                        0  0x00000000 (const dword)  (usage 3)
Strings15StartL                    13312  0x00003400 (const dword)  (usage 3)
Strings16Count                         0  0x00000000 (const dword)  (not used)
Strings16Size                          1  0x00000001 (const dword)  (usage 3)
Strings16StartH                        0  0x00000000 (const dword)  (usage 3)
Strings16StartL                     4608  0x00001200 (const dword)  (usage 3)
Strings17Count                         1  0x00000001 (const dword)  (not used)
Strings17Size                          7  0x00000007 (const dword)  (usage 3)
Strings17StartH                        0  0x00000000 (const dword)  (usage 3)
Strings17StartL                    11776  0x00002e00 (const dword)  (usage 3)
Strings18Count                         1  0x00000001 (const dword)  (not used)
Strings18Size                          7  0x00000007 (const dword)  (usage 3)
Strings18StartH                        0  0x00000000 (const dword)  (usage 3)
Strings18StartL                    13824  0x00003600 (const dword)  (usage 3)
Strings19Count                         1  0x00000001 (const dword)  (not used)
Strings19Size                          9  0x00000009 (const dword)  (usage 3)
Strings19StartH                        0  0x00000000 (const dword)  (usage 3)
Strings19StartL                    14336  0x00003800 (const dword)  (usage 3)
Strings1Count                          0  0x00000000 (const dword)  (not used)
Strings1Size                           1  0x00000001 (const dword)  (usage 3)
Strings1StartH                         0  0x00000000 (const dword)  (usage 3)
Strings1StartL                       512  0x00000200 (const dword)  (usage 3)
Strings20Count                         1  0x00000001 (const dword)  (not used)
Strings20Size                          9  0x00000009 (const dword)  (usage 3)
Strings20StartH                        0  0x00000000 (const dword)  (usage 3)
Strings20StartL                    14848  0x00003a00 (const dword)  (usage 3)
Strings21Count                         1  0x00000001 (const dword)  (not used)
Strings21Size                          9  0x00000009 (const dword)  (usage 3)
Strings21StartH                        0  0x00000000 (const dword)  (usage 3)
Strings21StartL                    15360  0x00003c00 (const dword)  (usage 3)
Strings22Count                         1  0x00000001 (const dword)  (not used)
Strings22Size                          9  0x00000009 (const dword)  (usage 3)
Strings22StartH                        0  0x00000000 (const dword)  (usage 3)
Strings22StartL                    15872  0x00003e00 (const dword)  (usage 3)
Strings23Count                         0  0x00000000 (const dword)  (not used)
Strings23Size                          1  0x00000001 (const dword)  (usage 3)
Strings23StartH                        0  0x00000000 (const dword)  (usage 3)
Strings23StartL                     2560  0x00000a00 (const dword)  (usage 3)
Strings24Count                         1  0x00000001 (const dword)  (not used)
Strings24Size                         19  0x00000013 (const dword)  (usage 3)
Strings24StartH                        0  0x00000000 (const dword)  (usage 3)
Strings24StartL                     3072  0x00000c00 (const dword)  (usage 3)
Strings25Count                         1  0x00000001 (const dword)  (not used)
Strings25Size                         37  0x00000025 (const dword)  (usage 3)
Strings25StartH                        0  0x00000000 (const dword)  (usage 3)
Strings25StartL                     3584  0x00000e00 (const dword)  (usage 3)
Strings26Count                         1  0x00000001 (const dword)  (not used)
Strings26Size                         37  0x00000025 (const dword)  (usage 3)
Strings26StartH                        0  0x00000000 (const dword)  (usage 3)
Strings26StartL                     4096  0x00001000 (const dword)  (usage 3)
Strings27Count                         0  0x00000000 (const dword)  (not used)
Strings27Size                          1  0x00000001 (const dword)  (usage 3)
Strings27StartH                        0  0x00000000 (const dword)  (usage 3)
Strings27StartL                    16384  0x00004000 (const dword)  (usage 3)
Strings28Count                         1  0x00000001 (const dword)  (not used)
Strings28Size                         22  0x00000016 (const dword)  (usage 3)
Strings28StartH                        0  0x00000000 (const dword)  (usage 3)
Strings28StartL                    16896  0x00004200 (const dword)  (usage 3)
Strings29Count                         1  0x00000001 (const dword)  (not used)
Strings29Size                          4  0x00000004 (const dword)  (usage 3)
Strings29StartH                        0  0x00000000 (const dword)  (usage 3)
Strings29StartL                    18944  0x00004a00 (const dword)  (usage 3)
Strings2Count                          1  0x00000001 (const dword)  (not used)
Strings2Size                           4  0x00000004 (const dword)  (usage 3)
Strings2StartH                         0  0x00000000 (const dword)  (usage 3)
Strings2StartL                      5632  0x00001600 (const dword)  (usage 3)
Strings30Count                         1  0x00000001 (const dword)  (not used)
Strings30Size                         37  0x00000025 (const dword)  (usage 3)
Strings30StartH                        0  0x00000000 (const dword)  (usage 3)
Strings30StartL                     5120  0x00001400 (const dword)  (usage 3)
Strings31Count                         1  0x00000001 (const dword)  (not used)
Strings31Size                          4  0x00000004 (const dword)  (usage 3)
Strings31StartH                        0  0x00000000 (const dword)  (usage 3)
Strings31StartL                    19456  0x00004c00 (const dword)  (usage 3)
Strings32Count                         1  0x00000001 (const dword)  (not used)
Strings32Size                          4  0x00000004 (const dword)  (usage 3)
Strings32StartH                        0  0x00000000 (const dword)  (usage 3)
Strings32StartL                    19968  0x00004e00 (const dword)  (usage 3)
Strings33Count                         1  0x00000001 (const dword)  (not used)
Strings33Size                          4  0x00000004 (const dword)  (usage 3)
Strings33StartH                        0  0x00000000 (const dword)  (usage 3)
Strings33StartL                    20480  0x00005000 (const dword)  (usage 3)
Strings34Count                         1  0x00000001 (const dword)  (not used)
Strings34Size                          4  0x00000004 (const dword)  (usage 3)
Strings34StartH                        0  0x00000000 (const dword)  (usage 3)
Strings34StartL                     7168  0x00001c00 (const dword)  (usage 3)
Strings35Count                         1  0x00000001 (const dword)  (not used)
Strings35Size                          4  0x00000004 (const dword)  (usage 3)
Strings35StartH                        0  0x00000000 (const dword)  (usage 3)
Strings35StartL                    20992  0x00005200 (const dword)  (usage 3)
Strings36Count                         1  0x00000001 (const dword)  (not used)
Strings36Size                          4  0x00000004 (const dword)  (usage 3)
Strings36StartH                        0  0x00000000 (const dword)  (usage 3)
Strings36StartL                     7680  0x00001e00 (const dword)  (usage 3)
Strings37Count                         1  0x00000001 (const dword)  (not used)
Strings37Size                          4  0x00000004 (const dword)  (usage 3)
Strings37StartH                        0  0x00000000 (const dword)  (usage 3)
Strings37StartL                     8192  0x00002000 (const dword)  (usage 3)
Strings38Count                         1  0x00000001 (const dword)  (not used)
Strings38Size                          4  0x00000004 (const dword)  (usage 3)
Strings38StartH                        0  0x00000000 (const dword)  (usage 3)
Strings38StartL                    21504  0x00005400 (const dword)  (usage 3)
Strings39Count                         0  0x00000000 (const dword)  (not used)
Strings39Size                          1  0x00000001 (const dword)  (usage 3)
Strings39StartH                        0  0x00000000 (const dword)  (usage 3)
Strings39StartL                    24576  0x00006000 (const dword)  (usage 3)
Strings3Count                          0  0x00000000 (const dword)  (not used)
Strings3Size                           1  0x00000001 (const dword)  (usage 3)
Strings3StartH                         0  0x00000000 (const dword)  (usage 3)
Strings3StartL                         0  0x00000000 (const dword)  (usage 3)
Strings40Count                         1  0x00000001 (const dword)  (not used)
Strings40Size                         16  0x00000010 (const dword)  (usage 3)
Strings40StartH                        0  0x00000000 (const dword)  (usage 3)
Strings40StartL                     9216  0x00002400 (const dword)  (usage 3)
Strings41Count                         0  0x00000000 (const dword)  (not used)
Strings41Size                          1  0x00000001 (const dword)  (usage 3)
Strings41StartH                        0  0x00000000 (const dword)  (usage 3)
Strings41StartL                     9728  0x00002600 (const dword)  (usage 3)
Strings42Count                         0  0x00000000 (const dword)  (not used)
Strings42Size                          1  0x00000001 (const dword)  (usage 3)
Strings42StartH                        0  0x00000000 (const dword)  (usage 3)
Strings42StartL                    10240  0x00002800 (const dword)  (usage 3)
Strings43Count                         0  0x00000000 (const dword)  (not used)
Strings43Size                          1  0x00000001 (const dword)  (usage 3)
Strings43StartH                        0  0x00000000 (const dword)  (usage 3)
Strings43StartL                    22528  0x00005800 (const dword)  (usage 3)
Strings44Count                         0  0x00000000 (const dword)  (not used)
Strings44Size                          1  0x00000001 (const dword)  (usage 3)
Strings44StartH                        0  0x00000000 (const dword)  (usage 3)
Strings44StartL                    25088  0x00006200 (const dword)  (usage 3)
Strings45Count                         0  0x00000000 (const dword)  (not used)
Strings45Size                          1  0x00000001 (const dword)  (usage 3)
Strings45StartH                        0  0x00000000 (const dword)  (usage 3)
Strings45StartL                    24064  0x00005e00 (const dword)  (usage 3)
Strings46Count                         0  0x00000000 (const dword)  (not used)
Strings46Size                          1  0x00000001 (const dword)  (usage 3)
Strings46StartH                        0  0x00000000 (const dword)  (usage 3)
Strings46StartL                    17408  0x00004400 (const dword)  (usage 3)
Strings47Count                         0  0x00000000 (const dword)  (not used)
Strings47Size                          1  0x00000001 (const dword)  (usage 3)
Strings47StartH                        0  0x00000000 (const dword)  (usage 3)
Strings47StartL                    22016  0x00005600 (const dword)  (usage 3)
Strings48Count                         0  0x00000000 (const dword)  (not used)
Strings48Size                          1  0x00000001 (const dword)  (usage 3)
Strings48StartH                        0  0x00000000 (const dword)  (usage 3)
Strings48StartL                    17920  0x00004600 (const dword)  (usage 3)
Strings49Count                         1  0x00000001 (const dword)  (not used)
Strings49Size                         12  0x0000000c (const dword)  (usage 3)
Strings49StartH                        0  0x00000000 (const dword)  (usage 3)
Strings49StartL                    25600  0x00006400 (const dword)  (usage 3)
Strings4Count                          1  0x00000001 (const dword)  (not used)
Strings4Size                           4  0x00000004 (const dword)  (usage 3)
Strings4StartH                         0  0x00000000 (const dword)  (usage 3)
Strings4StartL                      8704  0x00002200 (const dword)  (usage 3)
Strings50Count                         0  0x00000000 (const dword)  (not used)
Strings50Size                          1  0x00000001 (const dword)  (usage 3)
Strings50StartH                        0  0x00000000 (const dword)  (usage 3)
Strings50StartL                    26624  0x00006800 (const dword)  (usage 3)
Strings51Count                         0  0x00000000 (const dword)  (not used)
Strings51Size                          1  0x00000001 (const dword)  (usage 3)
Strings51StartH                        0  0x00000000 (const dword)  (usage 3)
Strings51StartL                    27136  0x00006a00 (const dword)  (usage 3)
Strings52Count                         0  0x00000000 (const dword)  (not used)
Strings52Size                          1  0x00000001 (const dword)  (usage 3)
Strings52StartH                        0  0x00000000 (const dword)  (usage 3)
Strings52StartL                    26112  0x00006600 (const dword)  (usage 3)
Strings53Count                         0  0x00000000 (const dword)  (not used)
Strings53Size                          1  0x00000001 (const dword)  (usage 3)
Strings53StartH                        0  0x00000000 (const dword)  (usage 3)
Strings53StartL                    23040  0x00005a00 (const dword)  (usage 3)
Strings54Size                          0  0x00000000 (const dword)  (not used)
Strings54StartH                        0  0x00000000 (const dword)  (not used)
Strings54StartL                        0  0x00000000 (const dword)  (not used)
Strings55Count                         0  0x00000000 (const dword)  (not used)
Strings55Size                          1  0x00000001 (const dword)  (usage 3)
Strings55StartH                        0  0x00000000 (const dword)  (usage 3)
Strings55StartL                    27648  0x00006c00 (const dword)  (usage 3)
Strings5Count                          1  0x00000001 (const dword)  (not used)
Strings5Size                           7  0x00000007 (const dword)  (usage 3)
Strings5StartH                         0  0x00000000 (const dword)  (usage 3)
Strings5StartL                     10752  0x00002a00 (const dword)  (usage 3)
Strings6Count                          1  0x00000001 (const dword)  (not used)
Strings6Size                           4  0x00000004 (const dword)  (usage 3)
Strings6StartH                         0  0x00000000 (const dword)  (usage 3)
Strings6StartL                     18432  0x00004800 (const dword)  (usage 3)
Strings7Count                          1  0x00000001 (const dword)  (not used)
Strings7Size                          37  0x00000025 (const dword)  (usage 3)
Strings7StartH                         0  0x00000000 (const dword)  (usage 3)
Strings7StartL                      1024  0x00000400 (const dword)  (usage 3)
Strings8Count                          0  0x00000000 (const dword)  (not used)
Strings8Size                           1  0x00000001 (const dword)  (usage 3)
Strings8StartH                         0  0x00000000 (const dword)  (usage 3)
Strings8StartL                      1536  0x00000600 (const dword)  (usage 3)
Strings9Count                          1  0x00000001 (const dword)  (not used)
Strings9Size                           4  0x00000004 (const dword)  (usage 3)
Strings9StartH                         0  0x00000000 (const dword)  (usage 3)
Strings9StartL                      6656  0x00001a00 (const dword)  (usage 3)
stringsCV                            114  0x00000072 (mem) word[56] (global)  (usage 27)
strlen                               -10  0xfffffff6 (PmmC func) args[1] r=1  (not used)
strwidth                             -13  0xfffffff3 (PmmC func) args[1] r=1  (not used)
STYLE1                                 2  0x00000002 (const dword)  (not used)
STYLE2                                 3  0x00000003 (const dword)  (not used)
SWAP                                 -56  0xffffffc8 (PmmC func) args[2] r=0  (not used)
sys_DeepSleep                       -405  0xfffffe6b (PmmC func) args[1] r=1  (not used)
sys_Driver                          -531  0xfffffded (PmmC func) args[0] r=0  (not used)
sys_ErrorMessage                    -534  0xfffffdea (PmmC func) args[1] r=1  (not used)
sys_EventQueue                      -396  0xfffffe74 (PmmC func) args[0] r=1  (not used)
sys_EventsPostpone                  -397  0xfffffe73 (PmmC func) args[0] r=0  (not used)
sys_EventsResume                    -398  0xfffffe72 (PmmC func) args[0] r=0  (usage 3)
sys_GetDate                         -401  0xfffffe6f (PmmC func) args[0] r=0  (not used)
sys_GetDateVar                      -528  0xfffffdf0 (PmmC func) args[3] r=0  (not used)
sys_GetTime                         -399  0xfffffe71 (PmmC func) args[0] r=0  (not used)
sys_GetTimer                        -394  0xfffffe76 (PmmC func) args[1] r=1  (not used)
sys_GetTimeVar                      -529  0xfffffdef (PmmC func) args[4] r=0  (not used)
sys_PmmC                            -530  0xfffffdee (PmmC func) args[0] r=0  (not used)
sys_SetDate                         -402  0xfffffe6e (PmmC func) args[3] r=1  (not used)
sys_SetTime                         -400  0xfffffe70 (PmmC func) args[3] r=1  (not used)
sys_SetTimer                        -393  0xfffffe77 (PmmC func) args[2] r=0  (not used)
sys_SetTimerEvent                   -395  0xfffffe75 (PmmC func) args[2] r=1  (not used)
sys_Sleep                           -403  0xfffffe6d (PmmC func) args[1] r=1  (not used)
sys_StoreTouchCalibration           -368  0xfffffe90 (PmmC func) args[0] r=1  (not used)
sys_T                               -391  0xfffffe79 (PmmC func) args[0] r=1  (not used)
sys_T_HI                            -392  0xfffffe78 (PmmC func) args[0] r=1  (not used)
SYS_X_MAX                             44  0x0000002c (const dword)  (not used)
SYS_Y_MAX                             45  0x0000002d (const dword)  (not used)
SYSTEM_TIMER_HI                       35  0x00000023 (const dword)  (not used)
SYSTEM_TIMER_LO                       34  0x00000022 (const dword)  (not used)
t4Dbutton                             30  0x0000001e (const dword)  (usage 15)
TAN                                54705  0x0000d5b1 (const dword)  (not used)
tAngularmeter                          7  0x00000007 (const dword)  (usage 3)
tAniButton                            31  0x0000001f (const dword)  (usage 6)
TB1                                  100  0x00000064 (const dword)  (not used)
TB2                                  101  0x00000065 (const dword)  (not used)
TB3                                  102  0x00000066 (const dword)  (not used)
TB4                                  103  0x00000067 (const dword)  (not used)
tColorPicker                          32  0x00000020 (const dword)  (usage 3)
tCoolgauge                             8  0x00000008 (const dword)  (usage 3)
tCustomdigits                          9  0x00000009 (const dword)  (usage 3)
tDipSwitch                             0  0x00000000 (const dword)  (usage 3)
TEAL                                1040  0x00000410 (const dword)  (not used)
TEXT                               63489  0x0000f801 (const dword)  (not used)
TEXT_ANGLE                            15  0x0000000f (const dword)  (not used)
TEXT_ATTRIBUTES                       13  0x0000000d (const dword)  (not used)
TEXT_BACKGROUND                        1  0x00000001 (const dword)  (not used)
TEXT_BOLD                              9  0x00000009 (const dword)  (not used)
TEXT_COLOUR                            0  0x00000000 (const dword)  (not used)
TEXT_HEIGHT                            4  0x00000004 (const dword)  (not used)
TEXT_HIGHLIGHT                         1  0x00000001 (const dword)  (not used)
TEXT_INVERSE                          11  0x0000000b (const dword)  (not used)
TEXT_ITALIC                           10  0x0000000a (const dword)  (not used)
TEXT_MARGIN                           97  0x00000061 (const dword)  (not used)
TEXT_OPACITY                           8  0x00000008 (const dword)  (not used)
TEXT_PRINTDELAY                        7  0x00000007 (const dword)  (not used)
TEXT_UNDERLINED                       12  0x0000000c (const dword)  (not used)
TEXT_WIDTH                             3  0x00000003 (const dword)  (not used)
TEXT_WRAP                             14  0x0000000e (const dword)  (not used)
TEXT_XGAP                              5  0x00000005 (const dword)  (not used)
TEXT_XPOS                             95  0x0000005f (const dword)  (not used)
TEXT_YGAP                              6  0x00000006 (const dword)  (not used)
TEXT_YPOS                             96  0x00000060 (const dword)  (not used)
tForm                                 10  0x0000000a (const dword)  (usage 15)
tGauge                                11  0x0000000b (const dword)  (usage 3)
tGSlider                               4  0x00000004 (const dword)  (usage 3)
THISTLE                            56827  0x0000ddfb (const dword)  (not used)
tImage                                12  0x0000000c (const dword)  (usage 3)
TIMER0                                 0  0x00000000 (const dword)  (not used)
TIMER1                                 1  0x00000001 (const dword)  (not used)
TIMER2                                 2  0x00000002 (const dword)  (not used)
TIMER3                                 3  0x00000003 (const dword)  (not used)
TIMER4                                 4  0x00000004 (const dword)  (not used)
TIMER5                                 5  0x00000005 (const dword)  (not used)
TIMER6                                 6  0x00000006 (const dword)  (not used)
TIMER7                                 7  0x00000007 (const dword)  (not used)
tKeyboard                             13  0x0000000d (const dword)  (usage 3)
tKnob                                  1  0x00000001 (const dword)  (usage 3)
tLed                                  14  0x0000000e (const dword)  (usage 3)
tLeddigits                            15  0x0000000f (const dword)  (usage 3)
tMagicObject                          34  0x00000022 (const dword)  (not used)
tMeter                                16  0x00000010 (const dword)  (usage 3)
TMR0                                  36  0x00000024 (const dword)  (not used)
TMR1                                  37  0x00000025 (const dword)  (not used)
TMR2                                  38  0x00000026 (const dword)  (not used)
TMR3                                  39  0x00000027 (const dword)  (not used)
TMR4                                  40  0x00000028 (const dword)  (not used)
TMR5                                  41  0x00000029 (const dword)  (not used)
TMR6                                  42  0x0000002a (const dword)  (not used)
TMR7                                  43  0x0000002b (const dword)  (not used)
to                                    -1  0xffffffff (PmmC func) args[1] r=0  (not used)
tolower                              -46  0xffffffd2 (PmmC func) args[1] r=1  (not used)
TOMATO                             64264  0x0000fb08 (const dword)  (not used)
TOP_POS                                3  0x00000003 (const dword)  (not used)
touch_DetectRegion                  -406  0xfffffe6a (PmmC func) args[4] r=0  (not used)
TOUCH_DISABLE                          1  0x00000001 (const dword)  (not used)
TOUCH_ENABLE                           0  0x00000000 (const dword)  (usage 3)
touch_Get                           -408  0xfffffe68 (PmmC func) args[1] r=1  (usage 9)
TOUCH_GETX                             1  0x00000001 (const dword)  (usage 3)
TOUCH_GETY                             2  0x00000002 (const dword)  (usage 3)
TOUCH_MOVING                           3  0x00000003 (const dword)  (usage 3)
TOUCH_PRESSED                          1  0x00000001 (const dword)  (usage 9)
TOUCH_RAW_X                          117  0x00000075 (const dword)  (not used)
TOUCH_RAW_Y                          118  0x00000076 (const dword)  (not used)
TOUCH_REGIONDEFAULT                    2  0x00000002 (const dword)  (not used)
TOUCH_RELEASED                         2  0x00000002 (const dword)  (usage 18)
touch_Set                           -407  0xfffffe69 (PmmC func) args[1] r=0  (usage 3)
TOUCH_STATUS                           0  0x00000000 (const dword)  (usage 3)
touch_TestArea                      -410  0xfffffe66 (PmmC func) args[1] r=1  (not used)
touch_TestBox                       -409  0xfffffe67 (PmmC func) args[1] r=1  (not used)
TOUCH_XMAXCAL                         80  0x00000050 (const dword)  (not used)
TOUCH_XMINCAL                         78  0x0000004e (const dword)  (not used)
TOUCH_YMAXCAL                         81  0x00000051 (const dword)  (not used)
TOUCH_YMINCAL                         79  0x0000004f (const dword)  (not used)
TouchState                           304  0x00000130 (mem) word (global)  (usage 24)
TouchXpos                            298  0x0000012a (mem) word (global)  (usage 12)
TouchYpos                            300  0x0000012c (mem) word (global)  (usage 9)
toupper                              -45  0xffffffd3 (PmmC func) args[1] r=1  (not used)
tPinInput                             29  0x0000001d (const dword)  (usage 6)
tPinOutput                            28  0x0000001c (const dword)  (usage 6)
TRANSPARENCY                          21  0x00000015 (const dword)  (not used)
TRANSPARENT                            0  0x00000000 (const dword)  (usage 3)
TRANSPARENT_COLOUR                    20  0x00000014 (const dword)  (not used)
tRockerSwitch                          2  0x00000002 (const dword)  (usage 3)
tRotarySwitch                          3  0x00000003 (const dword)  (usage 3)
tScope                                25  0x00000019 (const dword)  (not used)
tSounds                               22  0x00000016 (const dword)  (usage 6)
tSpectrum                             24  0x00000018 (const dword)  (usage 3)
tStaticText                           21  0x00000015 (const dword)  (usage 3)
tStrings                              17  0x00000011 (const dword)  (usage 18)
tTank                                 26  0x0000001a (const dword)  (usage 3)
tThermometer                          18  0x00000012 (const dword)  (usage 3)
tTimer                                23  0x00000017 (const dword)  (usage 6)
tTrackbar                              5  0x00000005 (const dword)  (usage 3)
TurnOffButtons                     16834  0x000041c2 (User func) args[1] r=0  (usage 6)
TURQUOISE                          18202  0x0000471a (const dword)  (not used)
tUserButton                           33  0x00000021 (const dword)  (usage 687)
tUserImages                           27  0x0000001b (const dword)  (usage 3)
tUserled                              19  0x00000013 (const dword)  (usage 3)
tVideo                                20  0x00000014 (const dword)  (usage 3)
tWinButton                             6  0x00000006 (const dword)  (usage 12)
txt_Angle                            -33  0xffffffdf (PmmC func) args[1] r=1  (not used)
txt_Attributes                       -31  0xffffffe1 (PmmC func) args[1] r=1  (usage 3)
txt_BGcolour                         -19  0xffffffed (PmmC func) args[1] r=1  (usage 3)
txt_Bold                             -27  0xffffffe5 (PmmC func) args[1] r=1  (not used)
txt_Delay                            -25  0xffffffe7 (PmmC func) args[1] r=1  (not used)
txt_FGcolour                         -18  0xffffffee (PmmC func) args[1] r=1  (usage 3)
TXT_FONT_HEIGHT                      102  0x00000066 (const dword)  (not used)
TXT_FONT_ID                           98  0x00000062 (const dword)  (not used)
TXT_FONT_MAX                          99  0x00000063 (const dword)  (not used)
TXT_FONT_OFFSET                      100  0x00000064 (const dword)  (not used)
TXT_FONT_WIDTH                       101  0x00000065 (const dword)  (not used)
txt_FontBank                         -52  0xffffffcc (PmmC func) args[2] r=1  (not used)
txt_FontID                           -20  0xffffffec (PmmC func) args[1] r=1  (usage 3)
txt_Height                           -22  0xffffffea (PmmC func) args[1] r=1  (not used)
txt_Inverse                          -29  0xffffffe3 (PmmC func) args[1] r=1  (not used)
txt_Italic                           -28  0xffffffe4 (PmmC func) args[1] r=1  (not used)
txt_MoveCursor                       -16  0xfffffff0 (PmmC func) args[2] r=0  (not used)
txt_Opacity                          -26  0xffffffe6 (PmmC func) args[1] r=1  (usage 3)
txt_Set                              -17  0xffffffef (PmmC func) args[2] r=0  (not used)
txt_Underline                        -30  0xffffffe2 (PmmC func) args[1] r=1  (not used)
txt_Width                            -21  0xffffffeb (PmmC func) args[1] r=1  (not used)
txt_Wrap                             -32  0xffffffe0 (PmmC func) args[1] r=1  (not used)
txt_Xgap                             -23  0xffffffe9 (PmmC func) args[1] r=1  (not used)
txt_Ygap                             -24  0xffffffe8 (PmmC func) args[1] r=1  (not used)
uadd_3232                            -71  0xffffffb9 (PmmC func) args[3] r=1  (usage 3)
ucmp_3232                            -75  0xffffffb5 (PmmC func) args[2] r=1  (not used)
UDEC                               17674  0x0000450a (const dword)  (not used)
UDEC1                              16650  0x0000410a (const dword)  (not used)
UDEC1Z                             20746  0x0000510a (const dword)  (not used)
UDEC1ZB                            24842  0x0000610a (const dword)  (not used)
UDEC2                              16906  0x0000420a (const dword)  (not used)
UDEC2Z                             21002  0x0000520a (const dword)  (not used)
UDEC2ZB                            25098  0x0000620a (const dword)  (not used)
UDEC3                              17162  0x0000430a (const dword)  (not used)
UDEC3Z                             21258  0x0000530a (const dword)  (not used)
UDEC3ZB                            25354  0x0000630a (const dword)  (not used)
UDEC4                              17418  0x0000440a (const dword)  (not used)
UDEC4Z                             21514  0x0000540a (const dword)  (not used)
UDEC4ZB                            25610  0x0000640a (const dword)  (not used)
UDEC5                              17674  0x0000450a (const dword)  (not used)
UDEC5Z                             21770  0x0000550a (const dword)  (not used)
UDEC5ZB                            25866  0x0000650a (const dword)  (not used)
UDECZ                              21770  0x0000550a (const dword)  (not used)
UDECZB                             25866  0x0000650a (const dword)  (not used)
udiv_3232                            -74  0xffffffb6 (PmmC func) args[3] r=1  (not used)
umul_1616                            -73  0xffffffb7 (PmmC func) args[3] r=1  (usage 3)
UNCHECKED                              1  0x00000001 (const dword)  (not used)
UNDERLINED                           128  0x00000080 (const dword)  (not used)
unicode_page                         -15  0xfffffff1 (PmmC func) args[3] r=1  (not used)
UP                                     1  0x00000001 (const dword)  (not used)
UpdateObjects                      15882  0x00003e0a (User func) args[1] r=0  (usage 3)
usub_3232                            -72  0xffffffb8 (PmmC func) args[3] r=1  (not used)
VIOLET                             60445  0x0000ec1d (const dword)  (not used)
WHEAT                              63222  0x0000f6f6 (const dword)  (not used)
WHITE                              65535  0x0000ffff (const dword)  (usage 6)
WHITESMOKE                         63422  0x0000f7be (const dword)  (not used)
WRITE_CONTRAST                         4  0x00000004 (const dword)  (usage 3)
WRITE_MAGIC_BYTES                      8  0x00000008 (const dword)  (not used)
WRITE_MAGIC_DBYTES                     9  0x00000009 (const dword)  (not used)
WRITE_OBJ                              1  0x00000001 (const dword)  (usage 3)
WRITE_STR                              2  0x00000002 (const dword)  (usage 6)
WRITE_STRU                             3  0x00000003 (const dword)  (usage 6)
WriteCmd                               0  0x00000000 (const dword)  (not used)
WriteObject                        16971  0x0000424b (User func) args[3] r=0  (usage 24)
X_MAX                                  0  0x00000000 (const dword)  (not used)
X_ORG                                  6  0x00000006 (const dword)  (not used)
X_ORIGIN                              30  0x0000001e (const dword)  (not used)
Y_MAX                                  1  0x00000001 (const dword)  (not used)
Y_ORG                                  7  0x00000007 (const dword)  (not used)
Y_ORIGIN                              31  0x0000001f (const dword)  (not used)
YELLOW                             65504  0x0000ffe0 (const dword)  (not used)
YELLOWGREEN                        40550  0x00009e66 (const dword)  (not used)
